
ARM_Task_Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001850  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08001a20  08001a20  00011a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b8c  08001b8c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08001b8c  08001b8c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b8c  08001b8c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b8c  08001b8c  00011b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b90  08001b90  00011b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08001b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000060  08001bf4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08001bf4  00020220  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000011b7  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000059e  00000000  00000000  00021284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  00021828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000152  00000000  00000000  00021a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002ff9  00000000  00000000  00021b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001dde  00000000  00000000  00024b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a08d  00000000  00000000  00026931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000e14  00000000  00000000  000309c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000317d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001a08 	.word	0x08001a08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08001a08 	.word	0x08001a08

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
void unblock_tasks(void);



int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0

	enable_processor_faults();
 80002b4:	f000 f90c 	bl	80004d0 <enable_processor_faults>

	printf("The RAM end is: %x \n", SRAM_END);
 80002b8:	4913      	ldr	r1, [pc, #76]	; (8000308 <main+0x58>)
 80002ba:	4814      	ldr	r0, [pc, #80]	; (800030c <main+0x5c>)
 80002bc:	f000 fcdc 	bl	8000c78 <iprintf>

	printf("The Task 1 Stack start: 0x%X \n", TASK1_STACK_START);
 80002c0:	4911      	ldr	r1, [pc, #68]	; (8000308 <main+0x58>)
 80002c2:	4813      	ldr	r0, [pc, #76]	; (8000310 <main+0x60>)
 80002c4:	f000 fcd8 	bl	8000c78 <iprintf>
	printf("The Task 2 Stack start: 0x%X \n", TASK2_STACK_START);
 80002c8:	4912      	ldr	r1, [pc, #72]	; (8000314 <main+0x64>)
 80002ca:	4813      	ldr	r0, [pc, #76]	; (8000318 <main+0x68>)
 80002cc:	f000 fcd4 	bl	8000c78 <iprintf>
	printf("The Task 3 Stack start: 0x%X \n", TASK3_STACK_START);
 80002d0:	4912      	ldr	r1, [pc, #72]	; (800031c <main+0x6c>)
 80002d2:	4813      	ldr	r0, [pc, #76]	; (8000320 <main+0x70>)
 80002d4:	f000 fcd0 	bl	8000c78 <iprintf>
	printf("The Task 4 Stack start: 0x%X \n", TASK4_STACK_START);
 80002d8:	4912      	ldr	r1, [pc, #72]	; (8000324 <main+0x74>)
 80002da:	4813      	ldr	r0, [pc, #76]	; (8000328 <main+0x78>)
 80002dc:	f000 fccc 	bl	8000c78 <iprintf>

	printf("The Scheduler Stack start: 0x%X \n", SCHEDULER_STACK_START);
 80002e0:	4912      	ldr	r1, [pc, #72]	; (800032c <main+0x7c>)
 80002e2:	4813      	ldr	r0, [pc, #76]	; (8000330 <main+0x80>)
 80002e4:	f000 fcc8 	bl	8000c78 <iprintf>

	init_scheduler_stack(SCHEDULER_STACK_START);
 80002e8:	4810      	ldr	r0, [pc, #64]	; (800032c <main+0x7c>)
 80002ea:	f000 f85b 	bl	80003a4 <init_scheduler_stack>

	init_tasks_stack();
 80002ee:	f000 f85f 	bl	80003b0 <init_tasks_stack>

	systick_timer_initialization(TICK_HZ);
 80002f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f6:	f000 f81d 	bl	8000334 <systick_timer_initialization>

	switch_sp_to_psp();
 80002fa:	f000 f96f 	bl	80005dc <switch_sp_to_psp>

	task1_handler();
 80002fe:	f000 fac1 	bl	8000884 <task1_handler>
 8000302:	2300      	movs	r3, #0

}
 8000304:	4618      	mov	r0, r3
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20020000 	.word	0x20020000
 800030c:	08001a20 	.word	0x08001a20
 8000310:	08001a38 	.word	0x08001a38
 8000314:	2001fc00 	.word	0x2001fc00
 8000318:	08001a58 	.word	0x08001a58
 800031c:	2001f800 	.word	0x2001f800
 8000320:	08001a78 	.word	0x08001a78
 8000324:	2001f400 	.word	0x2001f400
 8000328:	08001a98 	.word	0x08001a98
 800032c:	2001ec00 	.word	0x2001ec00
 8000330:	08001ab8 	.word	0x08001ab8

08000334 <systick_timer_initialization>:

/*
 * 	Define peripheral configurations.
 */

void systick_timer_initialization(uint32_t tick_hz){
 8000334:	b480      	push	{r7}
 8000336:	b087      	sub	sp, #28
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]

	// Calculate the system tick reload value
	uint32_t load_value = (SYSTICK_TIM_CLOCK / tick_hz) - 1;
 800033c:	4a16      	ldr	r2, [pc, #88]	; (8000398 <systick_timer_initialization+0x64>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	fbb2 f3f3 	udiv	r3, r2, r3
 8000344:	3b01      	subs	r3, #1
 8000346:	617b      	str	r3, [r7, #20]

	// Clear system tick Reload Value register (24 bit system timer)
	uint32_t * pSys_RVR = (uint32_t*) SYST_RVR;
 8000348:	4b14      	ldr	r3, [pc, #80]	; (800039c <systick_timer_initialization+0x68>)
 800034a:	613b      	str	r3, [r7, #16]
	*pSys_RVR &= ~(0x00FFFFFF);
 800034c:	693b      	ldr	r3, [r7, #16]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000354:	693b      	ldr	r3, [r7, #16]
 8000356:	601a      	str	r2, [r3, #0]

	// Load the start value to count.
	*pSys_RVR |= load_value;
 8000358:	693b      	ldr	r3, [r7, #16]
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	431a      	orrs	r2, r3
 8000360:	693b      	ldr	r3, [r7, #16]
 8000362:	601a      	str	r2, [r3, #0]

	// Configure the SysTick Control and Status Register
	uint32_t * pSys_CSR = (uint32_t*) SYST_CSR;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <systick_timer_initialization+0x6c>)
 8000366:	60fb      	str	r3, [r7, #12]

	*pSys_CSR |= (1 << 2);	// Indicates the clock source: Processor clock source.
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f043 0204 	orr.w	r2, r3, #4
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	601a      	str	r2, [r3, #0]
	*pSys_CSR |= (1 << 1);	// Enables SysTick exception request.
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f043 0202 	orr.w	r2, r3, #2
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	601a      	str	r2, [r3, #0]
	*pSys_CSR |= (1 << 0);	// Enables the counter.
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f043 0201 	orr.w	r2, r3, #1
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	601a      	str	r2, [r3, #0]
}
 800038c:	bf00      	nop
 800038e:	371c      	adds	r7, #28
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	00f42400 	.word	0x00f42400
 800039c:	e000e014 	.word	0xe000e014
 80003a0:	e000e010 	.word	0xe000e010

080003a4 <init_scheduler_stack>:

__attribute__( (naked) ) void init_scheduler_stack(uint32_t scheduler_stack_start){
 80003a4:	4603      	mov	r3, r0

	__asm volatile("MSR MSP, %0": 	:"r"(scheduler_stack_start)	:	);
 80003a6:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 80003aa:	4770      	bx	lr
}
 80003ac:	bf00      	nop
	...

080003b0 <init_tasks_stack>:

void init_tasks_stack(void){
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0

	user_tasks[0].current_state = TASK_RUNNING_STATE;
 80003b6:	4b3b      	ldr	r3, [pc, #236]	; (80004a4 <init_tasks_stack+0xf4>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_RUNNING_STATE;
 80003bc:	4b39      	ldr	r3, [pc, #228]	; (80004a4 <init_tasks_stack+0xf4>)
 80003be:	2200      	movs	r2, #0
 80003c0:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_RUNNING_STATE;
 80003c2:	4b38      	ldr	r3, [pc, #224]	; (80004a4 <init_tasks_stack+0xf4>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_RUNNING_STATE;
 80003ca:	4b36      	ldr	r3, [pc, #216]	; (80004a4 <init_tasks_stack+0xf4>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_RUNNING_STATE;
 80003d2:	4b34      	ldr	r3, [pc, #208]	; (80004a4 <init_tasks_stack+0xf4>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 80003da:	4b32      	ldr	r3, [pc, #200]	; (80004a4 <init_tasks_stack+0xf4>)
 80003dc:	4a32      	ldr	r2, [pc, #200]	; (80004a8 <init_tasks_stack+0xf8>)
 80003de:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = TASK1_STACK_START;
 80003e0:	4b30      	ldr	r3, [pc, #192]	; (80004a4 <init_tasks_stack+0xf4>)
 80003e2:	4a32      	ldr	r2, [pc, #200]	; (80004ac <init_tasks_stack+0xfc>)
 80003e4:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = TASK2_STACK_START;
 80003e6:	4b2f      	ldr	r3, [pc, #188]	; (80004a4 <init_tasks_stack+0xf4>)
 80003e8:	4a31      	ldr	r2, [pc, #196]	; (80004b0 <init_tasks_stack+0x100>)
 80003ea:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = TASK3_STACK_START;
 80003ec:	4b2d      	ldr	r3, [pc, #180]	; (80004a4 <init_tasks_stack+0xf4>)
 80003ee:	4a31      	ldr	r2, [pc, #196]	; (80004b4 <init_tasks_stack+0x104>)
 80003f0:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = TASK4_STACK_START;
 80003f2:	4b2c      	ldr	r3, [pc, #176]	; (80004a4 <init_tasks_stack+0xf4>)
 80003f4:	4a30      	ldr	r2, [pc, #192]	; (80004b8 <init_tasks_stack+0x108>)
 80003f6:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task;
 80003f8:	4b2a      	ldr	r3, [pc, #168]	; (80004a4 <init_tasks_stack+0xf4>)
 80003fa:	4a30      	ldr	r2, [pc, #192]	; (80004bc <init_tasks_stack+0x10c>)
 80003fc:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 80003fe:	4b29      	ldr	r3, [pc, #164]	; (80004a4 <init_tasks_stack+0xf4>)
 8000400:	4a2f      	ldr	r2, [pc, #188]	; (80004c0 <init_tasks_stack+0x110>)
 8000402:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 8000404:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <init_tasks_stack+0xf4>)
 8000406:	4a2f      	ldr	r2, [pc, #188]	; (80004c4 <init_tasks_stack+0x114>)
 8000408:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 800040a:	4b26      	ldr	r3, [pc, #152]	; (80004a4 <init_tasks_stack+0xf4>)
 800040c:	4a2e      	ldr	r2, [pc, #184]	; (80004c8 <init_tasks_stack+0x118>)
 800040e:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 8000410:	4b24      	ldr	r3, [pc, #144]	; (80004a4 <init_tasks_stack+0xf4>)
 8000412:	4a2e      	ldr	r2, [pc, #184]	; (80004cc <init_tasks_stack+0x11c>)
 8000414:	64da      	str	r2, [r3, #76]	; 0x4c

	uint32_t* pPSP = NULL;
 8000416:	2300      	movs	r3, #0
 8000418:	607b      	str	r3, [r7, #4]

	for(uint8_t task = 0; task < MAX_TASKS; task ++){
 800041a:	2300      	movs	r3, #0
 800041c:	70fb      	strb	r3, [r7, #3]
 800041e:	e037      	b.n	8000490 <init_tasks_stack+0xe0>

		pPSP = (uint32_t*) user_tasks[task].psp_value;
 8000420:	78fb      	ldrb	r3, [r7, #3]
 8000422:	4a20      	ldr	r2, [pc, #128]	; (80004a4 <init_tasks_stack+0xf4>)
 8000424:	011b      	lsls	r3, r3, #4
 8000426:	4413      	add	r3, r2
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	607b      	str	r3, [r7, #4]

		pPSP --;	// XPSR
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	3b04      	subs	r3, #4
 8000430:	607b      	str	r3, [r7, #4]
		*pPSP = 0x01000000;	// Dummy XPSR
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000438:	601a      	str	r2, [r3, #0]

		pPSP --;	// PC
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	3b04      	subs	r3, #4
 800043e:	607b      	str	r3, [r7, #4]
		*pPSP = (uint32_t) user_tasks[task].task_handler;
 8000440:	78fb      	ldrb	r3, [r7, #3]
 8000442:	4a18      	ldr	r2, [pc, #96]	; (80004a4 <init_tasks_stack+0xf4>)
 8000444:	011b      	lsls	r3, r3, #4
 8000446:	4413      	add	r3, r2
 8000448:	330c      	adds	r3, #12
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	461a      	mov	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	601a      	str	r2, [r3, #0]

		pPSP --;	// LR
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	3b04      	subs	r3, #4
 8000456:	607b      	str	r3, [r7, #4]
		*pPSP =	0xFFFFFFFD;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f06f 0202 	mvn.w	r2, #2
 800045e:	601a      	str	r2, [r3, #0]

		// Initialization general register as 0
		for(uint8_t gen_reg = 0; gen_reg < 13; gen_reg ++){
 8000460:	2300      	movs	r3, #0
 8000462:	70bb      	strb	r3, [r7, #2]
 8000464:	e008      	b.n	8000478 <init_tasks_stack+0xc8>
			pPSP --;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	3b04      	subs	r3, #4
 800046a:	607b      	str	r3, [r7, #4]
			*pPSP = 0;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
		for(uint8_t gen_reg = 0; gen_reg < 13; gen_reg ++){
 8000472:	78bb      	ldrb	r3, [r7, #2]
 8000474:	3301      	adds	r3, #1
 8000476:	70bb      	strb	r3, [r7, #2]
 8000478:	78bb      	ldrb	r3, [r7, #2]
 800047a:	2b0c      	cmp	r3, #12
 800047c:	d9f3      	bls.n	8000466 <init_tasks_stack+0xb6>
		}

		user_tasks[task].psp_value = (uint32_t) pPSP;
 800047e:	78fb      	ldrb	r3, [r7, #3]
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	4908      	ldr	r1, [pc, #32]	; (80004a4 <init_tasks_stack+0xf4>)
 8000484:	011b      	lsls	r3, r3, #4
 8000486:	440b      	add	r3, r1
 8000488:	601a      	str	r2, [r3, #0]
	for(uint8_t task = 0; task < MAX_TASKS; task ++){
 800048a:	78fb      	ldrb	r3, [r7, #3]
 800048c:	3301      	adds	r3, #1
 800048e:	70fb      	strb	r3, [r7, #3]
 8000490:	78fb      	ldrb	r3, [r7, #3]
 8000492:	2b04      	cmp	r3, #4
 8000494:	d9c4      	bls.n	8000420 <init_tasks_stack+0x70>

	}

}
 8000496:	bf00      	nop
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	2000007c 	.word	0x2000007c
 80004a8:	2001f000 	.word	0x2001f000
 80004ac:	20020000 	.word	0x20020000
 80004b0:	2001fc00 	.word	0x2001fc00
 80004b4:	2001f800 	.word	0x2001f800
 80004b8:	2001f400 	.word	0x2001f400
 80004bc:	08000a35 	.word	0x08000a35
 80004c0:	08000885 	.word	0x08000885
 80004c4:	080008f1 	.word	0x080008f1
 80004c8:	0800095d 	.word	0x0800095d
 80004cc:	080009c9 	.word	0x080009c9

080004d0 <enable_processor_faults>:

void enable_processor_faults(void){
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0

	uint32_t* pSHCSR = (uint32_t*) SHCSR;
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <enable_processor_faults+0x38>)
 80004d8:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1 << 18);	// Usage fault
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17);	// Bus fault
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 16);	// Mem manage
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	601a      	str	r2, [r3, #0]

}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr
 8000508:	e000ed24 	.word	0xe000ed24

0800050c <get_current_psp_value>:

/*
 * 	PSP Manage Functions
 */

uint32_t get_current_psp_value(void){
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0

	return user_tasks[current_task].psp_value;
 8000510:	4b04      	ldr	r3, [pc, #16]	; (8000524 <get_current_psp_value+0x18>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4a04      	ldr	r2, [pc, #16]	; (8000528 <get_current_psp_value+0x1c>)
 8000516:	011b      	lsls	r3, r3, #4
 8000518:	4413      	add	r3, r2
 800051a:	681b      	ldr	r3, [r3, #0]
}
 800051c:	4618      	mov	r0, r3
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr
 8000524:	20000000 	.word	0x20000000
 8000528:	2000007c 	.word	0x2000007c

0800052c <save_psp_value>:

void save_psp_value(uint32_t psp_value){
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]

	user_tasks[current_task].psp_value = psp_value;
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <save_psp_value+0x20>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	4a05      	ldr	r2, [pc, #20]	; (8000550 <save_psp_value+0x24>)
 800053a:	011b      	lsls	r3, r3, #4
 800053c:	4413      	add	r3, r2
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	601a      	str	r2, [r3, #0]

}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	20000000 	.word	0x20000000
 8000550:	2000007c 	.word	0x2000007c

08000554 <update_task>:

void update_task(void){
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0

	uint8_t state = TASK_BLOCKED_STATE;
 800055a:	23ff      	movs	r3, #255	; 0xff
 800055c:	71fb      	strb	r3, [r7, #7]

	for(uint8_t task = 0; task < MAX_TASKS; task ++){
 800055e:	2300      	movs	r3, #0
 8000560:	71bb      	strb	r3, [r7, #6]
 8000562:	e024      	b.n	80005ae <update_task+0x5a>
		current_task ++;
 8000564:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <update_task+0x7c>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	3301      	adds	r3, #1
 800056a:	b2da      	uxtb	r2, r3
 800056c:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <update_task+0x7c>)
 800056e:	701a      	strb	r2, [r3, #0]
		current_task %= MAX_TASKS;
 8000570:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <update_task+0x7c>)
 8000572:	781a      	ldrb	r2, [r3, #0]
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <update_task+0x80>)
 8000576:	fba3 1302 	umull	r1, r3, r3, r2
 800057a:	0899      	lsrs	r1, r3, #2
 800057c:	460b      	mov	r3, r1
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	440b      	add	r3, r1
 8000582:	1ad3      	subs	r3, r2, r3
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <update_task+0x7c>)
 8000588:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <update_task+0x7c>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	4a12      	ldr	r2, [pc, #72]	; (80005d8 <update_task+0x84>)
 8000590:	011b      	lsls	r3, r3, #4
 8000592:	4413      	add	r3, r2
 8000594:	3308      	adds	r3, #8
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	71fb      	strb	r3, [r7, #7]
		if( (state == TASK_RUNNING_STATE) && (current_task != 0) )
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d103      	bne.n	80005a8 <update_task+0x54>
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <update_task+0x7c>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d106      	bne.n	80005b6 <update_task+0x62>
	for(uint8_t task = 0; task < MAX_TASKS; task ++){
 80005a8:	79bb      	ldrb	r3, [r7, #6]
 80005aa:	3301      	adds	r3, #1
 80005ac:	71bb      	strb	r3, [r7, #6]
 80005ae:	79bb      	ldrb	r3, [r7, #6]
 80005b0:	2b04      	cmp	r3, #4
 80005b2:	d9d7      	bls.n	8000564 <update_task+0x10>
 80005b4:	e000      	b.n	80005b8 <update_task+0x64>
			break;
 80005b6:	bf00      	nop
	}

	if(state != TASK_RUNNING_STATE)
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d002      	beq.n	80005c4 <update_task+0x70>
		current_task = 0;
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <update_task+0x7c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]

}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000000 	.word	0x20000000
 80005d4:	cccccccd 	.word	0xcccccccd
 80005d8:	2000007c 	.word	0x2000007c

080005dc <switch_sp_to_psp>:

__attribute__( (naked) ) void switch_sp_to_psp(void){

	// Initialize PSP value with the TASK 1 stack start address.

	__asm volatile ("PUSH {LR}");	// Preserves LR which connects back to the main function.
 80005dc:	b500      	push	{lr}
	__asm volatile ("BL get_current_psp_value");
 80005de:	f7ff ff95 	bl	800050c <get_current_psp_value>
	__asm volatile ("MSR PSP, R0");	// Initialize the PSP
 80005e2:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");		// Retrieve LR value
 80005e6:	f85d eb04 	ldr.w	lr, [sp], #4

	//	Change MSP to PSP
	__asm volatile ("MOV R0, #0x02");
 80005ea:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL, R0");
 80005ee:	f380 8814 	msr	CONTROL, r0

	// Back to main
	__asm volatile ("BX LR");
 80005f2:	4770      	bx	lr

}
 80005f4:	bf00      	nop
	...

080005f8 <update_g_tick_count>:

/*
 * 	Define Exceptions Handlers
 */

void update_g_tick_count(void){
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
	g_tick_count ++;
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <update_g_tick_count+0x18>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	3301      	adds	r3, #1
 8000602:	4a03      	ldr	r2, [pc, #12]	; (8000610 <update_g_tick_count+0x18>)
 8000604:	6013      	str	r3, [r2, #0]
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	200000cc 	.word	0x200000cc

08000614 <unblock_tasks>:

void unblock_tasks(void){
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0

	for(uint8_t task = 1; task < MAX_TASKS; task ++){
 800061a:	2301      	movs	r3, #1
 800061c:	71fb      	strb	r3, [r7, #7]
 800061e:	e01b      	b.n	8000658 <unblock_tasks+0x44>

		if( (user_tasks[task].current_state == TASK_BLOCKED_STATE) && (user_tasks[task].block_count == g_tick_count)){
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	4a12      	ldr	r2, [pc, #72]	; (800066c <unblock_tasks+0x58>)
 8000624:	011b      	lsls	r3, r3, #4
 8000626:	4413      	add	r3, r2
 8000628:	3308      	adds	r3, #8
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2bff      	cmp	r3, #255	; 0xff
 800062e:	d110      	bne.n	8000652 <unblock_tasks+0x3e>
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	4a0e      	ldr	r2, [pc, #56]	; (800066c <unblock_tasks+0x58>)
 8000634:	011b      	lsls	r3, r3, #4
 8000636:	4413      	add	r3, r2
 8000638:	3304      	adds	r3, #4
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <unblock_tasks+0x5c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	429a      	cmp	r2, r3
 8000642:	d106      	bne.n	8000652 <unblock_tasks+0x3e>
			user_tasks[task].current_state = TASK_RUNNING_STATE;
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	4a09      	ldr	r2, [pc, #36]	; (800066c <unblock_tasks+0x58>)
 8000648:	011b      	lsls	r3, r3, #4
 800064a:	4413      	add	r3, r2
 800064c:	3308      	adds	r3, #8
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	for(uint8_t task = 1; task < MAX_TASKS; task ++){
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	3301      	adds	r3, #1
 8000656:	71fb      	strb	r3, [r7, #7]
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b04      	cmp	r3, #4
 800065c:	d9e0      	bls.n	8000620 <unblock_tasks+0xc>
		}

	}

}
 800065e:	bf00      	nop
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	2000007c 	.word	0x2000007c
 8000670:	200000cc 	.word	0x200000cc

08000674 <SysTick_Handler>:

void SysTick_Handler(void){
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0

	update_g_tick_count();
 800067a:	f7ff ffbd 	bl	80005f8 <update_g_tick_count>
	unblock_tasks();
 800067e:	f7ff ffc9 	bl	8000614 <unblock_tasks>

	// Set PendSV Handler
	uint32_t* pICSR = (uint32_t*) 0xE000ED04;
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <SysTick_Handler+0x28>)
 8000684:	607b      	str	r3, [r7, #4]
	*pICSR |= (0x01 << 28);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	601a      	str	r2, [r3, #0]

}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	e000ed04 	.word	0xe000ed04

080006a0 <PendSV_Handler>:

__attribute__((naked)) void PendSV_Handler(void){

	// SAVE THE CONTEXT OF THE TASK
	// Get the current PSP value of the task.
	__asm volatile("MRS R0, PSP");
 80006a0:	f3ef 8009 	mrs	r0, PSP
	// Use the PSP address to store the remaining stack frame (R4 to R11)
	__asm volatile("STMDB R0!, {R4-R11}");
 80006a4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// Before call another function, save the LR (linker register)
	__asm volatile("PUSH {LR}"); // Save LR into MSP
 80006a8:	b500      	push	{lr}

	// Save the current value of PSP (after store the remaining registers).
	__asm volatile("BL save_psp_value");
 80006aa:	f7ff ff3f 	bl	800052c <save_psp_value>

	// RETRIEVE THE CONTEXT OF THE NEXT TASK
	// Update the next task
	__asm volatile("BL update_task");
 80006ae:	f7ff ff51 	bl	8000554 <update_task>
	// Get the PSP value of the next task
	__asm volatile("BL get_current_psp_value");
 80006b2:	f7ff ff2b 	bl	800050c <get_current_psp_value>
	// Using the task's PSP retrieve the remaining registers (R4 to R11).
	__asm volatile("LDMIA R0!, {R4-R11}");
 80006b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// Update the processor PSP value with the task PSP value before exit
	__asm volatile("MSR PSP, R0");
 80006ba:	f380 8809 	msr	PSP, r0

	// Before exit retrieve the value of LR
	__asm volatile("POP {LR}");
 80006be:	f85d eb04 	ldr.w	lr, [sp], #4

	// Activate the exit sequence
	__asm volatile("BX LR");
 80006c2:	4770      	bx	lr

}
 80006c4:	bf00      	nop
	...

080006c8 <MemManage_Handler>:

void MemManage_Handler(void){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0

	printf("MenManage Handler \n");
 80006cc:	4801      	ldr	r0, [pc, #4]	; (80006d4 <MemManage_Handler+0xc>)
 80006ce:	f000 fb39 	bl	8000d44 <puts>
	while(true);
 80006d2:	e7fe      	b.n	80006d2 <MemManage_Handler+0xa>
 80006d4:	08001adc 	.word	0x08001adc

080006d8 <BusFault_Handler>:
}

void BusFault_Handler(void){
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0

	printf("BusFault Handler \n");
 80006dc:	4801      	ldr	r0, [pc, #4]	; (80006e4 <BusFault_Handler+0xc>)
 80006de:	f000 fb31 	bl	8000d44 <puts>
	while(true);
 80006e2:	e7fe      	b.n	80006e2 <BusFault_Handler+0xa>
 80006e4:	08001af0 	.word	0x08001af0

080006e8 <UsageFault_Handler>:
}

void UsageFault_Handler(void){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

	printf("UsageFault Handler \n");
 80006ec:	4801      	ldr	r0, [pc, #4]	; (80006f4 <UsageFault_Handler+0xc>)
 80006ee:	f000 fb29 	bl	8000d44 <puts>
	while(true);
 80006f2:	e7fe      	b.n	80006f2 <UsageFault_Handler+0xa>
 80006f4:	08001b04 	.word	0x08001b04

080006f8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <ITM_SendChar+0x44>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a0d      	ldr	r2, [pc, #52]	; (800073c <ITM_SendChar+0x44>)
 8000708:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800070c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <ITM_SendChar+0x48>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <ITM_SendChar+0x48>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800071a:	bf00      	nop
 800071c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0f8      	beq.n	800071c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800072a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	6013      	str	r3, [r2, #0]
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	e000edfc 	.word	0xe000edfc
 8000740:	e0000e00 	.word	0xe0000e00

08000744 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	e00a      	b.n	800076c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000756:	f3af 8000 	nop.w
 800075a:	4601      	mov	r1, r0
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	60ba      	str	r2, [r7, #8]
 8000762:	b2ca      	uxtb	r2, r1
 8000764:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	3301      	adds	r3, #1
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	697a      	ldr	r2, [r7, #20]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	429a      	cmp	r2, r3
 8000772:	dbf0      	blt.n	8000756 <_read+0x12>
  }

  return len;
 8000774:	687b      	ldr	r3, [r7, #4]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b086      	sub	sp, #24
 8000782:	af00      	add	r7, sp, #0
 8000784:	60f8      	str	r0, [r7, #12]
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	e009      	b.n	80007a4 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	1c5a      	adds	r2, r3, #1
 8000794:	60ba      	str	r2, [r7, #8]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ffad 	bl	80006f8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	3301      	adds	r3, #1
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697a      	ldr	r2, [r7, #20]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	dbf1      	blt.n	8000790 <_write+0x12>
  }
  return len;
 80007ac:	687b      	ldr	r3, [r7, #4]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <_close>:

int _close(int file)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b083      	sub	sp, #12
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007dc:	605a      	str	r2, [r3, #4]
  return 0;
 80007de:	2300      	movs	r3, #0
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <_isatty>:

int _isatty(int file)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b083      	sub	sp, #12
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr

080007fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007fe:	b480      	push	{r7}
 8000800:	b085      	sub	sp, #20
 8000802:	af00      	add	r7, sp, #0
 8000804:	60f8      	str	r0, [r7, #12]
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800080a:	2300      	movs	r3, #0
}
 800080c:	4618      	mov	r0, r3
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
	...

08000818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000820:	4a14      	ldr	r2, [pc, #80]	; (8000874 <_sbrk+0x5c>)
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <_sbrk+0x60>)
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <_sbrk+0x64>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d102      	bne.n	800083a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <_sbrk+0x64>)
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <_sbrk+0x68>)
 8000838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <_sbrk+0x64>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	429a      	cmp	r2, r3
 8000846:	d207      	bcs.n	8000858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000848:	f000 fbaa 	bl	8000fa0 <__errno>
 800084c:	4603      	mov	r3, r0
 800084e:	220c      	movs	r2, #12
 8000850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	e009      	b.n	800086c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <_sbrk+0x64>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800085e:	4b07      	ldr	r3, [pc, #28]	; (800087c <_sbrk+0x64>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	4a05      	ldr	r2, [pc, #20]	; (800087c <_sbrk+0x64>)
 8000868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800086a:	68fb      	ldr	r3, [r7, #12]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20020000 	.word	0x20020000
 8000878:	00000400 	.word	0x00000400
 800087c:	200000d0 	.word	0x200000d0
 8000880:	20000220 	.word	0x20000220

08000884 <task1_handler>:

/*
 * 	Define the User Tasks
 */

void task1_handler(void){
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0

	// Configure GPIO to control YELLOW Led (PC0).

	// Enable Clock for GPIO C port
	RCC_AHB1ENR_t volatile * const rcc_enable_ahb1 = (RCC_AHB1ENR_t*) (RCC_REGISTER | RCC_AHB1ENR_OFFSET);
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <task1_handler+0x5c>)
 800088c:	60fb      	str	r3, [r7, #12]
	rcc_enable_ahb1->GPIO_C_EN = 0x01;
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	6813      	ldr	r3, [r2, #0]
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	6013      	str	r3, [r2, #0]

	// Configure GPIO C0 as output.
	GPIOx_MODER_t volatile * const p_gpio_c_moder_register = 	(GPIOx_MODER_t*) (GPIO_C_REGISTER | GPIO_MODER_OFFSET);
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <task1_handler+0x60>)
 800089a:	60bb      	str	r3, [r7, #8]
	p_gpio_c_moder_register->MODER_0 = 0x01;
 800089c:	68ba      	ldr	r2, [r7, #8]
 800089e:	6813      	ldr	r3, [r2, #0]
 80008a0:	2101      	movs	r1, #1
 80008a2:	f361 0301 	bfi	r3, r1, #0, #2
 80008a6:	6013      	str	r3, [r2, #0]
	GPIOx_ODR_t volatile * const p_gpio_c_odr_r = (GPIOx_ODR_t*) (GPIO_C_REGISTER | GPIO_ODR_OFFSET);
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <task1_handler+0x64>)
 80008aa:	607b      	str	r3, [r7, #4]
	p_gpio_c_odr_r->ODR_0 = 0;
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	6813      	ldr	r3, [r2, #0]
 80008b0:	f36f 0300 	bfc	r3, #0, #1
 80008b4:	6013      	str	r3, [r2, #0]

	printf("Running TASK 1 \n");
 80008b6:	480d      	ldr	r0, [pc, #52]	; (80008ec <task1_handler+0x68>)
 80008b8:	f000 fa44 	bl	8000d44 <puts>

	while(true){

		p_gpio_c_odr_r->ODR_0 ^= 0x01;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	f083 0301 	eor.w	r3, r3, #1
 80008ca:	b2d9      	uxtb	r1, r3
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	6813      	ldr	r3, [r2, #0]
 80008d0:	f361 0300 	bfi	r3, r1, #0, #1
 80008d4:	6013      	str	r3, [r2, #0]
		task_delay(1000);
 80008d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008da:	f000 f8af 	bl	8000a3c <task_delay>
		p_gpio_c_odr_r->ODR_0 ^= 0x01;
 80008de:	e7ed      	b.n	80008bc <task1_handler+0x38>
 80008e0:	40023830 	.word	0x40023830
 80008e4:	40020800 	.word	0x40020800
 80008e8:	40020814 	.word	0x40020814
 80008ec:	08001b18 	.word	0x08001b18

080008f0 <task2_handler>:

	}
}

void task2_handler(void){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0

	// Configure GPIO to control RED Led (PC1).

		// Enable Clock for GPIO C port
		RCC_AHB1ENR_t volatile * const rcc_enable_ahb1 = (RCC_AHB1ENR_t*) (RCC_REGISTER | RCC_AHB1ENR_OFFSET);
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <task2_handler+0x5c>)
 80008f8:	60fb      	str	r3, [r7, #12]
		rcc_enable_ahb1->GPIO_C_EN = 0x01;
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	6813      	ldr	r3, [r2, #0]
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	6013      	str	r3, [r2, #0]

		// Configure GPIO C1 as output.
		GPIOx_MODER_t volatile * const p_gpio_c_moder_register = 	(GPIOx_MODER_t*) (GPIO_C_REGISTER | GPIO_MODER_OFFSET);
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <task2_handler+0x60>)
 8000906:	60bb      	str	r3, [r7, #8]
		p_gpio_c_moder_register->MODER_1 = 0x01;
 8000908:	68ba      	ldr	r2, [r7, #8]
 800090a:	6813      	ldr	r3, [r2, #0]
 800090c:	2101      	movs	r1, #1
 800090e:	f361 0383 	bfi	r3, r1, #2, #2
 8000912:	6013      	str	r3, [r2, #0]
		GPIOx_ODR_t volatile * const p_gpio_c_odr_r = (GPIOx_ODR_t*) (GPIO_C_REGISTER | GPIO_ODR_OFFSET);
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <task2_handler+0x64>)
 8000916:	607b      	str	r3, [r7, #4]
		p_gpio_c_odr_r->ODR_1 = 0;
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	6813      	ldr	r3, [r2, #0]
 800091c:	f36f 0341 	bfc	r3, #1, #1
 8000920:	6013      	str	r3, [r2, #0]

		printf("Running TASK 2 \n");
 8000922:	480d      	ldr	r0, [pc, #52]	; (8000958 <task2_handler+0x68>)
 8000924:	f000 fa0e 	bl	8000d44 <puts>

		while(true){

			p_gpio_c_odr_r->ODR_1 ^= 0x01;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000930:	b2db      	uxtb	r3, r3
 8000932:	f083 0301 	eor.w	r3, r3, #1
 8000936:	b2d9      	uxtb	r1, r3
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	6813      	ldr	r3, [r2, #0]
 800093c:	f361 0341 	bfi	r3, r1, #1, #1
 8000940:	6013      	str	r3, [r2, #0]
			task_delay(500);
 8000942:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000946:	f000 f879 	bl	8000a3c <task_delay>
			p_gpio_c_odr_r->ODR_1 ^= 0x01;
 800094a:	e7ed      	b.n	8000928 <task2_handler+0x38>
 800094c:	40023830 	.word	0x40023830
 8000950:	40020800 	.word	0x40020800
 8000954:	40020814 	.word	0x40020814
 8000958:	08001b28 	.word	0x08001b28

0800095c <task3_handler>:
		}
}

void task3_handler(void){
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0

	// Configure GPIO to control GREEN Led (PB0).

		// Enable Clock for GPIO B port
		RCC_AHB1ENR_t volatile * const rcc_enable_ahb1 = (RCC_AHB1ENR_t*) (RCC_REGISTER | RCC_AHB1ENR_OFFSET);
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <task3_handler+0x5c>)
 8000964:	60fb      	str	r3, [r7, #12]
		rcc_enable_ahb1->GPIO_B_EN = 0x01;
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	6813      	ldr	r3, [r2, #0]
 800096a:	f043 0302 	orr.w	r3, r3, #2
 800096e:	6013      	str	r3, [r2, #0]

		// Configure GPIO B0 as output.
		GPIOx_MODER_t volatile * const p_gpio_b_moder_register = 	(GPIOx_MODER_t*) (GPIO_B_REGISTER | GPIO_MODER_OFFSET);
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <task3_handler+0x60>)
 8000972:	60bb      	str	r3, [r7, #8]
		p_gpio_b_moder_register->MODER_0 = 0x01;
 8000974:	68ba      	ldr	r2, [r7, #8]
 8000976:	6813      	ldr	r3, [r2, #0]
 8000978:	2101      	movs	r1, #1
 800097a:	f361 0301 	bfi	r3, r1, #0, #2
 800097e:	6013      	str	r3, [r2, #0]
		GPIOx_ODR_t volatile * const p_gpio_b_odr_r = (GPIOx_ODR_t*) (GPIO_B_REGISTER | GPIO_ODR_OFFSET);
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <task3_handler+0x64>)
 8000982:	607b      	str	r3, [r7, #4]
		p_gpio_b_odr_r->ODR_0 = 0;
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	6813      	ldr	r3, [r2, #0]
 8000988:	f36f 0300 	bfc	r3, #0, #1
 800098c:	6013      	str	r3, [r2, #0]

		printf("Running TASK 3 \n");
 800098e:	480d      	ldr	r0, [pc, #52]	; (80009c4 <task3_handler+0x68>)
 8000990:	f000 f9d8 	bl	8000d44 <puts>

		while(true){

			p_gpio_b_odr_r->ODR_0 ^= 0x01;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800099c:	b2db      	uxtb	r3, r3
 800099e:	f083 0301 	eor.w	r3, r3, #1
 80009a2:	b2d9      	uxtb	r1, r3
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	6813      	ldr	r3, [r2, #0]
 80009a8:	f361 0300 	bfi	r3, r1, #0, #1
 80009ac:	6013      	str	r3, [r2, #0]
			task_delay(250);
 80009ae:	20fa      	movs	r0, #250	; 0xfa
 80009b0:	f000 f844 	bl	8000a3c <task_delay>
			p_gpio_b_odr_r->ODR_0 ^= 0x01;
 80009b4:	e7ee      	b.n	8000994 <task3_handler+0x38>
 80009b6:	bf00      	nop
 80009b8:	40023830 	.word	0x40023830
 80009bc:	40020400 	.word	0x40020400
 80009c0:	40020414 	.word	0x40020414
 80009c4:	08001b38 	.word	0x08001b38

080009c8 <task4_handler>:

		}
}

void task4_handler(void){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0

	// Configure GPIO to control ORANGE Led (PA4).

		// Enable Clock for GPIO A port
		RCC_AHB1ENR_t volatile * const rcc_enable_ahb1 = (RCC_AHB1ENR_t*) (RCC_REGISTER | RCC_AHB1ENR_OFFSET);
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <task4_handler+0x5c>)
 80009d0:	60fb      	str	r3, [r7, #12]
		rcc_enable_ahb1->GPIO_A_EN = 0x01;
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	6813      	ldr	r3, [r2, #0]
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6013      	str	r3, [r2, #0]

		// Configure GPIO A4 as output.
		GPIOx_MODER_t volatile * const p_gpio_a_moder_register = 	(GPIOx_MODER_t*) (GPIO_A_REGISTER | GPIO_MODER_OFFSET);
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <task4_handler+0x60>)
 80009de:	60bb      	str	r3, [r7, #8]
		p_gpio_a_moder_register->MODER_4 = 0x01;
 80009e0:	68ba      	ldr	r2, [r7, #8]
 80009e2:	6813      	ldr	r3, [r2, #0]
 80009e4:	2101      	movs	r1, #1
 80009e6:	f361 2309 	bfi	r3, r1, #8, #2
 80009ea:	6013      	str	r3, [r2, #0]
		GPIOx_ODR_t volatile * const p_gpio_a_odr_r = (GPIOx_ODR_t*) (GPIO_A_REGISTER | GPIO_ODR_OFFSET);
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <task4_handler+0x64>)
 80009ee:	607b      	str	r3, [r7, #4]
		p_gpio_a_odr_r->ODR_4 = 0;
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	6813      	ldr	r3, [r2, #0]
 80009f4:	f36f 1304 	bfc	r3, #4, #1
 80009f8:	6013      	str	r3, [r2, #0]

		printf("Running TASK 4 \n");
 80009fa:	480d      	ldr	r0, [pc, #52]	; (8000a30 <task4_handler+0x68>)
 80009fc:	f000 f9a2 	bl	8000d44 <puts>

		while(true){

			p_gpio_a_odr_r->ODR_4 ^= 0x01;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f083 0301 	eor.w	r3, r3, #1
 8000a0e:	b2d9      	uxtb	r1, r3
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	6813      	ldr	r3, [r2, #0]
 8000a14:	f361 1304 	bfi	r3, r1, #4, #1
 8000a18:	6013      	str	r3, [r2, #0]
			task_delay(125);
 8000a1a:	207d      	movs	r0, #125	; 0x7d
 8000a1c:	f000 f80e 	bl	8000a3c <task_delay>
			p_gpio_a_odr_r->ODR_4 ^= 0x01;
 8000a20:	e7ee      	b.n	8000a00 <task4_handler+0x38>
 8000a22:	bf00      	nop
 8000a24:	40023830 	.word	0x40023830
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40020014 	.word	0x40020014
 8000a30:	08001b48 	.word	0x08001b48

08000a34 <idle_task>:

		}
}

void idle_task(void){
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

	while(true);
 8000a38:	e7fe      	b.n	8000a38 <idle_task+0x4>
	...

08000a3c <task_delay>:
}

void task_delay(uint32_t tick_count){
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]

	extern TCB_t user_tasks[MAX_TASKS];
	extern uint32_t g_tick_count;
	extern uint8_t current_task;

	if( current_task > 0){
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <task_delay+0x54>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d01b      	beq.n	8000a84 <task_delay+0x48>

		user_tasks[current_task].block_count = g_tick_count + tick_count;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <task_delay+0x58>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <task_delay+0x54>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4618      	mov	r0, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	441a      	add	r2, r3
 8000a5a:	490f      	ldr	r1, [pc, #60]	; (8000a98 <task_delay+0x5c>)
 8000a5c:	0103      	lsls	r3, r0, #4
 8000a5e:	440b      	add	r3, r1
 8000a60:	3304      	adds	r3, #4
 8000a62:	601a      	str	r2, [r3, #0]
		user_tasks[current_task].current_state = TASK_BLOCKED_STATE;
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <task_delay+0x54>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <task_delay+0x5c>)
 8000a6a:	011b      	lsls	r3, r3, #4
 8000a6c:	4413      	add	r3, r2
 8000a6e:	3308      	adds	r3, #8
 8000a70:	22ff      	movs	r2, #255	; 0xff
 8000a72:	701a      	strb	r2, [r3, #0]

		// Set PendSV Handler
		uint32_t* pICSR = (uint32_t*) 0xE000ED04;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <task_delay+0x60>)
 8000a76:	60fb      	str	r3, [r7, #12]
		*pICSR |= (0x01 << 28);\
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	601a      	str	r2, [r3, #0]

	}

}
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000000 	.word	0x20000000
 8000a94:	200000cc 	.word	0x200000cc
 8000a98:	2000007c 	.word	0x2000007c
 8000a9c:	e000ed04 	.word	0xe000ed04

08000aa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aa2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aa4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <LoopForever+0x6>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <LoopForever+0xe>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	; (8000aec <LoopForever+0x16>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ace:	f000 fa6d 	bl	8000fac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ad2:	f7ff fbed 	bl	80002b0 <main>

08000ad6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ad6:	e7fe      	b.n	8000ad6 <LoopForever>
  ldr   r0, =_estack
 8000ad8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ae4:	08001b94 	.word	0x08001b94
  ldr r2, =_sbss
 8000ae8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000aec:	20000220 	.word	0x20000220

08000af0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC_IRQHandler>
	...

08000af4 <std>:
 8000af4:	2300      	movs	r3, #0
 8000af6:	b510      	push	{r4, lr}
 8000af8:	4604      	mov	r4, r0
 8000afa:	e9c0 3300 	strd	r3, r3, [r0]
 8000afe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b02:	6083      	str	r3, [r0, #8]
 8000b04:	8181      	strh	r1, [r0, #12]
 8000b06:	6643      	str	r3, [r0, #100]	; 0x64
 8000b08:	81c2      	strh	r2, [r0, #14]
 8000b0a:	6183      	str	r3, [r0, #24]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	2208      	movs	r2, #8
 8000b10:	305c      	adds	r0, #92	; 0x5c
 8000b12:	f000 f9f7 	bl	8000f04 <memset>
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <std+0x58>)
 8000b18:	6263      	str	r3, [r4, #36]	; 0x24
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <std+0x5c>)
 8000b1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <std+0x60>)
 8000b20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <std+0x64>)
 8000b24:	6323      	str	r3, [r4, #48]	; 0x30
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <std+0x68>)
 8000b28:	6224      	str	r4, [r4, #32]
 8000b2a:	429c      	cmp	r4, r3
 8000b2c:	d006      	beq.n	8000b3c <std+0x48>
 8000b2e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000b32:	4294      	cmp	r4, r2
 8000b34:	d002      	beq.n	8000b3c <std+0x48>
 8000b36:	33d0      	adds	r3, #208	; 0xd0
 8000b38:	429c      	cmp	r4, r3
 8000b3a:	d105      	bne.n	8000b48 <std+0x54>
 8000b3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b44:	f000 ba56 	b.w	8000ff4 <__retarget_lock_init_recursive>
 8000b48:	bd10      	pop	{r4, pc}
 8000b4a:	bf00      	nop
 8000b4c:	08000d55 	.word	0x08000d55
 8000b50:	08000d77 	.word	0x08000d77
 8000b54:	08000daf 	.word	0x08000daf
 8000b58:	08000dd3 	.word	0x08000dd3
 8000b5c:	200000d4 	.word	0x200000d4

08000b60 <stdio_exit_handler>:
 8000b60:	4a02      	ldr	r2, [pc, #8]	; (8000b6c <stdio_exit_handler+0xc>)
 8000b62:	4903      	ldr	r1, [pc, #12]	; (8000b70 <stdio_exit_handler+0x10>)
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <stdio_exit_handler+0x14>)
 8000b66:	f000 b869 	b.w	8000c3c <_fwalk_sglue>
 8000b6a:	bf00      	nop
 8000b6c:	20000004 	.word	0x20000004
 8000b70:	08001891 	.word	0x08001891
 8000b74:	20000010 	.word	0x20000010

08000b78 <cleanup_stdio>:
 8000b78:	6841      	ldr	r1, [r0, #4]
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <cleanup_stdio+0x34>)
 8000b7c:	4299      	cmp	r1, r3
 8000b7e:	b510      	push	{r4, lr}
 8000b80:	4604      	mov	r4, r0
 8000b82:	d001      	beq.n	8000b88 <cleanup_stdio+0x10>
 8000b84:	f000 fe84 	bl	8001890 <_fflush_r>
 8000b88:	68a1      	ldr	r1, [r4, #8]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <cleanup_stdio+0x38>)
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d002      	beq.n	8000b96 <cleanup_stdio+0x1e>
 8000b90:	4620      	mov	r0, r4
 8000b92:	f000 fe7d 	bl	8001890 <_fflush_r>
 8000b96:	68e1      	ldr	r1, [r4, #12]
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <cleanup_stdio+0x3c>)
 8000b9a:	4299      	cmp	r1, r3
 8000b9c:	d004      	beq.n	8000ba8 <cleanup_stdio+0x30>
 8000b9e:	4620      	mov	r0, r4
 8000ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ba4:	f000 be74 	b.w	8001890 <_fflush_r>
 8000ba8:	bd10      	pop	{r4, pc}
 8000baa:	bf00      	nop
 8000bac:	200000d4 	.word	0x200000d4
 8000bb0:	2000013c 	.word	0x2000013c
 8000bb4:	200001a4 	.word	0x200001a4

08000bb8 <global_stdio_init.part.0>:
 8000bb8:	b510      	push	{r4, lr}
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <global_stdio_init.part.0+0x30>)
 8000bbc:	4c0b      	ldr	r4, [pc, #44]	; (8000bec <global_stdio_init.part.0+0x34>)
 8000bbe:	4a0c      	ldr	r2, [pc, #48]	; (8000bf0 <global_stdio_init.part.0+0x38>)
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	f7ff ff94 	bl	8000af4 <std>
 8000bcc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2109      	movs	r1, #9
 8000bd4:	f7ff ff8e 	bl	8000af4 <std>
 8000bd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000bdc:	2202      	movs	r2, #2
 8000bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000be2:	2112      	movs	r1, #18
 8000be4:	f7ff bf86 	b.w	8000af4 <std>
 8000be8:	2000020c 	.word	0x2000020c
 8000bec:	200000d4 	.word	0x200000d4
 8000bf0:	08000b61 	.word	0x08000b61

08000bf4 <__sfp_lock_acquire>:
 8000bf4:	4801      	ldr	r0, [pc, #4]	; (8000bfc <__sfp_lock_acquire+0x8>)
 8000bf6:	f000 b9fe 	b.w	8000ff6 <__retarget_lock_acquire_recursive>
 8000bfa:	bf00      	nop
 8000bfc:	20000215 	.word	0x20000215

08000c00 <__sfp_lock_release>:
 8000c00:	4801      	ldr	r0, [pc, #4]	; (8000c08 <__sfp_lock_release+0x8>)
 8000c02:	f000 b9f9 	b.w	8000ff8 <__retarget_lock_release_recursive>
 8000c06:	bf00      	nop
 8000c08:	20000215 	.word	0x20000215

08000c0c <__sinit>:
 8000c0c:	b510      	push	{r4, lr}
 8000c0e:	4604      	mov	r4, r0
 8000c10:	f7ff fff0 	bl	8000bf4 <__sfp_lock_acquire>
 8000c14:	6a23      	ldr	r3, [r4, #32]
 8000c16:	b11b      	cbz	r3, 8000c20 <__sinit+0x14>
 8000c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c1c:	f7ff bff0 	b.w	8000c00 <__sfp_lock_release>
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <__sinit+0x28>)
 8000c22:	6223      	str	r3, [r4, #32]
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <__sinit+0x2c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1f5      	bne.n	8000c18 <__sinit+0xc>
 8000c2c:	f7ff ffc4 	bl	8000bb8 <global_stdio_init.part.0>
 8000c30:	e7f2      	b.n	8000c18 <__sinit+0xc>
 8000c32:	bf00      	nop
 8000c34:	08000b79 	.word	0x08000b79
 8000c38:	2000020c 	.word	0x2000020c

08000c3c <_fwalk_sglue>:
 8000c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c40:	4607      	mov	r7, r0
 8000c42:	4688      	mov	r8, r1
 8000c44:	4614      	mov	r4, r2
 8000c46:	2600      	movs	r6, #0
 8000c48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c4c:	f1b9 0901 	subs.w	r9, r9, #1
 8000c50:	d505      	bpl.n	8000c5e <_fwalk_sglue+0x22>
 8000c52:	6824      	ldr	r4, [r4, #0]
 8000c54:	2c00      	cmp	r4, #0
 8000c56:	d1f7      	bne.n	8000c48 <_fwalk_sglue+0xc>
 8000c58:	4630      	mov	r0, r6
 8000c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c5e:	89ab      	ldrh	r3, [r5, #12]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d907      	bls.n	8000c74 <_fwalk_sglue+0x38>
 8000c64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	d003      	beq.n	8000c74 <_fwalk_sglue+0x38>
 8000c6c:	4629      	mov	r1, r5
 8000c6e:	4638      	mov	r0, r7
 8000c70:	47c0      	blx	r8
 8000c72:	4306      	orrs	r6, r0
 8000c74:	3568      	adds	r5, #104	; 0x68
 8000c76:	e7e9      	b.n	8000c4c <_fwalk_sglue+0x10>

08000c78 <iprintf>:
 8000c78:	b40f      	push	{r0, r1, r2, r3}
 8000c7a:	b507      	push	{r0, r1, r2, lr}
 8000c7c:	4906      	ldr	r1, [pc, #24]	; (8000c98 <iprintf+0x20>)
 8000c7e:	ab04      	add	r3, sp, #16
 8000c80:	6808      	ldr	r0, [r1, #0]
 8000c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8000c86:	6881      	ldr	r1, [r0, #8]
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	f000 fad5 	bl	8001238 <_vfiprintf_r>
 8000c8e:	b003      	add	sp, #12
 8000c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr
 8000c98:	2000005c 	.word	0x2000005c

08000c9c <_puts_r>:
 8000c9c:	6a03      	ldr	r3, [r0, #32]
 8000c9e:	b570      	push	{r4, r5, r6, lr}
 8000ca0:	6884      	ldr	r4, [r0, #8]
 8000ca2:	4605      	mov	r5, r0
 8000ca4:	460e      	mov	r6, r1
 8000ca6:	b90b      	cbnz	r3, 8000cac <_puts_r+0x10>
 8000ca8:	f7ff ffb0 	bl	8000c0c <__sinit>
 8000cac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000cae:	07db      	lsls	r3, r3, #31
 8000cb0:	d405      	bmi.n	8000cbe <_puts_r+0x22>
 8000cb2:	89a3      	ldrh	r3, [r4, #12]
 8000cb4:	0598      	lsls	r0, r3, #22
 8000cb6:	d402      	bmi.n	8000cbe <_puts_r+0x22>
 8000cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000cba:	f000 f99c 	bl	8000ff6 <__retarget_lock_acquire_recursive>
 8000cbe:	89a3      	ldrh	r3, [r4, #12]
 8000cc0:	0719      	lsls	r1, r3, #28
 8000cc2:	d513      	bpl.n	8000cec <_puts_r+0x50>
 8000cc4:	6923      	ldr	r3, [r4, #16]
 8000cc6:	b18b      	cbz	r3, 8000cec <_puts_r+0x50>
 8000cc8:	3e01      	subs	r6, #1
 8000cca:	68a3      	ldr	r3, [r4, #8]
 8000ccc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	60a3      	str	r3, [r4, #8]
 8000cd4:	b9e9      	cbnz	r1, 8000d12 <_puts_r+0x76>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	da2e      	bge.n	8000d38 <_puts_r+0x9c>
 8000cda:	4622      	mov	r2, r4
 8000cdc:	210a      	movs	r1, #10
 8000cde:	4628      	mov	r0, r5
 8000ce0:	f000 f87b 	bl	8000dda <__swbuf_r>
 8000ce4:	3001      	adds	r0, #1
 8000ce6:	d007      	beq.n	8000cf8 <_puts_r+0x5c>
 8000ce8:	250a      	movs	r5, #10
 8000cea:	e007      	b.n	8000cfc <_puts_r+0x60>
 8000cec:	4621      	mov	r1, r4
 8000cee:	4628      	mov	r0, r5
 8000cf0:	f000 f8b0 	bl	8000e54 <__swsetup_r>
 8000cf4:	2800      	cmp	r0, #0
 8000cf6:	d0e7      	beq.n	8000cc8 <_puts_r+0x2c>
 8000cf8:	f04f 35ff 	mov.w	r5, #4294967295
 8000cfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000cfe:	07da      	lsls	r2, r3, #31
 8000d00:	d405      	bmi.n	8000d0e <_puts_r+0x72>
 8000d02:	89a3      	ldrh	r3, [r4, #12]
 8000d04:	059b      	lsls	r3, r3, #22
 8000d06:	d402      	bmi.n	8000d0e <_puts_r+0x72>
 8000d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d0a:	f000 f975 	bl	8000ff8 <__retarget_lock_release_recursive>
 8000d0e:	4628      	mov	r0, r5
 8000d10:	bd70      	pop	{r4, r5, r6, pc}
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	da04      	bge.n	8000d20 <_puts_r+0x84>
 8000d16:	69a2      	ldr	r2, [r4, #24]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	dc06      	bgt.n	8000d2a <_puts_r+0x8e>
 8000d1c:	290a      	cmp	r1, #10
 8000d1e:	d004      	beq.n	8000d2a <_puts_r+0x8e>
 8000d20:	6823      	ldr	r3, [r4, #0]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	6022      	str	r2, [r4, #0]
 8000d26:	7019      	strb	r1, [r3, #0]
 8000d28:	e7cf      	b.n	8000cca <_puts_r+0x2e>
 8000d2a:	4622      	mov	r2, r4
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	f000 f854 	bl	8000dda <__swbuf_r>
 8000d32:	3001      	adds	r0, #1
 8000d34:	d1c9      	bne.n	8000cca <_puts_r+0x2e>
 8000d36:	e7df      	b.n	8000cf8 <_puts_r+0x5c>
 8000d38:	6823      	ldr	r3, [r4, #0]
 8000d3a:	250a      	movs	r5, #10
 8000d3c:	1c5a      	adds	r2, r3, #1
 8000d3e:	6022      	str	r2, [r4, #0]
 8000d40:	701d      	strb	r5, [r3, #0]
 8000d42:	e7db      	b.n	8000cfc <_puts_r+0x60>

08000d44 <puts>:
 8000d44:	4b02      	ldr	r3, [pc, #8]	; (8000d50 <puts+0xc>)
 8000d46:	4601      	mov	r1, r0
 8000d48:	6818      	ldr	r0, [r3, #0]
 8000d4a:	f7ff bfa7 	b.w	8000c9c <_puts_r>
 8000d4e:	bf00      	nop
 8000d50:	2000005c 	.word	0x2000005c

08000d54 <__sread>:
 8000d54:	b510      	push	{r4, lr}
 8000d56:	460c      	mov	r4, r1
 8000d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d5c:	f000 f8fc 	bl	8000f58 <_read_r>
 8000d60:	2800      	cmp	r0, #0
 8000d62:	bfab      	itete	ge
 8000d64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000d66:	89a3      	ldrhlt	r3, [r4, #12]
 8000d68:	181b      	addge	r3, r3, r0
 8000d6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000d6e:	bfac      	ite	ge
 8000d70:	6563      	strge	r3, [r4, #84]	; 0x54
 8000d72:	81a3      	strhlt	r3, [r4, #12]
 8000d74:	bd10      	pop	{r4, pc}

08000d76 <__swrite>:
 8000d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d7a:	461f      	mov	r7, r3
 8000d7c:	898b      	ldrh	r3, [r1, #12]
 8000d7e:	05db      	lsls	r3, r3, #23
 8000d80:	4605      	mov	r5, r0
 8000d82:	460c      	mov	r4, r1
 8000d84:	4616      	mov	r6, r2
 8000d86:	d505      	bpl.n	8000d94 <__swrite+0x1e>
 8000d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f000 f8d0 	bl	8000f34 <_lseek_r>
 8000d94:	89a3      	ldrh	r3, [r4, #12]
 8000d96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d9e:	81a3      	strh	r3, [r4, #12]
 8000da0:	4632      	mov	r2, r6
 8000da2:	463b      	mov	r3, r7
 8000da4:	4628      	mov	r0, r5
 8000da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000daa:	f000 b8e7 	b.w	8000f7c <_write_r>

08000dae <__sseek>:
 8000dae:	b510      	push	{r4, lr}
 8000db0:	460c      	mov	r4, r1
 8000db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000db6:	f000 f8bd 	bl	8000f34 <_lseek_r>
 8000dba:	1c43      	adds	r3, r0, #1
 8000dbc:	89a3      	ldrh	r3, [r4, #12]
 8000dbe:	bf15      	itete	ne
 8000dc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8000dc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000dc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000dca:	81a3      	strheq	r3, [r4, #12]
 8000dcc:	bf18      	it	ne
 8000dce:	81a3      	strhne	r3, [r4, #12]
 8000dd0:	bd10      	pop	{r4, pc}

08000dd2 <__sclose>:
 8000dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dd6:	f000 b89d 	b.w	8000f14 <_close_r>

08000dda <__swbuf_r>:
 8000dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ddc:	460e      	mov	r6, r1
 8000dde:	4614      	mov	r4, r2
 8000de0:	4605      	mov	r5, r0
 8000de2:	b118      	cbz	r0, 8000dec <__swbuf_r+0x12>
 8000de4:	6a03      	ldr	r3, [r0, #32]
 8000de6:	b90b      	cbnz	r3, 8000dec <__swbuf_r+0x12>
 8000de8:	f7ff ff10 	bl	8000c0c <__sinit>
 8000dec:	69a3      	ldr	r3, [r4, #24]
 8000dee:	60a3      	str	r3, [r4, #8]
 8000df0:	89a3      	ldrh	r3, [r4, #12]
 8000df2:	071a      	lsls	r2, r3, #28
 8000df4:	d525      	bpl.n	8000e42 <__swbuf_r+0x68>
 8000df6:	6923      	ldr	r3, [r4, #16]
 8000df8:	b31b      	cbz	r3, 8000e42 <__swbuf_r+0x68>
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	6922      	ldr	r2, [r4, #16]
 8000dfe:	1a98      	subs	r0, r3, r2
 8000e00:	6963      	ldr	r3, [r4, #20]
 8000e02:	b2f6      	uxtb	r6, r6
 8000e04:	4283      	cmp	r3, r0
 8000e06:	4637      	mov	r7, r6
 8000e08:	dc04      	bgt.n	8000e14 <__swbuf_r+0x3a>
 8000e0a:	4621      	mov	r1, r4
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	f000 fd3f 	bl	8001890 <_fflush_r>
 8000e12:	b9e0      	cbnz	r0, 8000e4e <__swbuf_r+0x74>
 8000e14:	68a3      	ldr	r3, [r4, #8]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	60a3      	str	r3, [r4, #8]
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	1c5a      	adds	r2, r3, #1
 8000e1e:	6022      	str	r2, [r4, #0]
 8000e20:	701e      	strb	r6, [r3, #0]
 8000e22:	6962      	ldr	r2, [r4, #20]
 8000e24:	1c43      	adds	r3, r0, #1
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d004      	beq.n	8000e34 <__swbuf_r+0x5a>
 8000e2a:	89a3      	ldrh	r3, [r4, #12]
 8000e2c:	07db      	lsls	r3, r3, #31
 8000e2e:	d506      	bpl.n	8000e3e <__swbuf_r+0x64>
 8000e30:	2e0a      	cmp	r6, #10
 8000e32:	d104      	bne.n	8000e3e <__swbuf_r+0x64>
 8000e34:	4621      	mov	r1, r4
 8000e36:	4628      	mov	r0, r5
 8000e38:	f000 fd2a 	bl	8001890 <_fflush_r>
 8000e3c:	b938      	cbnz	r0, 8000e4e <__swbuf_r+0x74>
 8000e3e:	4638      	mov	r0, r7
 8000e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e42:	4621      	mov	r1, r4
 8000e44:	4628      	mov	r0, r5
 8000e46:	f000 f805 	bl	8000e54 <__swsetup_r>
 8000e4a:	2800      	cmp	r0, #0
 8000e4c:	d0d5      	beq.n	8000dfa <__swbuf_r+0x20>
 8000e4e:	f04f 37ff 	mov.w	r7, #4294967295
 8000e52:	e7f4      	b.n	8000e3e <__swbuf_r+0x64>

08000e54 <__swsetup_r>:
 8000e54:	b538      	push	{r3, r4, r5, lr}
 8000e56:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <__swsetup_r+0xac>)
 8000e58:	4605      	mov	r5, r0
 8000e5a:	6818      	ldr	r0, [r3, #0]
 8000e5c:	460c      	mov	r4, r1
 8000e5e:	b118      	cbz	r0, 8000e68 <__swsetup_r+0x14>
 8000e60:	6a03      	ldr	r3, [r0, #32]
 8000e62:	b90b      	cbnz	r3, 8000e68 <__swsetup_r+0x14>
 8000e64:	f7ff fed2 	bl	8000c0c <__sinit>
 8000e68:	89a3      	ldrh	r3, [r4, #12]
 8000e6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000e6e:	0718      	lsls	r0, r3, #28
 8000e70:	d422      	bmi.n	8000eb8 <__swsetup_r+0x64>
 8000e72:	06d9      	lsls	r1, r3, #27
 8000e74:	d407      	bmi.n	8000e86 <__swsetup_r+0x32>
 8000e76:	2309      	movs	r3, #9
 8000e78:	602b      	str	r3, [r5, #0]
 8000e7a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000e7e:	81a3      	strh	r3, [r4, #12]
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	e034      	b.n	8000ef0 <__swsetup_r+0x9c>
 8000e86:	0758      	lsls	r0, r3, #29
 8000e88:	d512      	bpl.n	8000eb0 <__swsetup_r+0x5c>
 8000e8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e8c:	b141      	cbz	r1, 8000ea0 <__swsetup_r+0x4c>
 8000e8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e92:	4299      	cmp	r1, r3
 8000e94:	d002      	beq.n	8000e9c <__swsetup_r+0x48>
 8000e96:	4628      	mov	r0, r5
 8000e98:	f000 f8b0 	bl	8000ffc <_free_r>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	6363      	str	r3, [r4, #52]	; 0x34
 8000ea0:	89a3      	ldrh	r3, [r4, #12]
 8000ea2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000ea6:	81a3      	strh	r3, [r4, #12]
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	6063      	str	r3, [r4, #4]
 8000eac:	6923      	ldr	r3, [r4, #16]
 8000eae:	6023      	str	r3, [r4, #0]
 8000eb0:	89a3      	ldrh	r3, [r4, #12]
 8000eb2:	f043 0308 	orr.w	r3, r3, #8
 8000eb6:	81a3      	strh	r3, [r4, #12]
 8000eb8:	6923      	ldr	r3, [r4, #16]
 8000eba:	b94b      	cbnz	r3, 8000ed0 <__swsetup_r+0x7c>
 8000ebc:	89a3      	ldrh	r3, [r4, #12]
 8000ebe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ec6:	d003      	beq.n	8000ed0 <__swsetup_r+0x7c>
 8000ec8:	4621      	mov	r1, r4
 8000eca:	4628      	mov	r0, r5
 8000ecc:	f000 fd2e 	bl	800192c <__smakebuf_r>
 8000ed0:	89a0      	ldrh	r0, [r4, #12]
 8000ed2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000ed6:	f010 0301 	ands.w	r3, r0, #1
 8000eda:	d00a      	beq.n	8000ef2 <__swsetup_r+0x9e>
 8000edc:	2300      	movs	r3, #0
 8000ede:	60a3      	str	r3, [r4, #8]
 8000ee0:	6963      	ldr	r3, [r4, #20]
 8000ee2:	425b      	negs	r3, r3
 8000ee4:	61a3      	str	r3, [r4, #24]
 8000ee6:	6923      	ldr	r3, [r4, #16]
 8000ee8:	b943      	cbnz	r3, 8000efc <__swsetup_r+0xa8>
 8000eea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000eee:	d1c4      	bne.n	8000e7a <__swsetup_r+0x26>
 8000ef0:	bd38      	pop	{r3, r4, r5, pc}
 8000ef2:	0781      	lsls	r1, r0, #30
 8000ef4:	bf58      	it	pl
 8000ef6:	6963      	ldrpl	r3, [r4, #20]
 8000ef8:	60a3      	str	r3, [r4, #8]
 8000efa:	e7f4      	b.n	8000ee6 <__swsetup_r+0x92>
 8000efc:	2000      	movs	r0, #0
 8000efe:	e7f7      	b.n	8000ef0 <__swsetup_r+0x9c>
 8000f00:	2000005c 	.word	0x2000005c

08000f04 <memset>:
 8000f04:	4402      	add	r2, r0
 8000f06:	4603      	mov	r3, r0
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d100      	bne.n	8000f0e <memset+0xa>
 8000f0c:	4770      	bx	lr
 8000f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8000f12:	e7f9      	b.n	8000f08 <memset+0x4>

08000f14 <_close_r>:
 8000f14:	b538      	push	{r3, r4, r5, lr}
 8000f16:	4d06      	ldr	r5, [pc, #24]	; (8000f30 <_close_r+0x1c>)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	4604      	mov	r4, r0
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	602b      	str	r3, [r5, #0]
 8000f20:	f7ff fc49 	bl	80007b6 <_close>
 8000f24:	1c43      	adds	r3, r0, #1
 8000f26:	d102      	bne.n	8000f2e <_close_r+0x1a>
 8000f28:	682b      	ldr	r3, [r5, #0]
 8000f2a:	b103      	cbz	r3, 8000f2e <_close_r+0x1a>
 8000f2c:	6023      	str	r3, [r4, #0]
 8000f2e:	bd38      	pop	{r3, r4, r5, pc}
 8000f30:	20000210 	.word	0x20000210

08000f34 <_lseek_r>:
 8000f34:	b538      	push	{r3, r4, r5, lr}
 8000f36:	4d07      	ldr	r5, [pc, #28]	; (8000f54 <_lseek_r+0x20>)
 8000f38:	4604      	mov	r4, r0
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	2200      	movs	r2, #0
 8000f40:	602a      	str	r2, [r5, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	f7ff fc5b 	bl	80007fe <_lseek>
 8000f48:	1c43      	adds	r3, r0, #1
 8000f4a:	d102      	bne.n	8000f52 <_lseek_r+0x1e>
 8000f4c:	682b      	ldr	r3, [r5, #0]
 8000f4e:	b103      	cbz	r3, 8000f52 <_lseek_r+0x1e>
 8000f50:	6023      	str	r3, [r4, #0]
 8000f52:	bd38      	pop	{r3, r4, r5, pc}
 8000f54:	20000210 	.word	0x20000210

08000f58 <_read_r>:
 8000f58:	b538      	push	{r3, r4, r5, lr}
 8000f5a:	4d07      	ldr	r5, [pc, #28]	; (8000f78 <_read_r+0x20>)
 8000f5c:	4604      	mov	r4, r0
 8000f5e:	4608      	mov	r0, r1
 8000f60:	4611      	mov	r1, r2
 8000f62:	2200      	movs	r2, #0
 8000f64:	602a      	str	r2, [r5, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	f7ff fbec 	bl	8000744 <_read>
 8000f6c:	1c43      	adds	r3, r0, #1
 8000f6e:	d102      	bne.n	8000f76 <_read_r+0x1e>
 8000f70:	682b      	ldr	r3, [r5, #0]
 8000f72:	b103      	cbz	r3, 8000f76 <_read_r+0x1e>
 8000f74:	6023      	str	r3, [r4, #0]
 8000f76:	bd38      	pop	{r3, r4, r5, pc}
 8000f78:	20000210 	.word	0x20000210

08000f7c <_write_r>:
 8000f7c:	b538      	push	{r3, r4, r5, lr}
 8000f7e:	4d07      	ldr	r5, [pc, #28]	; (8000f9c <_write_r+0x20>)
 8000f80:	4604      	mov	r4, r0
 8000f82:	4608      	mov	r0, r1
 8000f84:	4611      	mov	r1, r2
 8000f86:	2200      	movs	r2, #0
 8000f88:	602a      	str	r2, [r5, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	f7ff fbf7 	bl	800077e <_write>
 8000f90:	1c43      	adds	r3, r0, #1
 8000f92:	d102      	bne.n	8000f9a <_write_r+0x1e>
 8000f94:	682b      	ldr	r3, [r5, #0]
 8000f96:	b103      	cbz	r3, 8000f9a <_write_r+0x1e>
 8000f98:	6023      	str	r3, [r4, #0]
 8000f9a:	bd38      	pop	{r3, r4, r5, pc}
 8000f9c:	20000210 	.word	0x20000210

08000fa0 <__errno>:
 8000fa0:	4b01      	ldr	r3, [pc, #4]	; (8000fa8 <__errno+0x8>)
 8000fa2:	6818      	ldr	r0, [r3, #0]
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	2000005c 	.word	0x2000005c

08000fac <__libc_init_array>:
 8000fac:	b570      	push	{r4, r5, r6, lr}
 8000fae:	4d0d      	ldr	r5, [pc, #52]	; (8000fe4 <__libc_init_array+0x38>)
 8000fb0:	4c0d      	ldr	r4, [pc, #52]	; (8000fe8 <__libc_init_array+0x3c>)
 8000fb2:	1b64      	subs	r4, r4, r5
 8000fb4:	10a4      	asrs	r4, r4, #2
 8000fb6:	2600      	movs	r6, #0
 8000fb8:	42a6      	cmp	r6, r4
 8000fba:	d109      	bne.n	8000fd0 <__libc_init_array+0x24>
 8000fbc:	4d0b      	ldr	r5, [pc, #44]	; (8000fec <__libc_init_array+0x40>)
 8000fbe:	4c0c      	ldr	r4, [pc, #48]	; (8000ff0 <__libc_init_array+0x44>)
 8000fc0:	f000 fd22 	bl	8001a08 <_init>
 8000fc4:	1b64      	subs	r4, r4, r5
 8000fc6:	10a4      	asrs	r4, r4, #2
 8000fc8:	2600      	movs	r6, #0
 8000fca:	42a6      	cmp	r6, r4
 8000fcc:	d105      	bne.n	8000fda <__libc_init_array+0x2e>
 8000fce:	bd70      	pop	{r4, r5, r6, pc}
 8000fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fd4:	4798      	blx	r3
 8000fd6:	3601      	adds	r6, #1
 8000fd8:	e7ee      	b.n	8000fb8 <__libc_init_array+0xc>
 8000fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fde:	4798      	blx	r3
 8000fe0:	3601      	adds	r6, #1
 8000fe2:	e7f2      	b.n	8000fca <__libc_init_array+0x1e>
 8000fe4:	08001b8c 	.word	0x08001b8c
 8000fe8:	08001b8c 	.word	0x08001b8c
 8000fec:	08001b8c 	.word	0x08001b8c
 8000ff0:	08001b90 	.word	0x08001b90

08000ff4 <__retarget_lock_init_recursive>:
 8000ff4:	4770      	bx	lr

08000ff6 <__retarget_lock_acquire_recursive>:
 8000ff6:	4770      	bx	lr

08000ff8 <__retarget_lock_release_recursive>:
 8000ff8:	4770      	bx	lr
	...

08000ffc <_free_r>:
 8000ffc:	b538      	push	{r3, r4, r5, lr}
 8000ffe:	4605      	mov	r5, r0
 8001000:	2900      	cmp	r1, #0
 8001002:	d041      	beq.n	8001088 <_free_r+0x8c>
 8001004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001008:	1f0c      	subs	r4, r1, #4
 800100a:	2b00      	cmp	r3, #0
 800100c:	bfb8      	it	lt
 800100e:	18e4      	addlt	r4, r4, r3
 8001010:	f000 f8de 	bl	80011d0 <__malloc_lock>
 8001014:	4a1d      	ldr	r2, [pc, #116]	; (800108c <_free_r+0x90>)
 8001016:	6813      	ldr	r3, [r2, #0]
 8001018:	b933      	cbnz	r3, 8001028 <_free_r+0x2c>
 800101a:	6063      	str	r3, [r4, #4]
 800101c:	6014      	str	r4, [r2, #0]
 800101e:	4628      	mov	r0, r5
 8001020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001024:	f000 b8da 	b.w	80011dc <__malloc_unlock>
 8001028:	42a3      	cmp	r3, r4
 800102a:	d908      	bls.n	800103e <_free_r+0x42>
 800102c:	6820      	ldr	r0, [r4, #0]
 800102e:	1821      	adds	r1, r4, r0
 8001030:	428b      	cmp	r3, r1
 8001032:	bf01      	itttt	eq
 8001034:	6819      	ldreq	r1, [r3, #0]
 8001036:	685b      	ldreq	r3, [r3, #4]
 8001038:	1809      	addeq	r1, r1, r0
 800103a:	6021      	streq	r1, [r4, #0]
 800103c:	e7ed      	b.n	800101a <_free_r+0x1e>
 800103e:	461a      	mov	r2, r3
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	b10b      	cbz	r3, 8001048 <_free_r+0x4c>
 8001044:	42a3      	cmp	r3, r4
 8001046:	d9fa      	bls.n	800103e <_free_r+0x42>
 8001048:	6811      	ldr	r1, [r2, #0]
 800104a:	1850      	adds	r0, r2, r1
 800104c:	42a0      	cmp	r0, r4
 800104e:	d10b      	bne.n	8001068 <_free_r+0x6c>
 8001050:	6820      	ldr	r0, [r4, #0]
 8001052:	4401      	add	r1, r0
 8001054:	1850      	adds	r0, r2, r1
 8001056:	4283      	cmp	r3, r0
 8001058:	6011      	str	r1, [r2, #0]
 800105a:	d1e0      	bne.n	800101e <_free_r+0x22>
 800105c:	6818      	ldr	r0, [r3, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	6053      	str	r3, [r2, #4]
 8001062:	4408      	add	r0, r1
 8001064:	6010      	str	r0, [r2, #0]
 8001066:	e7da      	b.n	800101e <_free_r+0x22>
 8001068:	d902      	bls.n	8001070 <_free_r+0x74>
 800106a:	230c      	movs	r3, #12
 800106c:	602b      	str	r3, [r5, #0]
 800106e:	e7d6      	b.n	800101e <_free_r+0x22>
 8001070:	6820      	ldr	r0, [r4, #0]
 8001072:	1821      	adds	r1, r4, r0
 8001074:	428b      	cmp	r3, r1
 8001076:	bf04      	itt	eq
 8001078:	6819      	ldreq	r1, [r3, #0]
 800107a:	685b      	ldreq	r3, [r3, #4]
 800107c:	6063      	str	r3, [r4, #4]
 800107e:	bf04      	itt	eq
 8001080:	1809      	addeq	r1, r1, r0
 8001082:	6021      	streq	r1, [r4, #0]
 8001084:	6054      	str	r4, [r2, #4]
 8001086:	e7ca      	b.n	800101e <_free_r+0x22>
 8001088:	bd38      	pop	{r3, r4, r5, pc}
 800108a:	bf00      	nop
 800108c:	20000218 	.word	0x20000218

08001090 <sbrk_aligned>:
 8001090:	b570      	push	{r4, r5, r6, lr}
 8001092:	4e0e      	ldr	r6, [pc, #56]	; (80010cc <sbrk_aligned+0x3c>)
 8001094:	460c      	mov	r4, r1
 8001096:	6831      	ldr	r1, [r6, #0]
 8001098:	4605      	mov	r5, r0
 800109a:	b911      	cbnz	r1, 80010a2 <sbrk_aligned+0x12>
 800109c:	f000 fca4 	bl	80019e8 <_sbrk_r>
 80010a0:	6030      	str	r0, [r6, #0]
 80010a2:	4621      	mov	r1, r4
 80010a4:	4628      	mov	r0, r5
 80010a6:	f000 fc9f 	bl	80019e8 <_sbrk_r>
 80010aa:	1c43      	adds	r3, r0, #1
 80010ac:	d00a      	beq.n	80010c4 <sbrk_aligned+0x34>
 80010ae:	1cc4      	adds	r4, r0, #3
 80010b0:	f024 0403 	bic.w	r4, r4, #3
 80010b4:	42a0      	cmp	r0, r4
 80010b6:	d007      	beq.n	80010c8 <sbrk_aligned+0x38>
 80010b8:	1a21      	subs	r1, r4, r0
 80010ba:	4628      	mov	r0, r5
 80010bc:	f000 fc94 	bl	80019e8 <_sbrk_r>
 80010c0:	3001      	adds	r0, #1
 80010c2:	d101      	bne.n	80010c8 <sbrk_aligned+0x38>
 80010c4:	f04f 34ff 	mov.w	r4, #4294967295
 80010c8:	4620      	mov	r0, r4
 80010ca:	bd70      	pop	{r4, r5, r6, pc}
 80010cc:	2000021c 	.word	0x2000021c

080010d0 <_malloc_r>:
 80010d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010d4:	1ccd      	adds	r5, r1, #3
 80010d6:	f025 0503 	bic.w	r5, r5, #3
 80010da:	3508      	adds	r5, #8
 80010dc:	2d0c      	cmp	r5, #12
 80010de:	bf38      	it	cc
 80010e0:	250c      	movcc	r5, #12
 80010e2:	2d00      	cmp	r5, #0
 80010e4:	4607      	mov	r7, r0
 80010e6:	db01      	blt.n	80010ec <_malloc_r+0x1c>
 80010e8:	42a9      	cmp	r1, r5
 80010ea:	d905      	bls.n	80010f8 <_malloc_r+0x28>
 80010ec:	230c      	movs	r3, #12
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	2600      	movs	r6, #0
 80010f2:	4630      	mov	r0, r6
 80010f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80011cc <_malloc_r+0xfc>
 80010fc:	f000 f868 	bl	80011d0 <__malloc_lock>
 8001100:	f8d8 3000 	ldr.w	r3, [r8]
 8001104:	461c      	mov	r4, r3
 8001106:	bb5c      	cbnz	r4, 8001160 <_malloc_r+0x90>
 8001108:	4629      	mov	r1, r5
 800110a:	4638      	mov	r0, r7
 800110c:	f7ff ffc0 	bl	8001090 <sbrk_aligned>
 8001110:	1c43      	adds	r3, r0, #1
 8001112:	4604      	mov	r4, r0
 8001114:	d155      	bne.n	80011c2 <_malloc_r+0xf2>
 8001116:	f8d8 4000 	ldr.w	r4, [r8]
 800111a:	4626      	mov	r6, r4
 800111c:	2e00      	cmp	r6, #0
 800111e:	d145      	bne.n	80011ac <_malloc_r+0xdc>
 8001120:	2c00      	cmp	r4, #0
 8001122:	d048      	beq.n	80011b6 <_malloc_r+0xe6>
 8001124:	6823      	ldr	r3, [r4, #0]
 8001126:	4631      	mov	r1, r6
 8001128:	4638      	mov	r0, r7
 800112a:	eb04 0903 	add.w	r9, r4, r3
 800112e:	f000 fc5b 	bl	80019e8 <_sbrk_r>
 8001132:	4581      	cmp	r9, r0
 8001134:	d13f      	bne.n	80011b6 <_malloc_r+0xe6>
 8001136:	6821      	ldr	r1, [r4, #0]
 8001138:	1a6d      	subs	r5, r5, r1
 800113a:	4629      	mov	r1, r5
 800113c:	4638      	mov	r0, r7
 800113e:	f7ff ffa7 	bl	8001090 <sbrk_aligned>
 8001142:	3001      	adds	r0, #1
 8001144:	d037      	beq.n	80011b6 <_malloc_r+0xe6>
 8001146:	6823      	ldr	r3, [r4, #0]
 8001148:	442b      	add	r3, r5
 800114a:	6023      	str	r3, [r4, #0]
 800114c:	f8d8 3000 	ldr.w	r3, [r8]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d038      	beq.n	80011c6 <_malloc_r+0xf6>
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	42a2      	cmp	r2, r4
 8001158:	d12b      	bne.n	80011b2 <_malloc_r+0xe2>
 800115a:	2200      	movs	r2, #0
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	e00f      	b.n	8001180 <_malloc_r+0xb0>
 8001160:	6822      	ldr	r2, [r4, #0]
 8001162:	1b52      	subs	r2, r2, r5
 8001164:	d41f      	bmi.n	80011a6 <_malloc_r+0xd6>
 8001166:	2a0b      	cmp	r2, #11
 8001168:	d917      	bls.n	800119a <_malloc_r+0xca>
 800116a:	1961      	adds	r1, r4, r5
 800116c:	42a3      	cmp	r3, r4
 800116e:	6025      	str	r5, [r4, #0]
 8001170:	bf18      	it	ne
 8001172:	6059      	strne	r1, [r3, #4]
 8001174:	6863      	ldr	r3, [r4, #4]
 8001176:	bf08      	it	eq
 8001178:	f8c8 1000 	streq.w	r1, [r8]
 800117c:	5162      	str	r2, [r4, r5]
 800117e:	604b      	str	r3, [r1, #4]
 8001180:	4638      	mov	r0, r7
 8001182:	f104 060b 	add.w	r6, r4, #11
 8001186:	f000 f829 	bl	80011dc <__malloc_unlock>
 800118a:	f026 0607 	bic.w	r6, r6, #7
 800118e:	1d23      	adds	r3, r4, #4
 8001190:	1af2      	subs	r2, r6, r3
 8001192:	d0ae      	beq.n	80010f2 <_malloc_r+0x22>
 8001194:	1b9b      	subs	r3, r3, r6
 8001196:	50a3      	str	r3, [r4, r2]
 8001198:	e7ab      	b.n	80010f2 <_malloc_r+0x22>
 800119a:	42a3      	cmp	r3, r4
 800119c:	6862      	ldr	r2, [r4, #4]
 800119e:	d1dd      	bne.n	800115c <_malloc_r+0x8c>
 80011a0:	f8c8 2000 	str.w	r2, [r8]
 80011a4:	e7ec      	b.n	8001180 <_malloc_r+0xb0>
 80011a6:	4623      	mov	r3, r4
 80011a8:	6864      	ldr	r4, [r4, #4]
 80011aa:	e7ac      	b.n	8001106 <_malloc_r+0x36>
 80011ac:	4634      	mov	r4, r6
 80011ae:	6876      	ldr	r6, [r6, #4]
 80011b0:	e7b4      	b.n	800111c <_malloc_r+0x4c>
 80011b2:	4613      	mov	r3, r2
 80011b4:	e7cc      	b.n	8001150 <_malloc_r+0x80>
 80011b6:	230c      	movs	r3, #12
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	4638      	mov	r0, r7
 80011bc:	f000 f80e 	bl	80011dc <__malloc_unlock>
 80011c0:	e797      	b.n	80010f2 <_malloc_r+0x22>
 80011c2:	6025      	str	r5, [r4, #0]
 80011c4:	e7dc      	b.n	8001180 <_malloc_r+0xb0>
 80011c6:	605b      	str	r3, [r3, #4]
 80011c8:	deff      	udf	#255	; 0xff
 80011ca:	bf00      	nop
 80011cc:	20000218 	.word	0x20000218

080011d0 <__malloc_lock>:
 80011d0:	4801      	ldr	r0, [pc, #4]	; (80011d8 <__malloc_lock+0x8>)
 80011d2:	f7ff bf10 	b.w	8000ff6 <__retarget_lock_acquire_recursive>
 80011d6:	bf00      	nop
 80011d8:	20000214 	.word	0x20000214

080011dc <__malloc_unlock>:
 80011dc:	4801      	ldr	r0, [pc, #4]	; (80011e4 <__malloc_unlock+0x8>)
 80011de:	f7ff bf0b 	b.w	8000ff8 <__retarget_lock_release_recursive>
 80011e2:	bf00      	nop
 80011e4:	20000214 	.word	0x20000214

080011e8 <__sfputc_r>:
 80011e8:	6893      	ldr	r3, [r2, #8]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	b410      	push	{r4}
 80011f0:	6093      	str	r3, [r2, #8]
 80011f2:	da07      	bge.n	8001204 <__sfputc_r+0x1c>
 80011f4:	6994      	ldr	r4, [r2, #24]
 80011f6:	42a3      	cmp	r3, r4
 80011f8:	db01      	blt.n	80011fe <__sfputc_r+0x16>
 80011fa:	290a      	cmp	r1, #10
 80011fc:	d102      	bne.n	8001204 <__sfputc_r+0x1c>
 80011fe:	bc10      	pop	{r4}
 8001200:	f7ff bdeb 	b.w	8000dda <__swbuf_r>
 8001204:	6813      	ldr	r3, [r2, #0]
 8001206:	1c58      	adds	r0, r3, #1
 8001208:	6010      	str	r0, [r2, #0]
 800120a:	7019      	strb	r1, [r3, #0]
 800120c:	4608      	mov	r0, r1
 800120e:	bc10      	pop	{r4}
 8001210:	4770      	bx	lr

08001212 <__sfputs_r>:
 8001212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001214:	4606      	mov	r6, r0
 8001216:	460f      	mov	r7, r1
 8001218:	4614      	mov	r4, r2
 800121a:	18d5      	adds	r5, r2, r3
 800121c:	42ac      	cmp	r4, r5
 800121e:	d101      	bne.n	8001224 <__sfputs_r+0x12>
 8001220:	2000      	movs	r0, #0
 8001222:	e007      	b.n	8001234 <__sfputs_r+0x22>
 8001224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001228:	463a      	mov	r2, r7
 800122a:	4630      	mov	r0, r6
 800122c:	f7ff ffdc 	bl	80011e8 <__sfputc_r>
 8001230:	1c43      	adds	r3, r0, #1
 8001232:	d1f3      	bne.n	800121c <__sfputs_r+0xa>
 8001234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001238 <_vfiprintf_r>:
 8001238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800123c:	460d      	mov	r5, r1
 800123e:	b09d      	sub	sp, #116	; 0x74
 8001240:	4614      	mov	r4, r2
 8001242:	4698      	mov	r8, r3
 8001244:	4606      	mov	r6, r0
 8001246:	b118      	cbz	r0, 8001250 <_vfiprintf_r+0x18>
 8001248:	6a03      	ldr	r3, [r0, #32]
 800124a:	b90b      	cbnz	r3, 8001250 <_vfiprintf_r+0x18>
 800124c:	f7ff fcde 	bl	8000c0c <__sinit>
 8001250:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001252:	07d9      	lsls	r1, r3, #31
 8001254:	d405      	bmi.n	8001262 <_vfiprintf_r+0x2a>
 8001256:	89ab      	ldrh	r3, [r5, #12]
 8001258:	059a      	lsls	r2, r3, #22
 800125a:	d402      	bmi.n	8001262 <_vfiprintf_r+0x2a>
 800125c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800125e:	f7ff feca 	bl	8000ff6 <__retarget_lock_acquire_recursive>
 8001262:	89ab      	ldrh	r3, [r5, #12]
 8001264:	071b      	lsls	r3, r3, #28
 8001266:	d501      	bpl.n	800126c <_vfiprintf_r+0x34>
 8001268:	692b      	ldr	r3, [r5, #16]
 800126a:	b99b      	cbnz	r3, 8001294 <_vfiprintf_r+0x5c>
 800126c:	4629      	mov	r1, r5
 800126e:	4630      	mov	r0, r6
 8001270:	f7ff fdf0 	bl	8000e54 <__swsetup_r>
 8001274:	b170      	cbz	r0, 8001294 <_vfiprintf_r+0x5c>
 8001276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001278:	07dc      	lsls	r4, r3, #31
 800127a:	d504      	bpl.n	8001286 <_vfiprintf_r+0x4e>
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	b01d      	add	sp, #116	; 0x74
 8001282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001286:	89ab      	ldrh	r3, [r5, #12]
 8001288:	0598      	lsls	r0, r3, #22
 800128a:	d4f7      	bmi.n	800127c <_vfiprintf_r+0x44>
 800128c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800128e:	f7ff feb3 	bl	8000ff8 <__retarget_lock_release_recursive>
 8001292:	e7f3      	b.n	800127c <_vfiprintf_r+0x44>
 8001294:	2300      	movs	r3, #0
 8001296:	9309      	str	r3, [sp, #36]	; 0x24
 8001298:	2320      	movs	r3, #32
 800129a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800129e:	f8cd 800c 	str.w	r8, [sp, #12]
 80012a2:	2330      	movs	r3, #48	; 0x30
 80012a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001458 <_vfiprintf_r+0x220>
 80012a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80012ac:	f04f 0901 	mov.w	r9, #1
 80012b0:	4623      	mov	r3, r4
 80012b2:	469a      	mov	sl, r3
 80012b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80012b8:	b10a      	cbz	r2, 80012be <_vfiprintf_r+0x86>
 80012ba:	2a25      	cmp	r2, #37	; 0x25
 80012bc:	d1f9      	bne.n	80012b2 <_vfiprintf_r+0x7a>
 80012be:	ebba 0b04 	subs.w	fp, sl, r4
 80012c2:	d00b      	beq.n	80012dc <_vfiprintf_r+0xa4>
 80012c4:	465b      	mov	r3, fp
 80012c6:	4622      	mov	r2, r4
 80012c8:	4629      	mov	r1, r5
 80012ca:	4630      	mov	r0, r6
 80012cc:	f7ff ffa1 	bl	8001212 <__sfputs_r>
 80012d0:	3001      	adds	r0, #1
 80012d2:	f000 80a9 	beq.w	8001428 <_vfiprintf_r+0x1f0>
 80012d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80012d8:	445a      	add	r2, fp
 80012da:	9209      	str	r2, [sp, #36]	; 0x24
 80012dc:	f89a 3000 	ldrb.w	r3, [sl]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f000 80a1 	beq.w	8001428 <_vfiprintf_r+0x1f0>
 80012e6:	2300      	movs	r3, #0
 80012e8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80012f0:	f10a 0a01 	add.w	sl, sl, #1
 80012f4:	9304      	str	r3, [sp, #16]
 80012f6:	9307      	str	r3, [sp, #28]
 80012f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80012fc:	931a      	str	r3, [sp, #104]	; 0x68
 80012fe:	4654      	mov	r4, sl
 8001300:	2205      	movs	r2, #5
 8001302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001306:	4854      	ldr	r0, [pc, #336]	; (8001458 <_vfiprintf_r+0x220>)
 8001308:	f7fe ff82 	bl	8000210 <memchr>
 800130c:	9a04      	ldr	r2, [sp, #16]
 800130e:	b9d8      	cbnz	r0, 8001348 <_vfiprintf_r+0x110>
 8001310:	06d1      	lsls	r1, r2, #27
 8001312:	bf44      	itt	mi
 8001314:	2320      	movmi	r3, #32
 8001316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800131a:	0713      	lsls	r3, r2, #28
 800131c:	bf44      	itt	mi
 800131e:	232b      	movmi	r3, #43	; 0x2b
 8001320:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001324:	f89a 3000 	ldrb.w	r3, [sl]
 8001328:	2b2a      	cmp	r3, #42	; 0x2a
 800132a:	d015      	beq.n	8001358 <_vfiprintf_r+0x120>
 800132c:	9a07      	ldr	r2, [sp, #28]
 800132e:	4654      	mov	r4, sl
 8001330:	2000      	movs	r0, #0
 8001332:	f04f 0c0a 	mov.w	ip, #10
 8001336:	4621      	mov	r1, r4
 8001338:	f811 3b01 	ldrb.w	r3, [r1], #1
 800133c:	3b30      	subs	r3, #48	; 0x30
 800133e:	2b09      	cmp	r3, #9
 8001340:	d94d      	bls.n	80013de <_vfiprintf_r+0x1a6>
 8001342:	b1b0      	cbz	r0, 8001372 <_vfiprintf_r+0x13a>
 8001344:	9207      	str	r2, [sp, #28]
 8001346:	e014      	b.n	8001372 <_vfiprintf_r+0x13a>
 8001348:	eba0 0308 	sub.w	r3, r0, r8
 800134c:	fa09 f303 	lsl.w	r3, r9, r3
 8001350:	4313      	orrs	r3, r2
 8001352:	9304      	str	r3, [sp, #16]
 8001354:	46a2      	mov	sl, r4
 8001356:	e7d2      	b.n	80012fe <_vfiprintf_r+0xc6>
 8001358:	9b03      	ldr	r3, [sp, #12]
 800135a:	1d19      	adds	r1, r3, #4
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	9103      	str	r1, [sp, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	bfbb      	ittet	lt
 8001364:	425b      	neglt	r3, r3
 8001366:	f042 0202 	orrlt.w	r2, r2, #2
 800136a:	9307      	strge	r3, [sp, #28]
 800136c:	9307      	strlt	r3, [sp, #28]
 800136e:	bfb8      	it	lt
 8001370:	9204      	strlt	r2, [sp, #16]
 8001372:	7823      	ldrb	r3, [r4, #0]
 8001374:	2b2e      	cmp	r3, #46	; 0x2e
 8001376:	d10c      	bne.n	8001392 <_vfiprintf_r+0x15a>
 8001378:	7863      	ldrb	r3, [r4, #1]
 800137a:	2b2a      	cmp	r3, #42	; 0x2a
 800137c:	d134      	bne.n	80013e8 <_vfiprintf_r+0x1b0>
 800137e:	9b03      	ldr	r3, [sp, #12]
 8001380:	1d1a      	adds	r2, r3, #4
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	9203      	str	r2, [sp, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	bfb8      	it	lt
 800138a:	f04f 33ff 	movlt.w	r3, #4294967295
 800138e:	3402      	adds	r4, #2
 8001390:	9305      	str	r3, [sp, #20]
 8001392:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800145c <_vfiprintf_r+0x224>
 8001396:	7821      	ldrb	r1, [r4, #0]
 8001398:	2203      	movs	r2, #3
 800139a:	4650      	mov	r0, sl
 800139c:	f7fe ff38 	bl	8000210 <memchr>
 80013a0:	b138      	cbz	r0, 80013b2 <_vfiprintf_r+0x17a>
 80013a2:	9b04      	ldr	r3, [sp, #16]
 80013a4:	eba0 000a 	sub.w	r0, r0, sl
 80013a8:	2240      	movs	r2, #64	; 0x40
 80013aa:	4082      	lsls	r2, r0
 80013ac:	4313      	orrs	r3, r2
 80013ae:	3401      	adds	r4, #1
 80013b0:	9304      	str	r3, [sp, #16]
 80013b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013b6:	482a      	ldr	r0, [pc, #168]	; (8001460 <_vfiprintf_r+0x228>)
 80013b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80013bc:	2206      	movs	r2, #6
 80013be:	f7fe ff27 	bl	8000210 <memchr>
 80013c2:	2800      	cmp	r0, #0
 80013c4:	d03f      	beq.n	8001446 <_vfiprintf_r+0x20e>
 80013c6:	4b27      	ldr	r3, [pc, #156]	; (8001464 <_vfiprintf_r+0x22c>)
 80013c8:	bb1b      	cbnz	r3, 8001412 <_vfiprintf_r+0x1da>
 80013ca:	9b03      	ldr	r3, [sp, #12]
 80013cc:	3307      	adds	r3, #7
 80013ce:	f023 0307 	bic.w	r3, r3, #7
 80013d2:	3308      	adds	r3, #8
 80013d4:	9303      	str	r3, [sp, #12]
 80013d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013d8:	443b      	add	r3, r7
 80013da:	9309      	str	r3, [sp, #36]	; 0x24
 80013dc:	e768      	b.n	80012b0 <_vfiprintf_r+0x78>
 80013de:	fb0c 3202 	mla	r2, ip, r2, r3
 80013e2:	460c      	mov	r4, r1
 80013e4:	2001      	movs	r0, #1
 80013e6:	e7a6      	b.n	8001336 <_vfiprintf_r+0xfe>
 80013e8:	2300      	movs	r3, #0
 80013ea:	3401      	adds	r4, #1
 80013ec:	9305      	str	r3, [sp, #20]
 80013ee:	4619      	mov	r1, r3
 80013f0:	f04f 0c0a 	mov.w	ip, #10
 80013f4:	4620      	mov	r0, r4
 80013f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80013fa:	3a30      	subs	r2, #48	; 0x30
 80013fc:	2a09      	cmp	r2, #9
 80013fe:	d903      	bls.n	8001408 <_vfiprintf_r+0x1d0>
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0c6      	beq.n	8001392 <_vfiprintf_r+0x15a>
 8001404:	9105      	str	r1, [sp, #20]
 8001406:	e7c4      	b.n	8001392 <_vfiprintf_r+0x15a>
 8001408:	fb0c 2101 	mla	r1, ip, r1, r2
 800140c:	4604      	mov	r4, r0
 800140e:	2301      	movs	r3, #1
 8001410:	e7f0      	b.n	80013f4 <_vfiprintf_r+0x1bc>
 8001412:	ab03      	add	r3, sp, #12
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	462a      	mov	r2, r5
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <_vfiprintf_r+0x230>)
 800141a:	a904      	add	r1, sp, #16
 800141c:	4630      	mov	r0, r6
 800141e:	f3af 8000 	nop.w
 8001422:	4607      	mov	r7, r0
 8001424:	1c78      	adds	r0, r7, #1
 8001426:	d1d6      	bne.n	80013d6 <_vfiprintf_r+0x19e>
 8001428:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800142a:	07d9      	lsls	r1, r3, #31
 800142c:	d405      	bmi.n	800143a <_vfiprintf_r+0x202>
 800142e:	89ab      	ldrh	r3, [r5, #12]
 8001430:	059a      	lsls	r2, r3, #22
 8001432:	d402      	bmi.n	800143a <_vfiprintf_r+0x202>
 8001434:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001436:	f7ff fddf 	bl	8000ff8 <__retarget_lock_release_recursive>
 800143a:	89ab      	ldrh	r3, [r5, #12]
 800143c:	065b      	lsls	r3, r3, #25
 800143e:	f53f af1d 	bmi.w	800127c <_vfiprintf_r+0x44>
 8001442:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001444:	e71c      	b.n	8001280 <_vfiprintf_r+0x48>
 8001446:	ab03      	add	r3, sp, #12
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	462a      	mov	r2, r5
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <_vfiprintf_r+0x230>)
 800144e:	a904      	add	r1, sp, #16
 8001450:	4630      	mov	r0, r6
 8001452:	f000 f879 	bl	8001548 <_printf_i>
 8001456:	e7e4      	b.n	8001422 <_vfiprintf_r+0x1ea>
 8001458:	08001b58 	.word	0x08001b58
 800145c:	08001b5e 	.word	0x08001b5e
 8001460:	08001b62 	.word	0x08001b62
 8001464:	00000000 	.word	0x00000000
 8001468:	08001213 	.word	0x08001213

0800146c <_printf_common>:
 800146c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001470:	4616      	mov	r6, r2
 8001472:	4699      	mov	r9, r3
 8001474:	688a      	ldr	r2, [r1, #8]
 8001476:	690b      	ldr	r3, [r1, #16]
 8001478:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800147c:	4293      	cmp	r3, r2
 800147e:	bfb8      	it	lt
 8001480:	4613      	movlt	r3, r2
 8001482:	6033      	str	r3, [r6, #0]
 8001484:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001488:	4607      	mov	r7, r0
 800148a:	460c      	mov	r4, r1
 800148c:	b10a      	cbz	r2, 8001492 <_printf_common+0x26>
 800148e:	3301      	adds	r3, #1
 8001490:	6033      	str	r3, [r6, #0]
 8001492:	6823      	ldr	r3, [r4, #0]
 8001494:	0699      	lsls	r1, r3, #26
 8001496:	bf42      	ittt	mi
 8001498:	6833      	ldrmi	r3, [r6, #0]
 800149a:	3302      	addmi	r3, #2
 800149c:	6033      	strmi	r3, [r6, #0]
 800149e:	6825      	ldr	r5, [r4, #0]
 80014a0:	f015 0506 	ands.w	r5, r5, #6
 80014a4:	d106      	bne.n	80014b4 <_printf_common+0x48>
 80014a6:	f104 0a19 	add.w	sl, r4, #25
 80014aa:	68e3      	ldr	r3, [r4, #12]
 80014ac:	6832      	ldr	r2, [r6, #0]
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	42ab      	cmp	r3, r5
 80014b2:	dc26      	bgt.n	8001502 <_printf_common+0x96>
 80014b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80014b8:	1e13      	subs	r3, r2, #0
 80014ba:	6822      	ldr	r2, [r4, #0]
 80014bc:	bf18      	it	ne
 80014be:	2301      	movne	r3, #1
 80014c0:	0692      	lsls	r2, r2, #26
 80014c2:	d42b      	bmi.n	800151c <_printf_common+0xb0>
 80014c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80014c8:	4649      	mov	r1, r9
 80014ca:	4638      	mov	r0, r7
 80014cc:	47c0      	blx	r8
 80014ce:	3001      	adds	r0, #1
 80014d0:	d01e      	beq.n	8001510 <_printf_common+0xa4>
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	6922      	ldr	r2, [r4, #16]
 80014d6:	f003 0306 	and.w	r3, r3, #6
 80014da:	2b04      	cmp	r3, #4
 80014dc:	bf02      	ittt	eq
 80014de:	68e5      	ldreq	r5, [r4, #12]
 80014e0:	6833      	ldreq	r3, [r6, #0]
 80014e2:	1aed      	subeq	r5, r5, r3
 80014e4:	68a3      	ldr	r3, [r4, #8]
 80014e6:	bf0c      	ite	eq
 80014e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80014ec:	2500      	movne	r5, #0
 80014ee:	4293      	cmp	r3, r2
 80014f0:	bfc4      	itt	gt
 80014f2:	1a9b      	subgt	r3, r3, r2
 80014f4:	18ed      	addgt	r5, r5, r3
 80014f6:	2600      	movs	r6, #0
 80014f8:	341a      	adds	r4, #26
 80014fa:	42b5      	cmp	r5, r6
 80014fc:	d11a      	bne.n	8001534 <_printf_common+0xc8>
 80014fe:	2000      	movs	r0, #0
 8001500:	e008      	b.n	8001514 <_printf_common+0xa8>
 8001502:	2301      	movs	r3, #1
 8001504:	4652      	mov	r2, sl
 8001506:	4649      	mov	r1, r9
 8001508:	4638      	mov	r0, r7
 800150a:	47c0      	blx	r8
 800150c:	3001      	adds	r0, #1
 800150e:	d103      	bne.n	8001518 <_printf_common+0xac>
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001518:	3501      	adds	r5, #1
 800151a:	e7c6      	b.n	80014aa <_printf_common+0x3e>
 800151c:	18e1      	adds	r1, r4, r3
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	2030      	movs	r0, #48	; 0x30
 8001522:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001526:	4422      	add	r2, r4
 8001528:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800152c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001530:	3302      	adds	r3, #2
 8001532:	e7c7      	b.n	80014c4 <_printf_common+0x58>
 8001534:	2301      	movs	r3, #1
 8001536:	4622      	mov	r2, r4
 8001538:	4649      	mov	r1, r9
 800153a:	4638      	mov	r0, r7
 800153c:	47c0      	blx	r8
 800153e:	3001      	adds	r0, #1
 8001540:	d0e6      	beq.n	8001510 <_printf_common+0xa4>
 8001542:	3601      	adds	r6, #1
 8001544:	e7d9      	b.n	80014fa <_printf_common+0x8e>
	...

08001548 <_printf_i>:
 8001548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800154c:	7e0f      	ldrb	r7, [r1, #24]
 800154e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001550:	2f78      	cmp	r7, #120	; 0x78
 8001552:	4691      	mov	r9, r2
 8001554:	4680      	mov	r8, r0
 8001556:	460c      	mov	r4, r1
 8001558:	469a      	mov	sl, r3
 800155a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800155e:	d807      	bhi.n	8001570 <_printf_i+0x28>
 8001560:	2f62      	cmp	r7, #98	; 0x62
 8001562:	d80a      	bhi.n	800157a <_printf_i+0x32>
 8001564:	2f00      	cmp	r7, #0
 8001566:	f000 80d4 	beq.w	8001712 <_printf_i+0x1ca>
 800156a:	2f58      	cmp	r7, #88	; 0x58
 800156c:	f000 80c0 	beq.w	80016f0 <_printf_i+0x1a8>
 8001570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001574:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001578:	e03a      	b.n	80015f0 <_printf_i+0xa8>
 800157a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800157e:	2b15      	cmp	r3, #21
 8001580:	d8f6      	bhi.n	8001570 <_printf_i+0x28>
 8001582:	a101      	add	r1, pc, #4	; (adr r1, 8001588 <_printf_i+0x40>)
 8001584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001588:	080015e1 	.word	0x080015e1
 800158c:	080015f5 	.word	0x080015f5
 8001590:	08001571 	.word	0x08001571
 8001594:	08001571 	.word	0x08001571
 8001598:	08001571 	.word	0x08001571
 800159c:	08001571 	.word	0x08001571
 80015a0:	080015f5 	.word	0x080015f5
 80015a4:	08001571 	.word	0x08001571
 80015a8:	08001571 	.word	0x08001571
 80015ac:	08001571 	.word	0x08001571
 80015b0:	08001571 	.word	0x08001571
 80015b4:	080016f9 	.word	0x080016f9
 80015b8:	08001621 	.word	0x08001621
 80015bc:	080016b3 	.word	0x080016b3
 80015c0:	08001571 	.word	0x08001571
 80015c4:	08001571 	.word	0x08001571
 80015c8:	0800171b 	.word	0x0800171b
 80015cc:	08001571 	.word	0x08001571
 80015d0:	08001621 	.word	0x08001621
 80015d4:	08001571 	.word	0x08001571
 80015d8:	08001571 	.word	0x08001571
 80015dc:	080016bb 	.word	0x080016bb
 80015e0:	682b      	ldr	r3, [r5, #0]
 80015e2:	1d1a      	adds	r2, r3, #4
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	602a      	str	r2, [r5, #0]
 80015e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80015ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80015f0:	2301      	movs	r3, #1
 80015f2:	e09f      	b.n	8001734 <_printf_i+0x1ec>
 80015f4:	6820      	ldr	r0, [r4, #0]
 80015f6:	682b      	ldr	r3, [r5, #0]
 80015f8:	0607      	lsls	r7, r0, #24
 80015fa:	f103 0104 	add.w	r1, r3, #4
 80015fe:	6029      	str	r1, [r5, #0]
 8001600:	d501      	bpl.n	8001606 <_printf_i+0xbe>
 8001602:	681e      	ldr	r6, [r3, #0]
 8001604:	e003      	b.n	800160e <_printf_i+0xc6>
 8001606:	0646      	lsls	r6, r0, #25
 8001608:	d5fb      	bpl.n	8001602 <_printf_i+0xba>
 800160a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800160e:	2e00      	cmp	r6, #0
 8001610:	da03      	bge.n	800161a <_printf_i+0xd2>
 8001612:	232d      	movs	r3, #45	; 0x2d
 8001614:	4276      	negs	r6, r6
 8001616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800161a:	485a      	ldr	r0, [pc, #360]	; (8001784 <_printf_i+0x23c>)
 800161c:	230a      	movs	r3, #10
 800161e:	e012      	b.n	8001646 <_printf_i+0xfe>
 8001620:	682b      	ldr	r3, [r5, #0]
 8001622:	6820      	ldr	r0, [r4, #0]
 8001624:	1d19      	adds	r1, r3, #4
 8001626:	6029      	str	r1, [r5, #0]
 8001628:	0605      	lsls	r5, r0, #24
 800162a:	d501      	bpl.n	8001630 <_printf_i+0xe8>
 800162c:	681e      	ldr	r6, [r3, #0]
 800162e:	e002      	b.n	8001636 <_printf_i+0xee>
 8001630:	0641      	lsls	r1, r0, #25
 8001632:	d5fb      	bpl.n	800162c <_printf_i+0xe4>
 8001634:	881e      	ldrh	r6, [r3, #0]
 8001636:	4853      	ldr	r0, [pc, #332]	; (8001784 <_printf_i+0x23c>)
 8001638:	2f6f      	cmp	r7, #111	; 0x6f
 800163a:	bf0c      	ite	eq
 800163c:	2308      	moveq	r3, #8
 800163e:	230a      	movne	r3, #10
 8001640:	2100      	movs	r1, #0
 8001642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001646:	6865      	ldr	r5, [r4, #4]
 8001648:	60a5      	str	r5, [r4, #8]
 800164a:	2d00      	cmp	r5, #0
 800164c:	bfa2      	ittt	ge
 800164e:	6821      	ldrge	r1, [r4, #0]
 8001650:	f021 0104 	bicge.w	r1, r1, #4
 8001654:	6021      	strge	r1, [r4, #0]
 8001656:	b90e      	cbnz	r6, 800165c <_printf_i+0x114>
 8001658:	2d00      	cmp	r5, #0
 800165a:	d04b      	beq.n	80016f4 <_printf_i+0x1ac>
 800165c:	4615      	mov	r5, r2
 800165e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001662:	fb03 6711 	mls	r7, r3, r1, r6
 8001666:	5dc7      	ldrb	r7, [r0, r7]
 8001668:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800166c:	4637      	mov	r7, r6
 800166e:	42bb      	cmp	r3, r7
 8001670:	460e      	mov	r6, r1
 8001672:	d9f4      	bls.n	800165e <_printf_i+0x116>
 8001674:	2b08      	cmp	r3, #8
 8001676:	d10b      	bne.n	8001690 <_printf_i+0x148>
 8001678:	6823      	ldr	r3, [r4, #0]
 800167a:	07de      	lsls	r6, r3, #31
 800167c:	d508      	bpl.n	8001690 <_printf_i+0x148>
 800167e:	6923      	ldr	r3, [r4, #16]
 8001680:	6861      	ldr	r1, [r4, #4]
 8001682:	4299      	cmp	r1, r3
 8001684:	bfde      	ittt	le
 8001686:	2330      	movle	r3, #48	; 0x30
 8001688:	f805 3c01 	strble.w	r3, [r5, #-1]
 800168c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001690:	1b52      	subs	r2, r2, r5
 8001692:	6122      	str	r2, [r4, #16]
 8001694:	f8cd a000 	str.w	sl, [sp]
 8001698:	464b      	mov	r3, r9
 800169a:	aa03      	add	r2, sp, #12
 800169c:	4621      	mov	r1, r4
 800169e:	4640      	mov	r0, r8
 80016a0:	f7ff fee4 	bl	800146c <_printf_common>
 80016a4:	3001      	adds	r0, #1
 80016a6:	d14a      	bne.n	800173e <_printf_i+0x1f6>
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	b004      	add	sp, #16
 80016ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	f043 0320 	orr.w	r3, r3, #32
 80016b8:	6023      	str	r3, [r4, #0]
 80016ba:	4833      	ldr	r0, [pc, #204]	; (8001788 <_printf_i+0x240>)
 80016bc:	2778      	movs	r7, #120	; 0x78
 80016be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	6829      	ldr	r1, [r5, #0]
 80016c6:	061f      	lsls	r7, r3, #24
 80016c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80016cc:	d402      	bmi.n	80016d4 <_printf_i+0x18c>
 80016ce:	065f      	lsls	r7, r3, #25
 80016d0:	bf48      	it	mi
 80016d2:	b2b6      	uxthmi	r6, r6
 80016d4:	07df      	lsls	r7, r3, #31
 80016d6:	bf48      	it	mi
 80016d8:	f043 0320 	orrmi.w	r3, r3, #32
 80016dc:	6029      	str	r1, [r5, #0]
 80016de:	bf48      	it	mi
 80016e0:	6023      	strmi	r3, [r4, #0]
 80016e2:	b91e      	cbnz	r6, 80016ec <_printf_i+0x1a4>
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	f023 0320 	bic.w	r3, r3, #32
 80016ea:	6023      	str	r3, [r4, #0]
 80016ec:	2310      	movs	r3, #16
 80016ee:	e7a7      	b.n	8001640 <_printf_i+0xf8>
 80016f0:	4824      	ldr	r0, [pc, #144]	; (8001784 <_printf_i+0x23c>)
 80016f2:	e7e4      	b.n	80016be <_printf_i+0x176>
 80016f4:	4615      	mov	r5, r2
 80016f6:	e7bd      	b.n	8001674 <_printf_i+0x12c>
 80016f8:	682b      	ldr	r3, [r5, #0]
 80016fa:	6826      	ldr	r6, [r4, #0]
 80016fc:	6961      	ldr	r1, [r4, #20]
 80016fe:	1d18      	adds	r0, r3, #4
 8001700:	6028      	str	r0, [r5, #0]
 8001702:	0635      	lsls	r5, r6, #24
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	d501      	bpl.n	800170c <_printf_i+0x1c4>
 8001708:	6019      	str	r1, [r3, #0]
 800170a:	e002      	b.n	8001712 <_printf_i+0x1ca>
 800170c:	0670      	lsls	r0, r6, #25
 800170e:	d5fb      	bpl.n	8001708 <_printf_i+0x1c0>
 8001710:	8019      	strh	r1, [r3, #0]
 8001712:	2300      	movs	r3, #0
 8001714:	6123      	str	r3, [r4, #16]
 8001716:	4615      	mov	r5, r2
 8001718:	e7bc      	b.n	8001694 <_printf_i+0x14c>
 800171a:	682b      	ldr	r3, [r5, #0]
 800171c:	1d1a      	adds	r2, r3, #4
 800171e:	602a      	str	r2, [r5, #0]
 8001720:	681d      	ldr	r5, [r3, #0]
 8001722:	6862      	ldr	r2, [r4, #4]
 8001724:	2100      	movs	r1, #0
 8001726:	4628      	mov	r0, r5
 8001728:	f7fe fd72 	bl	8000210 <memchr>
 800172c:	b108      	cbz	r0, 8001732 <_printf_i+0x1ea>
 800172e:	1b40      	subs	r0, r0, r5
 8001730:	6060      	str	r0, [r4, #4]
 8001732:	6863      	ldr	r3, [r4, #4]
 8001734:	6123      	str	r3, [r4, #16]
 8001736:	2300      	movs	r3, #0
 8001738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800173c:	e7aa      	b.n	8001694 <_printf_i+0x14c>
 800173e:	6923      	ldr	r3, [r4, #16]
 8001740:	462a      	mov	r2, r5
 8001742:	4649      	mov	r1, r9
 8001744:	4640      	mov	r0, r8
 8001746:	47d0      	blx	sl
 8001748:	3001      	adds	r0, #1
 800174a:	d0ad      	beq.n	80016a8 <_printf_i+0x160>
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	079b      	lsls	r3, r3, #30
 8001750:	d413      	bmi.n	800177a <_printf_i+0x232>
 8001752:	68e0      	ldr	r0, [r4, #12]
 8001754:	9b03      	ldr	r3, [sp, #12]
 8001756:	4298      	cmp	r0, r3
 8001758:	bfb8      	it	lt
 800175a:	4618      	movlt	r0, r3
 800175c:	e7a6      	b.n	80016ac <_printf_i+0x164>
 800175e:	2301      	movs	r3, #1
 8001760:	4632      	mov	r2, r6
 8001762:	4649      	mov	r1, r9
 8001764:	4640      	mov	r0, r8
 8001766:	47d0      	blx	sl
 8001768:	3001      	adds	r0, #1
 800176a:	d09d      	beq.n	80016a8 <_printf_i+0x160>
 800176c:	3501      	adds	r5, #1
 800176e:	68e3      	ldr	r3, [r4, #12]
 8001770:	9903      	ldr	r1, [sp, #12]
 8001772:	1a5b      	subs	r3, r3, r1
 8001774:	42ab      	cmp	r3, r5
 8001776:	dcf2      	bgt.n	800175e <_printf_i+0x216>
 8001778:	e7eb      	b.n	8001752 <_printf_i+0x20a>
 800177a:	2500      	movs	r5, #0
 800177c:	f104 0619 	add.w	r6, r4, #25
 8001780:	e7f5      	b.n	800176e <_printf_i+0x226>
 8001782:	bf00      	nop
 8001784:	08001b69 	.word	0x08001b69
 8001788:	08001b7a 	.word	0x08001b7a

0800178c <__sflush_r>:
 800178c:	898a      	ldrh	r2, [r1, #12]
 800178e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001790:	4605      	mov	r5, r0
 8001792:	0710      	lsls	r0, r2, #28
 8001794:	460c      	mov	r4, r1
 8001796:	d457      	bmi.n	8001848 <__sflush_r+0xbc>
 8001798:	684b      	ldr	r3, [r1, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	dc04      	bgt.n	80017a8 <__sflush_r+0x1c>
 800179e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	dc01      	bgt.n	80017a8 <__sflush_r+0x1c>
 80017a4:	2000      	movs	r0, #0
 80017a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017aa:	2e00      	cmp	r6, #0
 80017ac:	d0fa      	beq.n	80017a4 <__sflush_r+0x18>
 80017ae:	2300      	movs	r3, #0
 80017b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80017b4:	682f      	ldr	r7, [r5, #0]
 80017b6:	6a21      	ldr	r1, [r4, #32]
 80017b8:	602b      	str	r3, [r5, #0]
 80017ba:	d032      	beq.n	8001822 <__sflush_r+0x96>
 80017bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80017be:	89a3      	ldrh	r3, [r4, #12]
 80017c0:	075a      	lsls	r2, r3, #29
 80017c2:	d505      	bpl.n	80017d0 <__sflush_r+0x44>
 80017c4:	6863      	ldr	r3, [r4, #4]
 80017c6:	1ac0      	subs	r0, r0, r3
 80017c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80017ca:	b10b      	cbz	r3, 80017d0 <__sflush_r+0x44>
 80017cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017ce:	1ac0      	subs	r0, r0, r3
 80017d0:	2300      	movs	r3, #0
 80017d2:	4602      	mov	r2, r0
 80017d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017d6:	6a21      	ldr	r1, [r4, #32]
 80017d8:	4628      	mov	r0, r5
 80017da:	47b0      	blx	r6
 80017dc:	1c43      	adds	r3, r0, #1
 80017de:	89a3      	ldrh	r3, [r4, #12]
 80017e0:	d106      	bne.n	80017f0 <__sflush_r+0x64>
 80017e2:	6829      	ldr	r1, [r5, #0]
 80017e4:	291d      	cmp	r1, #29
 80017e6:	d82b      	bhi.n	8001840 <__sflush_r+0xb4>
 80017e8:	4a28      	ldr	r2, [pc, #160]	; (800188c <__sflush_r+0x100>)
 80017ea:	410a      	asrs	r2, r1
 80017ec:	07d6      	lsls	r6, r2, #31
 80017ee:	d427      	bmi.n	8001840 <__sflush_r+0xb4>
 80017f0:	2200      	movs	r2, #0
 80017f2:	6062      	str	r2, [r4, #4]
 80017f4:	04d9      	lsls	r1, r3, #19
 80017f6:	6922      	ldr	r2, [r4, #16]
 80017f8:	6022      	str	r2, [r4, #0]
 80017fa:	d504      	bpl.n	8001806 <__sflush_r+0x7a>
 80017fc:	1c42      	adds	r2, r0, #1
 80017fe:	d101      	bne.n	8001804 <__sflush_r+0x78>
 8001800:	682b      	ldr	r3, [r5, #0]
 8001802:	b903      	cbnz	r3, 8001806 <__sflush_r+0x7a>
 8001804:	6560      	str	r0, [r4, #84]	; 0x54
 8001806:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001808:	602f      	str	r7, [r5, #0]
 800180a:	2900      	cmp	r1, #0
 800180c:	d0ca      	beq.n	80017a4 <__sflush_r+0x18>
 800180e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001812:	4299      	cmp	r1, r3
 8001814:	d002      	beq.n	800181c <__sflush_r+0x90>
 8001816:	4628      	mov	r0, r5
 8001818:	f7ff fbf0 	bl	8000ffc <_free_r>
 800181c:	2000      	movs	r0, #0
 800181e:	6360      	str	r0, [r4, #52]	; 0x34
 8001820:	e7c1      	b.n	80017a6 <__sflush_r+0x1a>
 8001822:	2301      	movs	r3, #1
 8001824:	4628      	mov	r0, r5
 8001826:	47b0      	blx	r6
 8001828:	1c41      	adds	r1, r0, #1
 800182a:	d1c8      	bne.n	80017be <__sflush_r+0x32>
 800182c:	682b      	ldr	r3, [r5, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0c5      	beq.n	80017be <__sflush_r+0x32>
 8001832:	2b1d      	cmp	r3, #29
 8001834:	d001      	beq.n	800183a <__sflush_r+0xae>
 8001836:	2b16      	cmp	r3, #22
 8001838:	d101      	bne.n	800183e <__sflush_r+0xb2>
 800183a:	602f      	str	r7, [r5, #0]
 800183c:	e7b2      	b.n	80017a4 <__sflush_r+0x18>
 800183e:	89a3      	ldrh	r3, [r4, #12]
 8001840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001844:	81a3      	strh	r3, [r4, #12]
 8001846:	e7ae      	b.n	80017a6 <__sflush_r+0x1a>
 8001848:	690f      	ldr	r7, [r1, #16]
 800184a:	2f00      	cmp	r7, #0
 800184c:	d0aa      	beq.n	80017a4 <__sflush_r+0x18>
 800184e:	0793      	lsls	r3, r2, #30
 8001850:	680e      	ldr	r6, [r1, #0]
 8001852:	bf08      	it	eq
 8001854:	694b      	ldreq	r3, [r1, #20]
 8001856:	600f      	str	r7, [r1, #0]
 8001858:	bf18      	it	ne
 800185a:	2300      	movne	r3, #0
 800185c:	1bf6      	subs	r6, r6, r7
 800185e:	608b      	str	r3, [r1, #8]
 8001860:	2e00      	cmp	r6, #0
 8001862:	dd9f      	ble.n	80017a4 <__sflush_r+0x18>
 8001864:	6a21      	ldr	r1, [r4, #32]
 8001866:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800186a:	4633      	mov	r3, r6
 800186c:	463a      	mov	r2, r7
 800186e:	4628      	mov	r0, r5
 8001870:	47e0      	blx	ip
 8001872:	2800      	cmp	r0, #0
 8001874:	dc06      	bgt.n	8001884 <__sflush_r+0xf8>
 8001876:	89a3      	ldrh	r3, [r4, #12]
 8001878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800187c:	81a3      	strh	r3, [r4, #12]
 800187e:	f04f 30ff 	mov.w	r0, #4294967295
 8001882:	e790      	b.n	80017a6 <__sflush_r+0x1a>
 8001884:	4407      	add	r7, r0
 8001886:	1a36      	subs	r6, r6, r0
 8001888:	e7ea      	b.n	8001860 <__sflush_r+0xd4>
 800188a:	bf00      	nop
 800188c:	dfbffffe 	.word	0xdfbffffe

08001890 <_fflush_r>:
 8001890:	b538      	push	{r3, r4, r5, lr}
 8001892:	690b      	ldr	r3, [r1, #16]
 8001894:	4605      	mov	r5, r0
 8001896:	460c      	mov	r4, r1
 8001898:	b913      	cbnz	r3, 80018a0 <_fflush_r+0x10>
 800189a:	2500      	movs	r5, #0
 800189c:	4628      	mov	r0, r5
 800189e:	bd38      	pop	{r3, r4, r5, pc}
 80018a0:	b118      	cbz	r0, 80018aa <_fflush_r+0x1a>
 80018a2:	6a03      	ldr	r3, [r0, #32]
 80018a4:	b90b      	cbnz	r3, 80018aa <_fflush_r+0x1a>
 80018a6:	f7ff f9b1 	bl	8000c0c <__sinit>
 80018aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f3      	beq.n	800189a <_fflush_r+0xa>
 80018b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80018b4:	07d0      	lsls	r0, r2, #31
 80018b6:	d404      	bmi.n	80018c2 <_fflush_r+0x32>
 80018b8:	0599      	lsls	r1, r3, #22
 80018ba:	d402      	bmi.n	80018c2 <_fflush_r+0x32>
 80018bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018be:	f7ff fb9a 	bl	8000ff6 <__retarget_lock_acquire_recursive>
 80018c2:	4628      	mov	r0, r5
 80018c4:	4621      	mov	r1, r4
 80018c6:	f7ff ff61 	bl	800178c <__sflush_r>
 80018ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80018cc:	07da      	lsls	r2, r3, #31
 80018ce:	4605      	mov	r5, r0
 80018d0:	d4e4      	bmi.n	800189c <_fflush_r+0xc>
 80018d2:	89a3      	ldrh	r3, [r4, #12]
 80018d4:	059b      	lsls	r3, r3, #22
 80018d6:	d4e1      	bmi.n	800189c <_fflush_r+0xc>
 80018d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018da:	f7ff fb8d 	bl	8000ff8 <__retarget_lock_release_recursive>
 80018de:	e7dd      	b.n	800189c <_fflush_r+0xc>

080018e0 <__swhatbuf_r>:
 80018e0:	b570      	push	{r4, r5, r6, lr}
 80018e2:	460c      	mov	r4, r1
 80018e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018e8:	2900      	cmp	r1, #0
 80018ea:	b096      	sub	sp, #88	; 0x58
 80018ec:	4615      	mov	r5, r2
 80018ee:	461e      	mov	r6, r3
 80018f0:	da0d      	bge.n	800190e <__swhatbuf_r+0x2e>
 80018f2:	89a3      	ldrh	r3, [r4, #12]
 80018f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018f8:	f04f 0100 	mov.w	r1, #0
 80018fc:	bf0c      	ite	eq
 80018fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001902:	2340      	movne	r3, #64	; 0x40
 8001904:	2000      	movs	r0, #0
 8001906:	6031      	str	r1, [r6, #0]
 8001908:	602b      	str	r3, [r5, #0]
 800190a:	b016      	add	sp, #88	; 0x58
 800190c:	bd70      	pop	{r4, r5, r6, pc}
 800190e:	466a      	mov	r2, sp
 8001910:	f000 f848 	bl	80019a4 <_fstat_r>
 8001914:	2800      	cmp	r0, #0
 8001916:	dbec      	blt.n	80018f2 <__swhatbuf_r+0x12>
 8001918:	9901      	ldr	r1, [sp, #4]
 800191a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800191e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001922:	4259      	negs	r1, r3
 8001924:	4159      	adcs	r1, r3
 8001926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800192a:	e7eb      	b.n	8001904 <__swhatbuf_r+0x24>

0800192c <__smakebuf_r>:
 800192c:	898b      	ldrh	r3, [r1, #12]
 800192e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001930:	079d      	lsls	r5, r3, #30
 8001932:	4606      	mov	r6, r0
 8001934:	460c      	mov	r4, r1
 8001936:	d507      	bpl.n	8001948 <__smakebuf_r+0x1c>
 8001938:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800193c:	6023      	str	r3, [r4, #0]
 800193e:	6123      	str	r3, [r4, #16]
 8001940:	2301      	movs	r3, #1
 8001942:	6163      	str	r3, [r4, #20]
 8001944:	b002      	add	sp, #8
 8001946:	bd70      	pop	{r4, r5, r6, pc}
 8001948:	ab01      	add	r3, sp, #4
 800194a:	466a      	mov	r2, sp
 800194c:	f7ff ffc8 	bl	80018e0 <__swhatbuf_r>
 8001950:	9900      	ldr	r1, [sp, #0]
 8001952:	4605      	mov	r5, r0
 8001954:	4630      	mov	r0, r6
 8001956:	f7ff fbbb 	bl	80010d0 <_malloc_r>
 800195a:	b948      	cbnz	r0, 8001970 <__smakebuf_r+0x44>
 800195c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001960:	059a      	lsls	r2, r3, #22
 8001962:	d4ef      	bmi.n	8001944 <__smakebuf_r+0x18>
 8001964:	f023 0303 	bic.w	r3, r3, #3
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	81a3      	strh	r3, [r4, #12]
 800196e:	e7e3      	b.n	8001938 <__smakebuf_r+0xc>
 8001970:	89a3      	ldrh	r3, [r4, #12]
 8001972:	6020      	str	r0, [r4, #0]
 8001974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001978:	81a3      	strh	r3, [r4, #12]
 800197a:	9b00      	ldr	r3, [sp, #0]
 800197c:	6163      	str	r3, [r4, #20]
 800197e:	9b01      	ldr	r3, [sp, #4]
 8001980:	6120      	str	r0, [r4, #16]
 8001982:	b15b      	cbz	r3, 800199c <__smakebuf_r+0x70>
 8001984:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001988:	4630      	mov	r0, r6
 800198a:	f000 f81d 	bl	80019c8 <_isatty_r>
 800198e:	b128      	cbz	r0, 800199c <__smakebuf_r+0x70>
 8001990:	89a3      	ldrh	r3, [r4, #12]
 8001992:	f023 0303 	bic.w	r3, r3, #3
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	81a3      	strh	r3, [r4, #12]
 800199c:	89a3      	ldrh	r3, [r4, #12]
 800199e:	431d      	orrs	r5, r3
 80019a0:	81a5      	strh	r5, [r4, #12]
 80019a2:	e7cf      	b.n	8001944 <__smakebuf_r+0x18>

080019a4 <_fstat_r>:
 80019a4:	b538      	push	{r3, r4, r5, lr}
 80019a6:	4d07      	ldr	r5, [pc, #28]	; (80019c4 <_fstat_r+0x20>)
 80019a8:	2300      	movs	r3, #0
 80019aa:	4604      	mov	r4, r0
 80019ac:	4608      	mov	r0, r1
 80019ae:	4611      	mov	r1, r2
 80019b0:	602b      	str	r3, [r5, #0]
 80019b2:	f7fe ff0b 	bl	80007cc <_fstat>
 80019b6:	1c43      	adds	r3, r0, #1
 80019b8:	d102      	bne.n	80019c0 <_fstat_r+0x1c>
 80019ba:	682b      	ldr	r3, [r5, #0]
 80019bc:	b103      	cbz	r3, 80019c0 <_fstat_r+0x1c>
 80019be:	6023      	str	r3, [r4, #0]
 80019c0:	bd38      	pop	{r3, r4, r5, pc}
 80019c2:	bf00      	nop
 80019c4:	20000210 	.word	0x20000210

080019c8 <_isatty_r>:
 80019c8:	b538      	push	{r3, r4, r5, lr}
 80019ca:	4d06      	ldr	r5, [pc, #24]	; (80019e4 <_isatty_r+0x1c>)
 80019cc:	2300      	movs	r3, #0
 80019ce:	4604      	mov	r4, r0
 80019d0:	4608      	mov	r0, r1
 80019d2:	602b      	str	r3, [r5, #0]
 80019d4:	f7fe ff09 	bl	80007ea <_isatty>
 80019d8:	1c43      	adds	r3, r0, #1
 80019da:	d102      	bne.n	80019e2 <_isatty_r+0x1a>
 80019dc:	682b      	ldr	r3, [r5, #0]
 80019de:	b103      	cbz	r3, 80019e2 <_isatty_r+0x1a>
 80019e0:	6023      	str	r3, [r4, #0]
 80019e2:	bd38      	pop	{r3, r4, r5, pc}
 80019e4:	20000210 	.word	0x20000210

080019e8 <_sbrk_r>:
 80019e8:	b538      	push	{r3, r4, r5, lr}
 80019ea:	4d06      	ldr	r5, [pc, #24]	; (8001a04 <_sbrk_r+0x1c>)
 80019ec:	2300      	movs	r3, #0
 80019ee:	4604      	mov	r4, r0
 80019f0:	4608      	mov	r0, r1
 80019f2:	602b      	str	r3, [r5, #0]
 80019f4:	f7fe ff10 	bl	8000818 <_sbrk>
 80019f8:	1c43      	adds	r3, r0, #1
 80019fa:	d102      	bne.n	8001a02 <_sbrk_r+0x1a>
 80019fc:	682b      	ldr	r3, [r5, #0]
 80019fe:	b103      	cbz	r3, 8001a02 <_sbrk_r+0x1a>
 8001a00:	6023      	str	r3, [r4, #0]
 8001a02:	bd38      	pop	{r3, r4, r5, pc}
 8001a04:	20000210 	.word	0x20000210

08001a08 <_init>:
 8001a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0a:	bf00      	nop
 8001a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a0e:	bc08      	pop	{r3}
 8001a10:	469e      	mov	lr, r3
 8001a12:	4770      	bx	lr

08001a14 <_fini>:
 8001a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a16:	bf00      	nop
 8001a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a1a:	bc08      	pop	{r3}
 8001a1c:	469e      	mov	lr, r3
 8001a1e:	4770      	bx	lr
