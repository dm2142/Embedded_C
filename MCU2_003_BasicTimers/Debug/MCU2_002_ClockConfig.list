
MCU2_002_ClockConfig.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a14  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c7c  08003c7c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c7c  08003c7c  00013c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c84  08003c84  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c84  08003c84  00013c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c88  08003c88  00013c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000005c  08003ce8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08003ce8  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000094ef  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001aba  00000000  00000000  000295be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000760  00000000  00000000  0002b078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000059f  00000000  00000000  0002b7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002162a  00000000  00000000  0002bd77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ac12  00000000  00000000  0004d3a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c87fc  00000000  00000000  00057fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000021fc  00000000  00000000  001207b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001229ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003bcc 	.word	0x08003bcc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08003bcc 	.word	0x08003bcc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <SysTick_Handler>:
 *      Author: DM
 */

#include "main.h"

void SysTick_Handler(void){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0

	HAL_IncTick();
 80005c0:	f000 fbbe 	bl	8000d40 <HAL_IncTick>

}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <USART2_IRQHandler>:


void USART2_IRQHandler(void){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0

	extern UART_HandleTypeDef husart2;
	HAL_UART_IRQHandler(&husart2);
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <USART2_IRQHandler+0x10>)
 80005ce:	f001 ff33 	bl	8002438 <HAL_UART_IRQHandler>

}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000078 	.word	0x20000078

080005dc <main>:
#include "main.h"

static void RCC_Print_Clocks(void);
UART_HandleTypeDef husart2 = {0};

int main(void){
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

	HAL_Init();
 80005e0:	f000 fb5c 	bl	8000c9c <HAL_Init>
//	SystemClock_Config((uint32_t)180e3);
//	UART2_Init();

	while( true ){

		SystemClock_Config((uint32_t)50e3);
 80005e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80005e8:	f000 f820 	bl	800062c <SystemClock_Config>
		HAL_Delay(3000);
 80005ec:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005f0:	f000 fbc6 	bl	8000d80 <HAL_Delay>

		SystemClock_Config((uint32_t)84e3);
 80005f4:	480a      	ldr	r0, [pc, #40]	; (8000620 <main+0x44>)
 80005f6:	f000 f819 	bl	800062c <SystemClock_Config>
		HAL_Delay(3000);
 80005fa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005fe:	f000 fbbf 	bl	8000d80 <HAL_Delay>

		SystemClock_Config((uint32_t)120e3);
 8000602:	4808      	ldr	r0, [pc, #32]	; (8000624 <main+0x48>)
 8000604:	f000 f812 	bl	800062c <SystemClock_Config>
		HAL_Delay(3000);
 8000608:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800060c:	f000 fbb8 	bl	8000d80 <HAL_Delay>

		SystemClock_Config((uint32_t)180e3);
 8000610:	4805      	ldr	r0, [pc, #20]	; (8000628 <main+0x4c>)
 8000612:	f000 f80b 	bl	800062c <SystemClock_Config>
		HAL_Delay(3000);
 8000616:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800061a:	f000 fbb1 	bl	8000d80 <HAL_Delay>
		SystemClock_Config((uint32_t)50e3);
 800061e:	e7e1      	b.n	80005e4 <main+0x8>
 8000620:	00014820 	.word	0x00014820
 8000624:	0001d4c0 	.word	0x0001d4c0
 8000628:	0002bf20 	.word	0x0002bf20

0800062c <SystemClock_Config>:

	return 0;
}


void SystemClock_Config(uint32_t ClockFreq){
 800062c:	b580      	push	{r7, lr}
 800062e:	b0a8      	sub	sp, #160	; 0xa0
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	//PWR_REGULATOR_VOLTAGE_SCALE2         PWR_CR_VOS_1           /* Scale 2 mode: the maximum value of fHCLK is 144 MHz. It can be extended to                                                                       168 MHz by activating the over-drive mode. */
	//PWR_REGULATOR_VOLTAGE_SCALE3         PWR_CR_VOS_0           /* Scale 3 mode: the maximum value of fHCLK is 120 MHz. */

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	623b      	str	r3, [r7, #32]
 8000638:	4bad      	ldr	r3, [pc, #692]	; (80008f0 <SystemClock_Config+0x2c4>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4aac      	ldr	r2, [pc, #688]	; (80008f0 <SystemClock_Config+0x2c4>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4baa      	ldr	r3, [pc, #680]	; (80008f0 <SystemClock_Config+0x2c4>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	623b      	str	r3, [r7, #32]
 800064e:	6a3b      	ldr	r3, [r7, #32]

	RCC_OscInitTypeDef osc_status = {0}, osc_init = {0};
 8000650:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000654:	2234      	movs	r2, #52	; 0x34
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f002 fe33 	bl	80032c4 <memset>
 800065e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000662:	2234      	movs	r2, #52	; 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fe2c 	bl	80032c4 <memset>
	RCC_ClkInitTypeDef clk_init = {0};
 800066c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

	HAL_RCC_GetOscConfig(&osc_status);
 800067c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fd61 	bl	8002148 <HAL_RCC_GetOscConfig>

	// Turn off PLL before change its configuration
	if( osc_status.PLL.PLLState == RCC_PLL_ON){
 8000686:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800068a:	2b02      	cmp	r3, #2
 800068c:	d13a      	bne.n	8000704 <SystemClock_Config+0xd8>


		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800068e:	230f      	movs	r3, #15
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000692:	2300      	movs	r3, #0
 8000694:	62bb      	str	r3, [r7, #40]	; 0x28
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	62fb      	str	r3, [r7, #44]	; 0x2c
		clk_init.APB1CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	633b      	str	r3, [r7, #48]	; 0x30
		clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	637b      	str	r3, [r7, #52]	; 0x34

		// Change to HSI clock as SYSCLOCK
		if (HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_0) != HAL_OK)		Error_Handler();
 80006a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 ff65 	bl	8001578 <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x8c>
 80006b4:	f000 fa0a 	bl	8000acc <Error_Handler>

		osc_init.OscillatorType = RCC_OSCILLATORTYPE_NONE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
		osc_init.PLL.PLLState = RCC_PLL_OFF;
 80006bc:	2301      	movs	r3, #1
 80006be:	653b      	str	r3, [r7, #80]	; 0x50

		// Turn OFF PLL
		if (HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_5) != HAL_OK)		Error_Handler();
 80006c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c4:	2105      	movs	r1, #5
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 ff56 	bl	8001578 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xaa>
 80006d2:	f000 f9fb 	bl	8000acc <Error_Handler>

		if (HAL_PWREx_DisableOverDrive() != HAL_OK)							Error_Handler();
 80006d6:	f000 feff 	bl	80014d8 <HAL_PWREx_DisableOverDrive>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xb8>
 80006e0:	f000 f9f4 	bl	8000acc <Error_Handler>
		__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
 80006e8:	4b82      	ldr	r3, [pc, #520]	; (80008f4 <SystemClock_Config+0x2c8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f0:	4a80      	ldr	r2, [pc, #512]	; (80008f4 <SystemClock_Config+0x2c8>)
 80006f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	4b7e      	ldr	r3, [pc, #504]	; (80008f4 <SystemClock_Config+0x2c8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000700:	61fb      	str	r3, [r7, #28]
 8000702:	69fb      	ldr	r3, [r7, #28]
	}

	switch (ClockFreq) {
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a7c      	ldr	r2, [pc, #496]	; (80008f8 <SystemClock_Config+0x2cc>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d019      	beq.n	8000740 <SystemClock_Config+0x114>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a7a      	ldr	r2, [pc, #488]	; (80008f8 <SystemClock_Config+0x2cc>)
 8000710:	4293      	cmp	r3, r2
 8000712:	f200 813d 	bhi.w	8000990 <SystemClock_Config+0x364>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a78      	ldr	r2, [pc, #480]	; (80008fc <SystemClock_Config+0x2d0>)
 800071a:	4293      	cmp	r3, r2
 800071c:	f000 80f2 	beq.w	8000904 <SystemClock_Config+0x2d8>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a76      	ldr	r2, [pc, #472]	; (80008fc <SystemClock_Config+0x2d0>)
 8000724:	4293      	cmp	r3, r2
 8000726:	f200 8133 	bhi.w	8000990 <SystemClock_Config+0x364>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000730:	4293      	cmp	r3, r2
 8000732:	d051      	beq.n	80007d8 <SystemClock_Config+0x1ac>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a72      	ldr	r2, [pc, #456]	; (8000900 <SystemClock_Config+0x2d4>)
 8000738:	4293      	cmp	r3, r2
 800073a:	f000 8093 	beq.w	8000864 <SystemClock_Config+0x238>

				if (HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_3) != HAL_OK)		Error_Handler();

			break;
		default:
			break;
 800073e:	e127      	b.n	8000990 <SystemClock_Config+0x364>
				__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
 8000744:	4b6b      	ldr	r3, [pc, #428]	; (80008f4 <SystemClock_Config+0x2c8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a6a      	ldr	r2, [pc, #424]	; (80008f4 <SystemClock_Config+0x2c8>)
 800074a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b68      	ldr	r3, [pc, #416]	; (80008f4 <SystemClock_Config+0x2c8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000758:	61bb      	str	r3, [r7, #24]
 800075a:	69bb      	ldr	r3, [r7, #24]
				if (HAL_PWREx_EnableOverDrive() != HAL_OK)							Error_Handler();
 800075c:	f000 fe6c 	bl	8001438 <HAL_PWREx_EnableOverDrive>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x13e>
 8000766:	f000 f9b1 	bl	8000acc <Error_Handler>
				osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076a:	2301      	movs	r3, #1
 800076c:	63bb      	str	r3, [r7, #56]	; 0x38
				osc_init.HSEState = RCC_HSE_ON;
 800076e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
				osc_init.PLL.PLLState = RCC_PLL_ON;
 8000774:	2302      	movs	r3, #2
 8000776:	653b      	str	r3, [r7, #80]	; 0x50
				osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000778:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800077c:	657b      	str	r3, [r7, #84]	; 0x54
				osc_init.PLL.PLLM = 4;
 800077e:	2304      	movs	r3, #4
 8000780:	65bb      	str	r3, [r7, #88]	; 0x58
				osc_init.PLL.PLLN = 180;
 8000782:	23b4      	movs	r3, #180	; 0xb4
 8000784:	65fb      	str	r3, [r7, #92]	; 0x5c
				osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8000786:	2302      	movs	r3, #2
 8000788:	663b      	str	r3, [r7, #96]	; 0x60
				osc_init.PLL.PLLQ = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	667b      	str	r3, [r7, #100]	; 0x64
				osc_init.PLL.PLLR = 2;
 800078e:	2302      	movs	r3, #2
 8000790:	66bb      	str	r3, [r7, #104]	; 0x68
				if (HAL_RCC_OscConfig(&osc_init) != HAL_OK)							Error_Handler();
 8000792:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000796:	4618      	mov	r0, r3
 8000798:	f001 fa38 	bl	8001c0c <HAL_RCC_OscConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x17a>
 80007a2:	f000 f993 	bl	8000acc <Error_Handler>
				clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80007a6:	230f      	movs	r3, #15
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
				clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007aa:	2302      	movs	r3, #2
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
				clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	62fb      	str	r3, [r7, #44]	; 0x2c
				clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b6:	633b      	str	r3, [r7, #48]	; 0x30
				clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007bc:	637b      	str	r3, [r7, #52]	; 0x34
				if (HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_5) != HAL_OK)		Error_Handler();
 80007be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c2:	2105      	movs	r1, #5
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 fed7 	bl	8001578 <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	f000 80e1 	beq.w	8000994 <SystemClock_Config+0x368>
 80007d2:	f000 f97b 	bl	8000acc <Error_Handler>
			break;
 80007d6:	e0dd      	b.n	8000994 <SystemClock_Config+0x368>
				__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	4b45      	ldr	r3, [pc, #276]	; (80008f4 <SystemClock_Config+0x2c8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007e4:	4a43      	ldr	r2, [pc, #268]	; (80008f4 <SystemClock_Config+0x2c8>)
 80007e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	4b41      	ldr	r3, [pc, #260]	; (80008f4 <SystemClock_Config+0x2c8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	697b      	ldr	r3, [r7, #20]
				osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f8:	2301      	movs	r3, #1
 80007fa:	63bb      	str	r3, [r7, #56]	; 0x38
				osc_init.HSEState = RCC_HSE_ON;
 80007fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000800:	63fb      	str	r3, [r7, #60]	; 0x3c
				osc_init.PLL.PLLState = RCC_PLL_ON;
 8000802:	2302      	movs	r3, #2
 8000804:	653b      	str	r3, [r7, #80]	; 0x50
				osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000806:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800080a:	657b      	str	r3, [r7, #84]	; 0x54
				osc_init.PLL.PLLM = 4;
 800080c:	2304      	movs	r3, #4
 800080e:	65bb      	str	r3, [r7, #88]	; 0x58
				osc_init.PLL.PLLN = 50;
 8000810:	2332      	movs	r3, #50	; 0x32
 8000812:	65fb      	str	r3, [r7, #92]	; 0x5c
				osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8000814:	2302      	movs	r3, #2
 8000816:	663b      	str	r3, [r7, #96]	; 0x60
				osc_init.PLL.PLLQ = 2;
 8000818:	2302      	movs	r3, #2
 800081a:	667b      	str	r3, [r7, #100]	; 0x64
				osc_init.PLL.PLLR = 2;
 800081c:	2302      	movs	r3, #2
 800081e:	66bb      	str	r3, [r7, #104]	; 0x68
				if (HAL_RCC_OscConfig(&osc_init) != HAL_OK)							Error_Handler();
 8000820:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000824:	4618      	mov	r0, r3
 8000826:	f001 f9f1 	bl	8001c0c <HAL_RCC_OscConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0x208>
 8000830:	f000 f94c 	bl	8000acc <Error_Handler>
				clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000834:	230f      	movs	r3, #15
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
				clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000838:	2302      	movs	r3, #2
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
				clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
				clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000844:	633b      	str	r3, [r7, #48]	; 0x30
				clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	637b      	str	r3, [r7, #52]	; 0x34
				if (HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_1) != HAL_OK)		Error_Handler();
 800084a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084e:	2101      	movs	r1, #1
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fe91 	bl	8001578 <HAL_RCC_ClockConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	f000 809d 	beq.w	8000998 <SystemClock_Config+0x36c>
 800085e:	f000 f935 	bl	8000acc <Error_Handler>
			break;
 8000862:	e099      	b.n	8000998 <SystemClock_Config+0x36c>
				__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <SystemClock_Config+0x2c8>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000870:	4a20      	ldr	r2, [pc, #128]	; (80008f4 <SystemClock_Config+0x2c8>)
 8000872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000876:	6013      	str	r3, [r2, #0]
 8000878:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <SystemClock_Config+0x2c8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	693b      	ldr	r3, [r7, #16]
				osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000884:	2301      	movs	r3, #1
 8000886:	63bb      	str	r3, [r7, #56]	; 0x38
				osc_init.HSEState = RCC_HSE_ON;
 8000888:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800088c:	63fb      	str	r3, [r7, #60]	; 0x3c
				osc_init.PLL.PLLState = RCC_PLL_ON;
 800088e:	2302      	movs	r3, #2
 8000890:	653b      	str	r3, [r7, #80]	; 0x50
				osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000892:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000896:	657b      	str	r3, [r7, #84]	; 0x54
				osc_init.PLL.PLLM = 4;
 8000898:	2304      	movs	r3, #4
 800089a:	65bb      	str	r3, [r7, #88]	; 0x58
				osc_init.PLL.PLLN = 84;
 800089c:	2354      	movs	r3, #84	; 0x54
 800089e:	65fb      	str	r3, [r7, #92]	; 0x5c
				osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	663b      	str	r3, [r7, #96]	; 0x60
				osc_init.PLL.PLLQ = 2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	667b      	str	r3, [r7, #100]	; 0x64
				osc_init.PLL.PLLR = 2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	66bb      	str	r3, [r7, #104]	; 0x68
				if (HAL_RCC_OscConfig(&osc_init) != HAL_OK)							Error_Handler();
 80008ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 f9ab 	bl	8001c0c <HAL_RCC_OscConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x294>
 80008bc:	f000 f906 	bl	8000acc <Error_Handler>
				clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80008c0:	230f      	movs	r3, #15
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
				clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c4:	2302      	movs	r3, #2
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
				clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
				clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80008cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d0:	633b      	str	r3, [r7, #48]	; 0x30
				clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	637b      	str	r3, [r7, #52]	; 0x34
				if (HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_2) != HAL_OK)		Error_Handler();
 80008d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008da:	2102      	movs	r1, #2
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 fe4b 	bl	8001578 <HAL_RCC_ClockConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d059      	beq.n	800099c <SystemClock_Config+0x370>
 80008e8:	f000 f8f0 	bl	8000acc <Error_Handler>
			break;
 80008ec:	e056      	b.n	800099c <SystemClock_Config+0x370>
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000
 80008f8:	0002bf20 	.word	0x0002bf20
 80008fc:	0001d4c0 	.word	0x0001d4c0
 8000900:	00014820 	.word	0x00014820
				__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <SystemClock_Config+0x388>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000910:	4a28      	ldr	r2, [pc, #160]	; (80009b4 <SystemClock_Config+0x388>)
 8000912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <SystemClock_Config+0x388>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]
				osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000924:	2301      	movs	r3, #1
 8000926:	63bb      	str	r3, [r7, #56]	; 0x38
				osc_init.HSEState = RCC_HSE_ON;
 8000928:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800092c:	63fb      	str	r3, [r7, #60]	; 0x3c
				osc_init.PLL.PLLState = RCC_PLL_ON;
 800092e:	2302      	movs	r3, #2
 8000930:	653b      	str	r3, [r7, #80]	; 0x50
				osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000932:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000936:	657b      	str	r3, [r7, #84]	; 0x54
				osc_init.PLL.PLLM = 4;
 8000938:	2304      	movs	r3, #4
 800093a:	65bb      	str	r3, [r7, #88]	; 0x58
				osc_init.PLL.PLLN = 120;
 800093c:	2378      	movs	r3, #120	; 0x78
 800093e:	65fb      	str	r3, [r7, #92]	; 0x5c
				osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8000940:	2302      	movs	r3, #2
 8000942:	663b      	str	r3, [r7, #96]	; 0x60
				osc_init.PLL.PLLQ = 2;
 8000944:	2302      	movs	r3, #2
 8000946:	667b      	str	r3, [r7, #100]	; 0x64
				osc_init.PLL.PLLR = 2;
 8000948:	2302      	movs	r3, #2
 800094a:	66bb      	str	r3, [r7, #104]	; 0x68
				if (HAL_RCC_OscConfig(&osc_init) != HAL_OK)							Error_Handler();
 800094c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000950:	4618      	mov	r0, r3
 8000952:	f001 f95b 	bl	8001c0c <HAL_RCC_OscConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x334>
 800095c:	f000 f8b6 	bl	8000acc <Error_Handler>
				clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000960:	230f      	movs	r3, #15
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
				clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000964:	2302      	movs	r3, #2
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
				clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
				clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 800096c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000970:	633b      	str	r3, [r7, #48]	; 0x30
				clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000976:	637b      	str	r3, [r7, #52]	; 0x34
				if (HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_3) != HAL_OK)		Error_Handler();
 8000978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097c:	2103      	movs	r1, #3
 800097e:	4618      	mov	r0, r3
 8000980:	f000 fdfa 	bl	8001578 <HAL_RCC_ClockConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d00a      	beq.n	80009a0 <SystemClock_Config+0x374>
 800098a:	f000 f89f 	bl	8000acc <Error_Handler>
			break;
 800098e:	e007      	b.n	80009a0 <SystemClock_Config+0x374>
			break;
 8000990:	bf00      	nop
 8000992:	e006      	b.n	80009a2 <SystemClock_Config+0x376>
			break;
 8000994:	bf00      	nop
 8000996:	e004      	b.n	80009a2 <SystemClock_Config+0x376>
			break;
 8000998:	bf00      	nop
 800099a:	e002      	b.n	80009a2 <SystemClock_Config+0x376>
			break;
 800099c:	bf00      	nop
 800099e:	e000      	b.n	80009a2 <SystemClock_Config+0x376>
			break;
 80009a0:	bf00      	nop
	}


	UART2_Init();
 80009a2:	f000 f809 	bl	80009b8 <UART2_Init>
	RCC_Print_Clocks();
 80009a6:	f000 f82f 	bl	8000a08 <RCC_Print_Clocks>

}
 80009aa:	bf00      	nop
 80009ac:	37a0      	adds	r7, #160	; 0xa0
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40007000 	.word	0x40007000

080009b8 <UART2_Init>:

void UART2_Init(void){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

	husart2.Instance = USART2;
 80009bc:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <UART2_Init+0x48>)
 80009be:	4a11      	ldr	r2, [pc, #68]	; (8000a04 <UART2_Init+0x4c>)
 80009c0:	601a      	str	r2, [r3, #0]

	husart2.Init.BaudRate = 115200;
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <UART2_Init+0x48>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
	husart2.Init.Mode = UART_MODE_TX_RX;
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <UART2_Init+0x48>)
 80009cc:	220c      	movs	r2, #12
 80009ce:	615a      	str	r2, [r3, #20]
	husart2.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <UART2_Init+0x48>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
	husart2.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <UART2_Init+0x48>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
	husart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <UART2_Init+0x48>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
	husart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <UART2_Init+0x48>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	61da      	str	r2, [r3, #28]
	husart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <UART2_Init+0x48>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]

	if( HAL_UART_Init(&husart2) == HAL_ERROR )		while(1);
 80009ee:	4804      	ldr	r0, [pc, #16]	; (8000a00 <UART2_Init+0x48>)
 80009f0:	f001 fc46 	bl	8002280 <HAL_UART_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d100      	bne.n	80009fc <UART2_Init+0x44>
 80009fa:	e7fe      	b.n	80009fa <UART2_Init+0x42>
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000078 	.word	0x20000078
 8000a04:	40004400 	.word	0x40004400

08000a08 <RCC_Print_Clocks>:

static void RCC_Print_Clocks(void){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b0c0      	sub	sp, #256	; 0x100
 8000a0c:	af00      	add	r7, sp, #0

	uint8_t msg[250];
	sprintf((char*)msg, "SYSCLOCK: %ld \n\r", HAL_RCC_GetSysClockFreq());
 8000a0e:	f000 fecd 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 8000a12:	4602      	mov	r2, r0
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	4928      	ldr	r1, [pc, #160]	; (8000ab8 <RCC_Print_Clocks+0xb0>)
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f002 fc33 	bl	8003284 <siprintf>
	HAL_UART_Transmit(&husart2, msg, strlen((char*) msg), HAL_MAX_DELAY);
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fbf5 	bl	8000210 <strlen>
 8000a26:	4603      	mov	r3, r0
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	1d39      	adds	r1, r7, #4
 8000a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a30:	4822      	ldr	r0, [pc, #136]	; (8000abc <RCC_Print_Clocks+0xb4>)
 8000a32:	f001 fc75 	bl	8002320 <HAL_UART_Transmit>

	sprintf((char*)msg, "AHCLOCK: %ld \n\r", HAL_RCC_GetHCLKFreq());
 8000a36:	f000 fe85 	bl	8001744 <HAL_RCC_GetHCLKFreq>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4920      	ldr	r1, [pc, #128]	; (8000ac0 <RCC_Print_Clocks+0xb8>)
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 fc1f 	bl	8003284 <siprintf>
	HAL_UART_Transmit(&husart2, msg, strlen((char*) msg), HAL_MAX_DELAY);
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fbe1 	bl	8000210 <strlen>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	1d39      	adds	r1, r7, #4
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295
 8000a58:	4818      	ldr	r0, [pc, #96]	; (8000abc <RCC_Print_Clocks+0xb4>)
 8000a5a:	f001 fc61 	bl	8002320 <HAL_UART_Transmit>

	sprintf((char*)msg, "PCLOCK 1: %ld \n\r", HAL_RCC_GetPCLK1Freq());
 8000a5e:	f000 fe7d 	bl	800175c <HAL_RCC_GetPCLK1Freq>
 8000a62:	4602      	mov	r2, r0
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4917      	ldr	r1, [pc, #92]	; (8000ac4 <RCC_Print_Clocks+0xbc>)
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f002 fc0b 	bl	8003284 <siprintf>
	HAL_UART_Transmit(&husart2, msg, strlen((char*) msg), HAL_MAX_DELAY);
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fbcd 	bl	8000210 <strlen>
 8000a76:	4603      	mov	r3, r0
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	1d39      	adds	r1, r7, #4
 8000a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a80:	480e      	ldr	r0, [pc, #56]	; (8000abc <RCC_Print_Clocks+0xb4>)
 8000a82:	f001 fc4d 	bl	8002320 <HAL_UART_Transmit>

	sprintf((char*)msg, "PCLOCK 2: %ld \n\r", HAL_RCC_GetPCLK2Freq());
 8000a86:	f000 fe7d 	bl	8001784 <HAL_RCC_GetPCLK2Freq>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	490e      	ldr	r1, [pc, #56]	; (8000ac8 <RCC_Print_Clocks+0xc0>)
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 fbf7 	bl	8003284 <siprintf>
	HAL_UART_Transmit(&husart2, msg, strlen((char*) msg), HAL_MAX_DELAY);
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fbb9 	bl	8000210 <strlen>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	1d39      	adds	r1, r7, #4
 8000aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <RCC_Print_Clocks+0xb4>)
 8000aaa:	f001 fc39 	bl	8002320 <HAL_UART_Transmit>

}
 8000aae:	bf00      	nop
 8000ab0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	08003be4 	.word	0x08003be4
 8000abc:	20000078 	.word	0x20000078
 8000ac0:	08003bf8 	.word	0x08003bf8
 8000ac4:	08003c08 	.word	0x08003c08
 8000ac8:	08003c1c 	.word	0x08003c1c

08000acc <Error_Handler>:

void Error_Handler(void){
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

	while(1);
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x4>
	...

08000ad4 <HAL_MspInit>:
 */

#include "main.h"

void HAL_MspInit(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f000 fa45 	bl	8000f68 <HAL_NVIC_SetPriorityGrouping>

	SCB->SHCSR |= (0x7 << 16);	// Enable Fauts exceptions: usage fault, memory usage and bus fault.
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <HAL_MspInit+0x40>)
 8000ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae2:	4a0c      	ldr	r2, [pc, #48]	; (8000b14 <HAL_MspInit+0x40>)
 8000ae4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000ae8:	6253      	str	r3, [r2, #36]	; 0x24

	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	f06f 0009 	mvn.w	r0, #9
 8000af2:	f000 fa44 	bl	8000f7e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	f06f 000b 	mvn.w	r0, #11
 8000afe:	f000 fa3e 	bl	8000f7e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2100      	movs	r1, #0
 8000b06:	f06f 000a 	mvn.w	r0, #10
 8000b0a:	f000 fa38 	bl	8000f7e <HAL_NVIC_SetPriority>
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a1d      	ldr	r2, [pc, #116]	; (8000bac <HAL_UART_MspInit+0x94>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d133      	bne.n	8000ba2 <HAL_UART_MspInit+0x8a>
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <HAL_UART_MspInit+0x98>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a1b      	ldr	r2, [pc, #108]	; (8000bb0 <HAL_UART_MspInit+0x98>)
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <HAL_UART_MspInit+0x98>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_UART_MspInit+0x98>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <HAL_UART_MspInit+0x98>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_UART_MspInit+0x98>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b72:	230c      	movs	r3, #12
 8000b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b82:	2307      	movs	r3, #7
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4809      	ldr	r0, [pc, #36]	; (8000bb4 <HAL_UART_MspInit+0x9c>)
 8000b8e:	f000 fabf 	bl	8001110 <HAL_GPIO_Init>

  // Enable the IRQ and set up the priority (NVIC Settings)
   HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b92:	2026      	movs	r0, #38	; 0x26
 8000b94:	f000 fa0f 	bl	8000fb6 <HAL_NVIC_EnableIRQ>
   HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	210f      	movs	r1, #15
 8000b9c:	2026      	movs	r0, #38	; 0x26
 8000b9e:	f000 f9ee 	bl	8000f7e <HAL_NVIC_SetPriority>

  }

}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	; 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40004400 	.word	0x40004400
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020000 	.word	0x40020000

08000bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc0:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <_sbrk+0x5c>)
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <_sbrk+0x60>)
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <_sbrk+0x64>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <_sbrk+0x68>)
 8000bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d207      	bcs.n	8000bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be8:	f002 fb74 	bl	80032d4 <__errno>
 8000bec:	4603      	mov	r3, r0
 8000bee:	220c      	movs	r2, #12
 8000bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	e009      	b.n	8000c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <_sbrk+0x64>)
 8000c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20020000 	.word	0x20020000
 8000c18:	00000400 	.word	0x00000400
 8000c1c:	200000c0 	.word	0x200000c0
 8000c20:	20000210 	.word	0x20000210

08000c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <SystemInit+0x20>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <SystemInit+0x20>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8000c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c80 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c4c:	f7ff ffea 	bl	8000c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c52:	490d      	ldr	r1, [pc, #52]	; (8000c88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c68:	4c0a      	ldr	r4, [pc, #40]	; (8000c94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c76:	f002 fb33 	bl	80032e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7a:	f7ff fcaf 	bl	80005dc <main>
  bx  lr    
 8000c7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c8c:	08003c8c 	.word	0x08003c8c
  ldr r2, =_sbss
 8000c90:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c94:	20000210 	.word	0x20000210

08000c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC_IRQHandler>
	...

08000c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <HAL_Init+0x40>)
 8000ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <HAL_Init+0x40>)
 8000cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_Init+0x40>)
 8000cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 f94f 	bl	8000f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f000 f808 	bl	8000ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd0:	f7ff ff00 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023c00 	.word	0x40023c00

08000ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_InitTick+0x54>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_InitTick+0x58>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f967 	bl	8000fd2 <HAL_SYSTICK_Config>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e00e      	b.n	8000d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b0f      	cmp	r3, #15
 8000d12:	d80a      	bhi.n	8000d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d14:	2200      	movs	r2, #0
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1c:	f000 f92f 	bl	8000f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d20:	4a06      	ldr	r2, [pc, #24]	; (8000d3c <HAL_InitTick+0x5c>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e000      	b.n	8000d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	20000004 	.word	0x20000004

08000d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x20>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x24>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <HAL_IncTick+0x24>)
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008
 8000d64:	200000c4 	.word	0x200000c4

08000d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <HAL_GetTick+0x14>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	200000c4 	.word	0x200000c4

08000d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d88:	f7ff ffee 	bl	8000d68 <HAL_GetTick>
 8000d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d98:	d005      	beq.n	8000da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_Delay+0x44>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4413      	add	r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000da6:	bf00      	nop
 8000da8:	f7ff ffde 	bl	8000d68 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d8f7      	bhi.n	8000da8 <HAL_Delay+0x28>
  {
  }
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000008 	.word	0x20000008

08000dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de4:	4013      	ands	r3, r2
 8000de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	60d3      	str	r3, [r2, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <__NVIC_GetPriorityGrouping+0x18>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	0a1b      	lsrs	r3, r3, #8
 8000e1a:	f003 0307 	and.w	r3, r3, #7
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	db0b      	blt.n	8000e56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f003 021f 	and.w	r2, r3, #31
 8000e44:	4907      	ldr	r1, [pc, #28]	; (8000e64 <__NVIC_EnableIRQ+0x38>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	095b      	lsrs	r3, r3, #5
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000e100 	.word	0xe000e100

08000e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db0a      	blt.n	8000e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	490c      	ldr	r1, [pc, #48]	; (8000eb4 <__NVIC_SetPriority+0x4c>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	0112      	lsls	r2, r2, #4
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e90:	e00a      	b.n	8000ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4908      	ldr	r1, [pc, #32]	; (8000eb8 <__NVIC_SetPriority+0x50>)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	3b04      	subs	r3, #4
 8000ea0:	0112      	lsls	r2, r2, #4
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	761a      	strb	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	; 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f1c3 0307 	rsb	r3, r3, #7
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	bf28      	it	cs
 8000eda:	2304      	movcs	r3, #4
 8000edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	2b06      	cmp	r3, #6
 8000ee4:	d902      	bls.n	8000eec <NVIC_EncodePriority+0x30>
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3b03      	subs	r3, #3
 8000eea:	e000      	b.n	8000eee <NVIC_EncodePriority+0x32>
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43da      	mvns	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f04:	f04f 31ff 	mov.w	r1, #4294967295
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	43d9      	mvns	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	4313      	orrs	r3, r2
         );
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3724      	adds	r7, #36	; 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f34:	d301      	bcc.n	8000f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00f      	b.n	8000f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <SysTick_Config+0x40>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f42:	210f      	movs	r1, #15
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f7ff ff8e 	bl	8000e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <SysTick_Config+0x40>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f52:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <SysTick_Config+0x40>)
 8000f54:	2207      	movs	r2, #7
 8000f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	e000e010 	.word	0xe000e010

08000f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ff29 	bl	8000dc8 <__NVIC_SetPriorityGrouping>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b086      	sub	sp, #24
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f90:	f7ff ff3e 	bl	8000e10 <__NVIC_GetPriorityGrouping>
 8000f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	6978      	ldr	r0, [r7, #20]
 8000f9c:	f7ff ff8e 	bl	8000ebc <NVIC_EncodePriority>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff5d 	bl	8000e68 <__NVIC_SetPriority>
}
 8000fae:	bf00      	nop
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff31 	bl	8000e2c <__NVIC_EnableIRQ>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ffa2 	bl	8000f24 <SysTick_Config>
 8000fe0:	4603      	mov	r3, r0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b084      	sub	sp, #16
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff feb6 	bl	8000d68 <HAL_GetTick>
 8000ffc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d008      	beq.n	800101c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e052      	b.n	80010c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0216 	bic.w	r2, r2, #22
 800102a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	695a      	ldr	r2, [r3, #20]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800103a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	2b00      	cmp	r3, #0
 8001042:	d103      	bne.n	800104c <HAL_DMA_Abort+0x62>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001048:	2b00      	cmp	r3, #0
 800104a:	d007      	beq.n	800105c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f022 0208 	bic.w	r2, r2, #8
 800105a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0201 	bic.w	r2, r2, #1
 800106a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800106c:	e013      	b.n	8001096 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800106e:	f7ff fe7b 	bl	8000d68 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b05      	cmp	r3, #5
 800107a:	d90c      	bls.n	8001096 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2220      	movs	r2, #32
 8001080:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2203      	movs	r2, #3
 8001086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e015      	b.n	80010c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1e4      	bne.n	800106e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a8:	223f      	movs	r2, #63	; 0x3f
 80010aa:	409a      	lsls	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d004      	beq.n	80010e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e00c      	b.n	8001102 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2205      	movs	r2, #5
 80010ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0201 	bic.w	r2, r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	e165      	b.n	80013f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800112c:	2201      	movs	r2, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	429a      	cmp	r2, r3
 8001146:	f040 8154 	bne.w	80013f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	2b01      	cmp	r3, #1
 8001154:	d005      	beq.n	8001162 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115e:	2b02      	cmp	r3, #2
 8001160:	d130      	bne.n	80011c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001198:	2201      	movs	r2, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	091b      	lsrs	r3, r3, #4
 80011ae:	f003 0201 	and.w	r2, r3, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d017      	beq.n	8001200 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d123      	bne.n	8001254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	08da      	lsrs	r2, r3, #3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3208      	adds	r2, #8
 8001214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	220f      	movs	r2, #15
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	08da      	lsrs	r2, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3208      	adds	r2, #8
 800124e:	69b9      	ldr	r1, [r7, #24]
 8001250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0203 	and.w	r2, r3, #3
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 80ae 	beq.w	80013f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b5d      	ldr	r3, [pc, #372]	; (8001410 <HAL_GPIO_Init+0x300>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	4a5c      	ldr	r2, [pc, #368]	; (8001410 <HAL_GPIO_Init+0x300>)
 80012a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a4:	6453      	str	r3, [r2, #68]	; 0x44
 80012a6:	4b5a      	ldr	r3, [pc, #360]	; (8001410 <HAL_GPIO_Init+0x300>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012b2:	4a58      	ldr	r2, [pc, #352]	; (8001414 <HAL_GPIO_Init+0x304>)
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	3302      	adds	r3, #2
 80012ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	220f      	movs	r2, #15
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4f      	ldr	r2, [pc, #316]	; (8001418 <HAL_GPIO_Init+0x308>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d025      	beq.n	800132a <HAL_GPIO_Init+0x21a>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4e      	ldr	r2, [pc, #312]	; (800141c <HAL_GPIO_Init+0x30c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d01f      	beq.n	8001326 <HAL_GPIO_Init+0x216>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4d      	ldr	r2, [pc, #308]	; (8001420 <HAL_GPIO_Init+0x310>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d019      	beq.n	8001322 <HAL_GPIO_Init+0x212>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4c      	ldr	r2, [pc, #304]	; (8001424 <HAL_GPIO_Init+0x314>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d013      	beq.n	800131e <HAL_GPIO_Init+0x20e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4b      	ldr	r2, [pc, #300]	; (8001428 <HAL_GPIO_Init+0x318>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d00d      	beq.n	800131a <HAL_GPIO_Init+0x20a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4a      	ldr	r2, [pc, #296]	; (800142c <HAL_GPIO_Init+0x31c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d007      	beq.n	8001316 <HAL_GPIO_Init+0x206>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a49      	ldr	r2, [pc, #292]	; (8001430 <HAL_GPIO_Init+0x320>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d101      	bne.n	8001312 <HAL_GPIO_Init+0x202>
 800130e:	2306      	movs	r3, #6
 8001310:	e00c      	b.n	800132c <HAL_GPIO_Init+0x21c>
 8001312:	2307      	movs	r3, #7
 8001314:	e00a      	b.n	800132c <HAL_GPIO_Init+0x21c>
 8001316:	2305      	movs	r3, #5
 8001318:	e008      	b.n	800132c <HAL_GPIO_Init+0x21c>
 800131a:	2304      	movs	r3, #4
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x21c>
 800131e:	2303      	movs	r3, #3
 8001320:	e004      	b.n	800132c <HAL_GPIO_Init+0x21c>
 8001322:	2302      	movs	r3, #2
 8001324:	e002      	b.n	800132c <HAL_GPIO_Init+0x21c>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <HAL_GPIO_Init+0x21c>
 800132a:	2300      	movs	r3, #0
 800132c:	69fa      	ldr	r2, [r7, #28]
 800132e:	f002 0203 	and.w	r2, r2, #3
 8001332:	0092      	lsls	r2, r2, #2
 8001334:	4093      	lsls	r3, r2
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800133c:	4935      	ldr	r1, [pc, #212]	; (8001414 <HAL_GPIO_Init+0x304>)
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	089b      	lsrs	r3, r3, #2
 8001342:	3302      	adds	r3, #2
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800134a:	4b3a      	ldr	r3, [pc, #232]	; (8001434 <HAL_GPIO_Init+0x324>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800136e:	4a31      	ldr	r2, [pc, #196]	; (8001434 <HAL_GPIO_Init+0x324>)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001374:	4b2f      	ldr	r3, [pc, #188]	; (8001434 <HAL_GPIO_Init+0x324>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001398:	4a26      	ldr	r2, [pc, #152]	; (8001434 <HAL_GPIO_Init+0x324>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800139e:	4b25      	ldr	r3, [pc, #148]	; (8001434 <HAL_GPIO_Init+0x324>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013c2:	4a1c      	ldr	r2, [pc, #112]	; (8001434 <HAL_GPIO_Init+0x324>)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <HAL_GPIO_Init+0x324>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ec:	4a11      	ldr	r2, [pc, #68]	; (8001434 <HAL_GPIO_Init+0x324>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3301      	adds	r3, #1
 80013f6:	61fb      	str	r3, [r7, #28]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	2b0f      	cmp	r3, #15
 80013fc:	f67f ae96 	bls.w	800112c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	3724      	adds	r7, #36	; 0x24
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800
 8001414:	40013800 	.word	0x40013800
 8001418:	40020000 	.word	0x40020000
 800141c:	40020400 	.word	0x40020400
 8001420:	40020800 	.word	0x40020800
 8001424:	40020c00 	.word	0x40020c00
 8001428:	40021000 	.word	0x40021000
 800142c:	40021400 	.word	0x40021400
 8001430:	40021800 	.word	0x40021800
 8001434:	40013c00 	.word	0x40013c00

08001438 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	4a1f      	ldr	r2, [pc, #124]	; (80014c8 <HAL_PWREx_EnableOverDrive+0x90>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800145e:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <HAL_PWREx_EnableOverDrive+0x94>)
 8001460:	2201      	movs	r2, #1
 8001462:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001464:	f7ff fc80 	bl	8000d68 <HAL_GetTick>
 8001468:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800146a:	e009      	b.n	8001480 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800146c:	f7ff fc7c 	bl	8000d68 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800147a:	d901      	bls.n	8001480 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e01f      	b.n	80014c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800148c:	d1ee      	bne.n	800146c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001490:	2201      	movs	r2, #1
 8001492:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001494:	f7ff fc68 	bl	8000d68 <HAL_GetTick>
 8001498:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800149a:	e009      	b.n	80014b0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800149c:	f7ff fc64 	bl	8000d68 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014aa:	d901      	bls.n	80014b0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e007      	b.n	80014c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <HAL_PWREx_EnableOverDrive+0x98>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014bc:	d1ee      	bne.n	800149c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40023800 	.word	0x40023800
 80014cc:	420e0040 	.word	0x420e0040
 80014d0:	40007000 	.word	0x40007000
 80014d4:	420e0044 	.word	0x420e0044

080014d8 <HAL_PWREx_DisableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableOverDrive(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
  
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <HAL_PWREx_DisableOverDrive+0x90>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a1f      	ldr	r2, [pc, #124]	; (8001568 <HAL_PWREx_DisableOverDrive+0x90>)
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <HAL_PWREx_DisableOverDrive+0x90>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]
    
  /* Disable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_DISABLE();
 80014fe:	4b1b      	ldr	r3, [pc, #108]	; (800156c <HAL_PWREx_DisableOverDrive+0x94>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001504:	f7ff fc30 	bl	8000d68 <HAL_GetTick>
 8001508:	6078      	str	r0, [r7, #4]
 
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800150a:	e009      	b.n	8001520 <HAL_PWREx_DisableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800150c:	f7ff fc2c 	bl	8000d68 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800151a:	d901      	bls.n	8001520 <HAL_PWREx_DisableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e01f      	b.n	8001560 <HAL_PWREx_DisableOverDrive+0x88>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_PWREx_DisableOverDrive+0x98>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001528:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800152c:	d0ee      	beq.n	800150c <HAL_PWREx_DisableOverDrive+0x34>
    }
  } 
  
  /* Disable the Over-drive */
  __HAL_PWR_OVERDRIVE_DISABLE();
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_PWREx_DisableOverDrive+0x9c>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001534:	f7ff fc18 	bl	8000d68 <HAL_GetTick>
 8001538:	6078      	str	r0, [r7, #4]

  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800153a:	e009      	b.n	8001550 <HAL_PWREx_DisableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800153c:	f7ff fc14 	bl	8000d68 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800154a:	d901      	bls.n	8001550 <HAL_PWREx_DisableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e007      	b.n	8001560 <HAL_PWREx_DisableOverDrive+0x88>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <HAL_PWREx_DisableOverDrive+0x98>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155c:	d0ee      	beq.n	800153c <HAL_PWREx_DisableOverDrive+0x64>
    }
  }
  
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800
 800156c:	420e0044 	.word	0x420e0044
 8001570:	40007000 	.word	0x40007000
 8001574:	420e0040 	.word	0x420e0040

08001578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0cc      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800158c:	4b68      	ldr	r3, [pc, #416]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 030f 	and.w	r3, r3, #15
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d90c      	bls.n	80015b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159a:	4b65      	ldr	r3, [pc, #404]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	4b63      	ldr	r3, [pc, #396]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0b8      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d020      	beq.n	8001602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015cc:	4b59      	ldr	r3, [pc, #356]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4a58      	ldr	r2, [pc, #352]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e4:	4b53      	ldr	r3, [pc, #332]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	4a52      	ldr	r2, [pc, #328]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f0:	4b50      	ldr	r3, [pc, #320]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	494d      	ldr	r1, [pc, #308]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d044      	beq.n	8001698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	4b47      	ldr	r3, [pc, #284]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d119      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e07f      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d003      	beq.n	8001636 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001632:	2b03      	cmp	r3, #3
 8001634:	d107      	bne.n	8001646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001636:	4b3f      	ldr	r3, [pc, #252]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d109      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e06f      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001646:	4b3b      	ldr	r3, [pc, #236]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e067      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001656:	4b37      	ldr	r3, [pc, #220]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f023 0203 	bic.w	r2, r3, #3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4934      	ldr	r1, [pc, #208]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	4313      	orrs	r3, r2
 8001666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001668:	f7ff fb7e 	bl	8000d68 <HAL_GetTick>
 800166c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166e:	e00a      	b.n	8001686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001670:	f7ff fb7a 	bl	8000d68 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f241 3288 	movw	r2, #5000	; 0x1388
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e04f      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001686:	4b2b      	ldr	r3, [pc, #172]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 020c 	and.w	r2, r3, #12
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	429a      	cmp	r2, r3
 8001696:	d1eb      	bne.n	8001670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001698:	4b25      	ldr	r3, [pc, #148]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d20c      	bcs.n	80016c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a6:	4b22      	ldr	r3, [pc, #136]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e032      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016cc:	4b19      	ldr	r3, [pc, #100]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4916      	ldr	r1, [pc, #88]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d009      	beq.n	80016fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	490e      	ldr	r1, [pc, #56]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016fe:	f000 f855 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 8001702:	4602      	mov	r2, r0
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	490a      	ldr	r1, [pc, #40]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 8001710:	5ccb      	ldrb	r3, [r1, r3]
 8001712:	fa22 f303 	lsr.w	r3, r2, r3
 8001716:	4a09      	ldr	r2, [pc, #36]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_RCC_ClockConfig+0x1c8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fade 	bl	8000ce0 <HAL_InitTick>

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023c00 	.word	0x40023c00
 8001734:	40023800 	.word	0x40023800
 8001738:	08003c30 	.word	0x08003c30
 800173c:	20000000 	.word	0x20000000
 8001740:	20000004 	.word	0x20000004

08001744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_RCC_GetHCLKFreq+0x14>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000000 	.word	0x20000000

0800175c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001760:	f7ff fff0 	bl	8001744 <HAL_RCC_GetHCLKFreq>
 8001764:	4602      	mov	r2, r0
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	0a9b      	lsrs	r3, r3, #10
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	4903      	ldr	r1, [pc, #12]	; (8001780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001772:	5ccb      	ldrb	r3, [r1, r3]
 8001774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001778:	4618      	mov	r0, r3
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800
 8001780:	08003c40 	.word	0x08003c40

08001784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001788:	f7ff ffdc 	bl	8001744 <HAL_RCC_GetHCLKFreq>
 800178c:	4602      	mov	r2, r0
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	0b5b      	lsrs	r3, r3, #13
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	4903      	ldr	r1, [pc, #12]	; (80017a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800179a:	5ccb      	ldrb	r3, [r1, r3]
 800179c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40023800 	.word	0x40023800
 80017a8:	08003c40 	.word	0x08003c40

080017ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b0:	b0ae      	sub	sp, #184	; 0xb8
 80017b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d2:	4bcb      	ldr	r3, [pc, #812]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b0c      	cmp	r3, #12
 80017dc:	f200 8206 	bhi.w	8001bec <HAL_RCC_GetSysClockFreq+0x440>
 80017e0:	a201      	add	r2, pc, #4	; (adr r2, 80017e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80017e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e6:	bf00      	nop
 80017e8:	0800181d 	.word	0x0800181d
 80017ec:	08001bed 	.word	0x08001bed
 80017f0:	08001bed 	.word	0x08001bed
 80017f4:	08001bed 	.word	0x08001bed
 80017f8:	08001825 	.word	0x08001825
 80017fc:	08001bed 	.word	0x08001bed
 8001800:	08001bed 	.word	0x08001bed
 8001804:	08001bed 	.word	0x08001bed
 8001808:	0800182d 	.word	0x0800182d
 800180c:	08001bed 	.word	0x08001bed
 8001810:	08001bed 	.word	0x08001bed
 8001814:	08001bed 	.word	0x08001bed
 8001818:	08001a1d 	.word	0x08001a1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800181c:	4bb9      	ldr	r3, [pc, #740]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x358>)
 800181e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001822:	e1e7      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001824:	4bb8      	ldr	r3, [pc, #736]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800182a:	e1e3      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800182c:	4bb4      	ldr	r3, [pc, #720]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001838:	4bb1      	ldr	r3, [pc, #708]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d071      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001844:	4bae      	ldr	r3, [pc, #696]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	099b      	lsrs	r3, r3, #6
 800184a:	2200      	movs	r2, #0
 800184c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001850:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001854:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800185c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001866:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800186a:	4622      	mov	r2, r4
 800186c:	462b      	mov	r3, r5
 800186e:	f04f 0000 	mov.w	r0, #0
 8001872:	f04f 0100 	mov.w	r1, #0
 8001876:	0159      	lsls	r1, r3, #5
 8001878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800187c:	0150      	lsls	r0, r2, #5
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4621      	mov	r1, r4
 8001884:	1a51      	subs	r1, r2, r1
 8001886:	6439      	str	r1, [r7, #64]	; 0x40
 8001888:	4629      	mov	r1, r5
 800188a:	eb63 0301 	sbc.w	r3, r3, r1
 800188e:	647b      	str	r3, [r7, #68]	; 0x44
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800189c:	4649      	mov	r1, r9
 800189e:	018b      	lsls	r3, r1, #6
 80018a0:	4641      	mov	r1, r8
 80018a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018a6:	4641      	mov	r1, r8
 80018a8:	018a      	lsls	r2, r1, #6
 80018aa:	4641      	mov	r1, r8
 80018ac:	1a51      	subs	r1, r2, r1
 80018ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80018b0:	4649      	mov	r1, r9
 80018b2:	eb63 0301 	sbc.w	r3, r3, r1
 80018b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80018c4:	4649      	mov	r1, r9
 80018c6:	00cb      	lsls	r3, r1, #3
 80018c8:	4641      	mov	r1, r8
 80018ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018ce:	4641      	mov	r1, r8
 80018d0:	00ca      	lsls	r2, r1, #3
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	4603      	mov	r3, r0
 80018d8:	4622      	mov	r2, r4
 80018da:	189b      	adds	r3, r3, r2
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
 80018de:	462b      	mov	r3, r5
 80018e0:	460a      	mov	r2, r1
 80018e2:	eb42 0303 	adc.w	r3, r2, r3
 80018e6:	637b      	str	r3, [r7, #52]	; 0x34
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018f4:	4629      	mov	r1, r5
 80018f6:	024b      	lsls	r3, r1, #9
 80018f8:	4621      	mov	r1, r4
 80018fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018fe:	4621      	mov	r1, r4
 8001900:	024a      	lsls	r2, r1, #9
 8001902:	4610      	mov	r0, r2
 8001904:	4619      	mov	r1, r3
 8001906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800190a:	2200      	movs	r2, #0
 800190c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001910:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001914:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001918:	f7fe fcd2 	bl	80002c0 <__aeabi_uldivmod>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4613      	mov	r3, r2
 8001922:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001926:	e067      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001928:	4b75      	ldr	r3, [pc, #468]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	099b      	lsrs	r3, r3, #6
 800192e:	2200      	movs	r2, #0
 8001930:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001934:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001938:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800193c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001940:	67bb      	str	r3, [r7, #120]	; 0x78
 8001942:	2300      	movs	r3, #0
 8001944:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001946:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800194a:	4622      	mov	r2, r4
 800194c:	462b      	mov	r3, r5
 800194e:	f04f 0000 	mov.w	r0, #0
 8001952:	f04f 0100 	mov.w	r1, #0
 8001956:	0159      	lsls	r1, r3, #5
 8001958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800195c:	0150      	lsls	r0, r2, #5
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4621      	mov	r1, r4
 8001964:	1a51      	subs	r1, r2, r1
 8001966:	62b9      	str	r1, [r7, #40]	; 0x28
 8001968:	4629      	mov	r1, r5
 800196a:	eb63 0301 	sbc.w	r3, r3, r1
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800197c:	4649      	mov	r1, r9
 800197e:	018b      	lsls	r3, r1, #6
 8001980:	4641      	mov	r1, r8
 8001982:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001986:	4641      	mov	r1, r8
 8001988:	018a      	lsls	r2, r1, #6
 800198a:	4641      	mov	r1, r8
 800198c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001990:	4649      	mov	r1, r9
 8001992:	eb63 0b01 	sbc.w	fp, r3, r1
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80019a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80019a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80019aa:	4692      	mov	sl, r2
 80019ac:	469b      	mov	fp, r3
 80019ae:	4623      	mov	r3, r4
 80019b0:	eb1a 0303 	adds.w	r3, sl, r3
 80019b4:	623b      	str	r3, [r7, #32]
 80019b6:	462b      	mov	r3, r5
 80019b8:	eb4b 0303 	adc.w	r3, fp, r3
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80019ca:	4629      	mov	r1, r5
 80019cc:	028b      	lsls	r3, r1, #10
 80019ce:	4621      	mov	r1, r4
 80019d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019d4:	4621      	mov	r1, r4
 80019d6:	028a      	lsls	r2, r1, #10
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019e0:	2200      	movs	r2, #0
 80019e2:	673b      	str	r3, [r7, #112]	; 0x70
 80019e4:	677a      	str	r2, [r7, #116]	; 0x74
 80019e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80019ea:	f7fe fc69 	bl	80002c0 <__aeabi_uldivmod>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4613      	mov	r3, r2
 80019f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019f8:	4b41      	ldr	r3, [pc, #260]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	0c1b      	lsrs	r3, r3, #16
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	3301      	adds	r3, #1
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001a0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a1a:	e0eb      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a1c:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a28:	4b35      	ldr	r3, [pc, #212]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d06b      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a34:	4b32      	ldr	r3, [pc, #200]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	099b      	lsrs	r3, r3, #6
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001a40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a46:	663b      	str	r3, [r7, #96]	; 0x60
 8001a48:	2300      	movs	r3, #0
 8001a4a:	667b      	str	r3, [r7, #100]	; 0x64
 8001a4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a50:	4622      	mov	r2, r4
 8001a52:	462b      	mov	r3, r5
 8001a54:	f04f 0000 	mov.w	r0, #0
 8001a58:	f04f 0100 	mov.w	r1, #0
 8001a5c:	0159      	lsls	r1, r3, #5
 8001a5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a62:	0150      	lsls	r0, r2, #5
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4621      	mov	r1, r4
 8001a6a:	1a51      	subs	r1, r2, r1
 8001a6c:	61b9      	str	r1, [r7, #24]
 8001a6e:	4629      	mov	r1, r5
 8001a70:	eb63 0301 	sbc.w	r3, r3, r1
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a82:	4659      	mov	r1, fp
 8001a84:	018b      	lsls	r3, r1, #6
 8001a86:	4651      	mov	r1, sl
 8001a88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a8c:	4651      	mov	r1, sl
 8001a8e:	018a      	lsls	r2, r1, #6
 8001a90:	4651      	mov	r1, sl
 8001a92:	ebb2 0801 	subs.w	r8, r2, r1
 8001a96:	4659      	mov	r1, fp
 8001a98:	eb63 0901 	sbc.w	r9, r3, r1
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aa8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001aac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ab0:	4690      	mov	r8, r2
 8001ab2:	4699      	mov	r9, r3
 8001ab4:	4623      	mov	r3, r4
 8001ab6:	eb18 0303 	adds.w	r3, r8, r3
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	462b      	mov	r3, r5
 8001abe:	eb49 0303 	adc.w	r3, r9, r3
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	024b      	lsls	r3, r1, #9
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ada:	4621      	mov	r1, r4
 8001adc:	024a      	lsls	r2, r1, #9
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001aea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001aec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001af0:	f7fe fbe6 	bl	80002c0 <__aeabi_uldivmod>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4613      	mov	r3, r2
 8001afa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001afe:	e065      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x420>
 8001b00:	40023800 	.word	0x40023800
 8001b04:	00f42400 	.word	0x00f42400
 8001b08:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0c:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	2200      	movs	r2, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	4611      	mov	r1, r2
 8001b18:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b1c:	653b      	str	r3, [r7, #80]	; 0x50
 8001b1e:	2300      	movs	r3, #0
 8001b20:	657b      	str	r3, [r7, #84]	; 0x54
 8001b22:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001b26:	4642      	mov	r2, r8
 8001b28:	464b      	mov	r3, r9
 8001b2a:	f04f 0000 	mov.w	r0, #0
 8001b2e:	f04f 0100 	mov.w	r1, #0
 8001b32:	0159      	lsls	r1, r3, #5
 8001b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b38:	0150      	lsls	r0, r2, #5
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4641      	mov	r1, r8
 8001b40:	1a51      	subs	r1, r2, r1
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	4649      	mov	r1, r9
 8001b46:	eb63 0301 	sbc.w	r3, r3, r1
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b58:	4659      	mov	r1, fp
 8001b5a:	018b      	lsls	r3, r1, #6
 8001b5c:	4651      	mov	r1, sl
 8001b5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b62:	4651      	mov	r1, sl
 8001b64:	018a      	lsls	r2, r1, #6
 8001b66:	4651      	mov	r1, sl
 8001b68:	1a54      	subs	r4, r2, r1
 8001b6a:	4659      	mov	r1, fp
 8001b6c:	eb63 0501 	sbc.w	r5, r3, r1
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	00eb      	lsls	r3, r5, #3
 8001b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b7e:	00e2      	lsls	r2, r4, #3
 8001b80:	4614      	mov	r4, r2
 8001b82:	461d      	mov	r5, r3
 8001b84:	4643      	mov	r3, r8
 8001b86:	18e3      	adds	r3, r4, r3
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	464b      	mov	r3, r9
 8001b8c:	eb45 0303 	adc.w	r3, r5, r3
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	028b      	lsls	r3, r1, #10
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ba8:	4621      	mov	r1, r4
 8001baa:	028a      	lsls	r2, r1, #10
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bb8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001bba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bbe:	f7fe fb7f 	bl	80002c0 <__aeabi_uldivmod>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x458>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	0f1b      	lsrs	r3, r3, #28
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001bda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001bde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bea:	e003      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bf2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	37b8      	adds	r7, #184	; 0xb8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	00f42400 	.word	0x00f42400

08001c0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e28d      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 8083 	beq.w	8001d32 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c2c:	4b94      	ldr	r3, [pc, #592]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 030c 	and.w	r3, r3, #12
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d019      	beq.n	8001c6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c38:	4b91      	ldr	r3, [pc, #580]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d106      	bne.n	8001c52 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c44:	4b8e      	ldr	r3, [pc, #568]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c50:	d00c      	beq.n	8001c6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c52:	4b8b      	ldr	r3, [pc, #556]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c5a:	2b0c      	cmp	r3, #12
 8001c5c:	d112      	bne.n	8001c84 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c5e:	4b88      	ldr	r3, [pc, #544]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c6a:	d10b      	bne.n	8001c84 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6c:	4b84      	ldr	r3, [pc, #528]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d05b      	beq.n	8001d30 <HAL_RCC_OscConfig+0x124>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d157      	bne.n	8001d30 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e25a      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c8c:	d106      	bne.n	8001c9c <HAL_RCC_OscConfig+0x90>
 8001c8e:	4b7c      	ldr	r3, [pc, #496]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a7b      	ldr	r2, [pc, #492]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e01d      	b.n	8001cd8 <HAL_RCC_OscConfig+0xcc>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0xb4>
 8001ca6:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a75      	ldr	r2, [pc, #468]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b73      	ldr	r3, [pc, #460]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a72      	ldr	r2, [pc, #456]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_OscConfig+0xcc>
 8001cc0:	4b6f      	ldr	r3, [pc, #444]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a6e      	ldr	r2, [pc, #440]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b6c      	ldr	r3, [pc, #432]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a6b      	ldr	r2, [pc, #428]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7ff f842 	bl	8000d68 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff f83e 	bl	8000d68 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e21f      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	4b61      	ldr	r3, [pc, #388]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xdc>
 8001d06:	e014      	b.n	8001d32 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff f82e 	bl	8000d68 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff f82a 	bl	8000d68 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e20b      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	4b57      	ldr	r3, [pc, #348]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x104>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d06f      	beq.n	8001e1e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d3e:	4b50      	ldr	r3, [pc, #320]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d017      	beq.n	8001d7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d4a:	4b4d      	ldr	r3, [pc, #308]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d105      	bne.n	8001d62 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d56:	4b4a      	ldr	r3, [pc, #296]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00b      	beq.n	8001d7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d62:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d6a:	2b0c      	cmp	r3, #12
 8001d6c:	d11c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6e:	4b44      	ldr	r3, [pc, #272]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d116      	bne.n	8001da8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7a:	4b41      	ldr	r3, [pc, #260]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <HAL_RCC_OscConfig+0x186>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e1d3      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d92:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4937      	ldr	r1, [pc, #220]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	e03a      	b.n	8001e1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d020      	beq.n	8001df2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db0:	4b34      	ldr	r3, [pc, #208]	; (8001e84 <HAL_RCC_OscConfig+0x278>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db6:	f7fe ffd7 	bl	8000d68 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dbe:	f7fe ffd3 	bl	8000d68 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e1b4      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4925      	ldr	r1, [pc, #148]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	600b      	str	r3, [r1, #0]
 8001df0:	e015      	b.n	8001e1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df2:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_RCC_OscConfig+0x278>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7fe ffb6 	bl	8000d68 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e00:	f7fe ffb2 	bl	8000d68 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e193      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d036      	beq.n	8001e98 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d016      	beq.n	8001e60 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e38:	f7fe ff96 	bl	8000d68 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e40:	f7fe ff92 	bl	8000d68 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e173      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x234>
 8001e5e:	e01b      	b.n	8001e98 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e66:	f7fe ff7f 	bl	8000d68 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6c:	e00e      	b.n	8001e8c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e6e:	f7fe ff7b 	bl	8000d68 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d907      	bls.n	8001e8c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e15c      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
 8001e80:	40023800 	.word	0x40023800
 8001e84:	42470000 	.word	0x42470000
 8001e88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8c:	4b8a      	ldr	r3, [pc, #552]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1ea      	bne.n	8001e6e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 8097 	beq.w	8001fd4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eaa:	4b83      	ldr	r3, [pc, #524]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10f      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	4b7f      	ldr	r3, [pc, #508]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a7e      	ldr	r2, [pc, #504]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b7c      	ldr	r3, [pc, #496]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed6:	4b79      	ldr	r3, [pc, #484]	; (80020bc <HAL_RCC_OscConfig+0x4b0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d118      	bne.n	8001f14 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee2:	4b76      	ldr	r3, [pc, #472]	; (80020bc <HAL_RCC_OscConfig+0x4b0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a75      	ldr	r2, [pc, #468]	; (80020bc <HAL_RCC_OscConfig+0x4b0>)
 8001ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eee:	f7fe ff3b 	bl	8000d68 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef6:	f7fe ff37 	bl	8000d68 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e118      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	4b6c      	ldr	r3, [pc, #432]	; (80020bc <HAL_RCC_OscConfig+0x4b0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d106      	bne.n	8001f2a <HAL_RCC_OscConfig+0x31e>
 8001f1c:	4b66      	ldr	r3, [pc, #408]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f20:	4a65      	ldr	r2, [pc, #404]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6713      	str	r3, [r2, #112]	; 0x70
 8001f28:	e01c      	b.n	8001f64 <HAL_RCC_OscConfig+0x358>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b05      	cmp	r3, #5
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x340>
 8001f32:	4b61      	ldr	r3, [pc, #388]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f36:	4a60      	ldr	r2, [pc, #384]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3e:	4b5e      	ldr	r3, [pc, #376]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f42:	4a5d      	ldr	r2, [pc, #372]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4a:	e00b      	b.n	8001f64 <HAL_RCC_OscConfig+0x358>
 8001f4c:	4b5a      	ldr	r3, [pc, #360]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	4a59      	ldr	r2, [pc, #356]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	6713      	str	r3, [r2, #112]	; 0x70
 8001f58:	4b57      	ldr	r3, [pc, #348]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5c:	4a56      	ldr	r2, [pc, #344]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f5e:	f023 0304 	bic.w	r3, r3, #4
 8001f62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d015      	beq.n	8001f98 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6c:	f7fe fefc 	bl	8000d68 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f74:	f7fe fef8 	bl	8000d68 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e0d7      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8a:	4b4b      	ldr	r3, [pc, #300]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0ee      	beq.n	8001f74 <HAL_RCC_OscConfig+0x368>
 8001f96:	e014      	b.n	8001fc2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f98:	f7fe fee6 	bl	8000d68 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa0:	f7fe fee2 	bl	8000d68 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e0c1      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb6:	4b40      	ldr	r3, [pc, #256]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1ee      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc2:	7dfb      	ldrb	r3, [r7, #23]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d105      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc8:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	4a3a      	ldr	r2, [pc, #232]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80ad 	beq.w	8002138 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fde:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d060      	beq.n	80020ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d145      	bne.n	800207e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff2:	4b33      	ldr	r3, [pc, #204]	; (80020c0 <HAL_RCC_OscConfig+0x4b4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7fe feb6 	bl	8000d68 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002000:	f7fe feb2 	bl	8000d68 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e093      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002012:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69da      	ldr	r2, [r3, #28]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	019b      	lsls	r3, r3, #6
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	085b      	lsrs	r3, r3, #1
 8002036:	3b01      	subs	r3, #1
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	061b      	lsls	r3, r3, #24
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	071b      	lsls	r3, r3, #28
 800204a:	491b      	ldr	r1, [pc, #108]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_RCC_OscConfig+0x4b4>)
 8002052:	2201      	movs	r2, #1
 8002054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002056:	f7fe fe87 	bl	8000d68 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205e:	f7fe fe83 	bl	8000d68 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e064      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x452>
 800207c:	e05c      	b.n	8002138 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <HAL_RCC_OscConfig+0x4b4>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7fe fe70 	bl	8000d68 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208c:	f7fe fe6c 	bl	8000d68 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e04d      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x480>
 80020aa:	e045      	b.n	8002138 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d107      	bne.n	80020c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e040      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40007000 	.word	0x40007000
 80020c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020c4:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <HAL_RCC_OscConfig+0x538>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d030      	beq.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d129      	bne.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d122      	bne.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020f4:	4013      	ands	r3, r2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d119      	bne.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	3b01      	subs	r3, #1
 800210e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d10f      	bne.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d107      	bne.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800

08002148 <HAL_RCC_GetOscConfig>:
  * @note   This function is only available in case of STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices.
  * @note   This function add the PLL/PLLR factor management
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	220f      	movs	r2, #15
 8002154:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8002156:	4b49      	ldr	r3, [pc, #292]	; (800227c <HAL_RCC_GetOscConfig+0x134>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800215e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002162:	d104      	bne.n	800216e <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	e00e      	b.n	800218c <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 800216e:	4b43      	ldr	r3, [pc, #268]	; (800227c <HAL_RCC_GetOscConfig+0x134>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800217a:	d104      	bne.n	8002186 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	e002      	b.n	800218c <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 800218c:	4b3b      	ldr	r3, [pc, #236]	; (800227c <HAL_RCC_GetOscConfig+0x134>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b01      	cmp	r3, #1
 8002196:	d103      	bne.n	80021a0 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	e002      	b.n	80021a6 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 80021a6:	4b35      	ldr	r3, [pc, #212]	; (800227c <HAL_RCC_GetOscConfig+0x134>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	08db      	lsrs	r3, r3, #3
 80021ac:	f003 021f 	and.w	r2, r3, #31
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 80021b4:	4b31      	ldr	r3, [pc, #196]	; (800227c <HAL_RCC_GetOscConfig+0x134>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d103      	bne.n	80021c8 <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2205      	movs	r2, #5
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	e00c      	b.n	80021e2 <HAL_RCC_GetOscConfig+0x9a>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 80021c8:	4b2c      	ldr	r3, [pc, #176]	; (800227c <HAL_RCC_GetOscConfig+0x134>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d103      	bne.n	80021dc <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	e002      	b.n	80021e2 <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 80021e2:	4b26      	ldr	r3, [pc, #152]	; (800227c <HAL_RCC_GetOscConfig+0x134>)
 80021e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d103      	bne.n	80021f6 <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	615a      	str	r2, [r3, #20]
 80021f4:	e002      	b.n	80021fc <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 80021fc:	4b1f      	ldr	r3, [pc, #124]	; (800227c <HAL_RCC_GetOscConfig+0x134>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002208:	d103      	bne.n	8002212 <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2202      	movs	r2, #2
 800220e:	619a      	str	r2, [r3, #24]
 8002210:	e002      	b.n	8002218 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002218:	4b18      	ldr	r3, [pc, #96]	; (800227c <HAL_RCC_GetOscConfig+0x134>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8002224:	4b15      	ldr	r3, [pc, #84]	; (800227c <HAL_RCC_GetOscConfig+0x134>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <HAL_RCC_GetOscConfig+0x134>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	099b      	lsrs	r3, r3, #6
 8002236:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 800223e:	4b0f      	ldr	r3, [pc, #60]	; (800227c <HAL_RCC_GetOscConfig+0x134>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002246:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	0c1a      	lsrs	r2, r3, #16
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_RCC_GetOscConfig+0x134>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	0e1b      	lsrs	r3, r3, #24
 8002258:	f003 020f 	and.w	r2, r3, #15
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLR = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_RCC_GetOscConfig+0x134>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	0f1b      	lsrs	r3, r3, #28
 8002266:	f003 0207 	and.w	r2, r3, #7
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800

08002280 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e042      	b.n	8002318 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d106      	bne.n	80022ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7fe fc36 	bl	8000b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2224      	movs	r2, #36	; 0x24
 80022b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 fd69 	bl	8002d9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695a      	ldr	r2, [r3, #20]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	; 0x28
 8002324:	af02      	add	r7, sp, #8
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	4613      	mov	r3, r2
 800232e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b20      	cmp	r3, #32
 800233e:	d175      	bne.n	800242c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <HAL_UART_Transmit+0x2c>
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e06e      	b.n	800242e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2221      	movs	r2, #33	; 0x21
 800235a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800235e:	f7fe fd03 	bl	8000d68 <HAL_GetTick>
 8002362:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	88fa      	ldrh	r2, [r7, #6]
 8002368:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	88fa      	ldrh	r2, [r7, #6]
 800236e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002378:	d108      	bne.n	800238c <HAL_UART_Transmit+0x6c>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d104      	bne.n	800238c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	61bb      	str	r3, [r7, #24]
 800238a:	e003      	b.n	8002394 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002390:	2300      	movs	r3, #0
 8002392:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002394:	e02e      	b.n	80023f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2200      	movs	r2, #0
 800239e:	2180      	movs	r1, #128	; 0x80
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 fb05 	bl	80029b0 <UART_WaitOnFlagUntilTimeout>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e03a      	b.n	800242e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10b      	bne.n	80023d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	3302      	adds	r3, #2
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	e007      	b.n	80023e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	3301      	adds	r3, #1
 80023e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1cb      	bne.n	8002396 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2200      	movs	r2, #0
 8002406:	2140      	movs	r1, #64	; 0x40
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 fad1 	bl	80029b0 <UART_WaitOnFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e006      	b.n	800242e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	e000      	b.n	800242e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800242c:	2302      	movs	r3, #2
  }
}
 800242e:	4618      	mov	r0, r3
 8002430:	3720      	adds	r7, #32
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b0ba      	sub	sp, #232	; 0xe8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002464:	2300      	movs	r3, #0
 8002466:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800246a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10f      	bne.n	800249e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800247e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_UART_IRQHandler+0x66>
 800248a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fbc2 	bl	8002c20 <UART_Receive_IT>
      return;
 800249c:	e25b      	b.n	8002956 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800249e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 80de 	beq.w	8002664 <HAL_UART_IRQHandler+0x22c>
 80024a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d106      	bne.n	80024c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80d1 	beq.w	8002664 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <HAL_UART_IRQHandler+0xae>
 80024ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <HAL_UART_IRQHandler+0xd2>
 80024f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	f043 0202 	orr.w	r2, r3, #2
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800250a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <HAL_UART_IRQHandler+0xf6>
 8002516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	f043 0204 	orr.w	r2, r3, #4
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800252e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d011      	beq.n	800255e <HAL_UART_IRQHandler+0x126>
 800253a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d105      	bne.n	8002552 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d005      	beq.n	800255e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f043 0208 	orr.w	r2, r3, #8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 81f2 	beq.w	800294c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_UART_IRQHandler+0x14e>
 8002574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fb4d 	bl	8002c20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002590:	2b40      	cmp	r3, #64	; 0x40
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d103      	bne.n	80025b2 <HAL_UART_IRQHandler+0x17a>
 80025aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d04f      	beq.n	8002652 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fa55 	bl	8002a62 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	d141      	bne.n	800264a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3314      	adds	r3, #20
 80025cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025d4:	e853 3f00 	ldrex	r3, [r3]
 80025d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80025dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3314      	adds	r3, #20
 80025ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80025f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80025f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80025fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002602:	e841 2300 	strex	r3, r2, [r1]
 8002606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800260a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1d9      	bne.n	80025c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d013      	beq.n	8002642 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261e:	4a7e      	ldr	r2, [pc, #504]	; (8002818 <HAL_UART_IRQHandler+0x3e0>)
 8002620:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fd4f 	bl	80010ca <HAL_DMA_Abort_IT>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d016      	beq.n	8002660 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800263c:	4610      	mov	r0, r2
 800263e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002640:	e00e      	b.n	8002660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f99e 	bl	8002984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002648:	e00a      	b.n	8002660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f99a 	bl	8002984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002650:	e006      	b.n	8002660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f996 	bl	8002984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800265e:	e175      	b.n	800294c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002660:	bf00      	nop
    return;
 8002662:	e173      	b.n	800294c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	2b01      	cmp	r3, #1
 800266a:	f040 814f 	bne.w	800290c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800266e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 8148 	beq.w	800290c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800267c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8141 	beq.w	800290c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026aa:	2b40      	cmp	r3, #64	; 0x40
 80026ac:	f040 80b6 	bne.w	800281c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 8145 	beq.w	8002950 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026ce:	429a      	cmp	r2, r3
 80026d0:	f080 813e 	bcs.w	8002950 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026e6:	f000 8088 	beq.w	80027fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	330c      	adds	r3, #12
 80026f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026f8:	e853 3f00 	ldrex	r3, [r3]
 80026fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	330c      	adds	r3, #12
 8002712:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002716:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800271a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002722:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002726:	e841 2300 	strex	r3, r2, [r1]
 800272a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800272e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1d9      	bne.n	80026ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3314      	adds	r3, #20
 800273c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002740:	e853 3f00 	ldrex	r3, [r3]
 8002744:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3314      	adds	r3, #20
 8002756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800275a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800275e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002760:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002762:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002766:	e841 2300 	strex	r3, r2, [r1]
 800276a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800276c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1e1      	bne.n	8002736 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3314      	adds	r3, #20
 8002778:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800277c:	e853 3f00 	ldrex	r3, [r3]
 8002780:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3314      	adds	r3, #20
 8002792:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002796:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002798:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800279c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800279e:	e841 2300 	strex	r3, r2, [r1]
 80027a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80027a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1e3      	bne.n	8002772 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	330c      	adds	r3, #12
 80027be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c2:	e853 3f00 	ldrex	r3, [r3]
 80027c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80027c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ca:	f023 0310 	bic.w	r3, r3, #16
 80027ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	330c      	adds	r3, #12
 80027d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80027dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80027de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027e4:	e841 2300 	strex	r3, r2, [r1]
 80027e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80027ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e3      	bne.n	80027b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe fbf8 	bl	8000fea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2202      	movs	r2, #2
 80027fe:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002808:	b29b      	uxth	r3, r3
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	b29b      	uxth	r3, r3
 800280e:	4619      	mov	r1, r3
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f8c1 	bl	8002998 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002816:	e09b      	b.n	8002950 <HAL_UART_IRQHandler+0x518>
 8002818:	08002b29 	.word	0x08002b29
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002824:	b29b      	uxth	r3, r3
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 808e 	beq.w	8002954 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002838:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 8089 	beq.w	8002954 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	330c      	adds	r3, #12
 8002848:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284c:	e853 3f00 	ldrex	r3, [r3]
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002854:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002858:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	330c      	adds	r3, #12
 8002862:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002866:	647a      	str	r2, [r7, #68]	; 0x44
 8002868:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800286c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800286e:	e841 2300 	strex	r3, r2, [r1]
 8002872:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1e3      	bne.n	8002842 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	3314      	adds	r3, #20
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	e853 3f00 	ldrex	r3, [r3]
 8002888:	623b      	str	r3, [r7, #32]
   return(result);
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	f023 0301 	bic.w	r3, r3, #1
 8002890:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	3314      	adds	r3, #20
 800289a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800289e:	633a      	str	r2, [r7, #48]	; 0x30
 80028a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028a6:	e841 2300 	strex	r3, r2, [r1]
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80028ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1e3      	bne.n	800287a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	330c      	adds	r3, #12
 80028c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	e853 3f00 	ldrex	r3, [r3]
 80028ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0310 	bic.w	r3, r3, #16
 80028d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	330c      	adds	r3, #12
 80028e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80028e4:	61fa      	str	r2, [r7, #28]
 80028e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e8:	69b9      	ldr	r1, [r7, #24]
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	e841 2300 	strex	r3, r2, [r1]
 80028f0:	617b      	str	r3, [r7, #20]
   return(result);
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1e3      	bne.n	80028c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002902:	4619      	mov	r1, r3
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f847 	bl	8002998 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800290a:	e023      	b.n	8002954 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800290c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002914:	2b00      	cmp	r3, #0
 8002916:	d009      	beq.n	800292c <HAL_UART_IRQHandler+0x4f4>
 8002918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800291c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f913 	bl	8002b50 <UART_Transmit_IT>
    return;
 800292a:	e014      	b.n	8002956 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800292c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00e      	beq.n	8002956 <HAL_UART_IRQHandler+0x51e>
 8002938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800293c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f953 	bl	8002bf0 <UART_EndTransmit_IT>
    return;
 800294a:	e004      	b.n	8002956 <HAL_UART_IRQHandler+0x51e>
    return;
 800294c:	bf00      	nop
 800294e:	e002      	b.n	8002956 <HAL_UART_IRQHandler+0x51e>
      return;
 8002950:	bf00      	nop
 8002952:	e000      	b.n	8002956 <HAL_UART_IRQHandler+0x51e>
      return;
 8002954:	bf00      	nop
  }
}
 8002956:	37e8      	adds	r7, #232	; 0xe8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	4613      	mov	r3, r2
 80029be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029c0:	e03b      	b.n	8002a3a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c8:	d037      	beq.n	8002a3a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ca:	f7fe f9cd 	bl	8000d68 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	6a3a      	ldr	r2, [r7, #32]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d302      	bcc.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e03a      	b.n	8002a5a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d023      	beq.n	8002a3a <UART_WaitOnFlagUntilTimeout+0x8a>
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b80      	cmp	r3, #128	; 0x80
 80029f6:	d020      	beq.n	8002a3a <UART_WaitOnFlagUntilTimeout+0x8a>
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2b40      	cmp	r3, #64	; 0x40
 80029fc:	d01d      	beq.n	8002a3a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d116      	bne.n	8002a3a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f81d 	bl	8002a62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e00f      	b.n	8002a5a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4013      	ands	r3, r2
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	bf0c      	ite	eq
 8002a4a:	2301      	moveq	r3, #1
 8002a4c:	2300      	movne	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d0b4      	beq.n	80029c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b095      	sub	sp, #84	; 0x54
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	330c      	adds	r3, #12
 8002a70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a74:	e853 3f00 	ldrex	r3, [r3]
 8002a78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	330c      	adds	r3, #12
 8002a88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a8a:	643a      	str	r2, [r7, #64]	; 0x40
 8002a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a92:	e841 2300 	strex	r3, r2, [r1]
 8002a96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1e5      	bne.n	8002a6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3314      	adds	r3, #20
 8002aa4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	e853 3f00 	ldrex	r3, [r3]
 8002aac:	61fb      	str	r3, [r7, #28]
   return(result);
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f023 0301 	bic.w	r3, r3, #1
 8002ab4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	3314      	adds	r3, #20
 8002abc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002abe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ac0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac6:	e841 2300 	strex	r3, r2, [r1]
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1e5      	bne.n	8002a9e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d119      	bne.n	8002b0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	330c      	adds	r3, #12
 8002ae0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	e853 3f00 	ldrex	r3, [r3]
 8002ae8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f023 0310 	bic.w	r3, r3, #16
 8002af0:	647b      	str	r3, [r7, #68]	; 0x44
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	330c      	adds	r3, #12
 8002af8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002afa:	61ba      	str	r2, [r7, #24]
 8002afc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afe:	6979      	ldr	r1, [r7, #20]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	e841 2300 	strex	r3, r2, [r1]
 8002b06:	613b      	str	r3, [r7, #16]
   return(result);
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1e5      	bne.n	8002ada <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b1c:	bf00      	nop
 8002b1e:	3754      	adds	r7, #84	; 0x54
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f7ff ff1e 	bl	8002984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b48:	bf00      	nop
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b21      	cmp	r3, #33	; 0x21
 8002b62:	d13e      	bne.n	8002be2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b6c:	d114      	bne.n	8002b98 <UART_Transmit_IT+0x48>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d110      	bne.n	8002b98 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	1c9a      	adds	r2, r3, #2
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	621a      	str	r2, [r3, #32]
 8002b96:	e008      	b.n	8002baa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	1c59      	adds	r1, r3, #1
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6211      	str	r1, [r2, #32]
 8002ba2:	781a      	ldrb	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10f      	bne.n	8002bde <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bcc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bdc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e000      	b.n	8002be4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002be2:	2302      	movs	r3, #2
  }
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff fea3 	bl	800295c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08c      	sub	sp, #48	; 0x30
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b22      	cmp	r3, #34	; 0x22
 8002c32:	f040 80ae 	bne.w	8002d92 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c3e:	d117      	bne.n	8002c70 <UART_Receive_IT+0x50>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d113      	bne.n	8002c70 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	1c9a      	adds	r2, r3, #2
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	629a      	str	r2, [r3, #40]	; 0x28
 8002c6e:	e026      	b.n	8002cbe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c82:	d007      	beq.n	8002c94 <UART_Receive_IT+0x74>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10a      	bne.n	8002ca2 <UART_Receive_IT+0x82>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d106      	bne.n	8002ca2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9e:	701a      	strb	r2, [r3, #0]
 8002ca0:	e008      	b.n	8002cb4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	4619      	mov	r1, r3
 8002ccc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d15d      	bne.n	8002d8e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0220 	bic.w	r2, r2, #32
 8002ce0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cf0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695a      	ldr	r2, [r3, #20]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0201 	bic.w	r2, r2, #1
 8002d00:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d135      	bne.n	8002d84 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	330c      	adds	r3, #12
 8002d24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	e853 3f00 	ldrex	r3, [r3]
 8002d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f023 0310 	bic.w	r3, r3, #16
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	330c      	adds	r3, #12
 8002d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3e:	623a      	str	r2, [r7, #32]
 8002d40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d42:	69f9      	ldr	r1, [r7, #28]
 8002d44:	6a3a      	ldr	r2, [r7, #32]
 8002d46:	e841 2300 	strex	r3, r2, [r1]
 8002d4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1e5      	bne.n	8002d1e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	2b10      	cmp	r3, #16
 8002d5e:	d10a      	bne.n	8002d76 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff fe0b 	bl	8002998 <HAL_UARTEx_RxEventCallback>
 8002d82:	e002      	b.n	8002d8a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff fdf3 	bl	8002970 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e002      	b.n	8002d94 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e000      	b.n	8002d94 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002d92:	2302      	movs	r3, #2
  }
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3730      	adds	r7, #48	; 0x30
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002da0:	b0c0      	sub	sp, #256	; 0x100
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db8:	68d9      	ldr	r1, [r3, #12]
 8002dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	ea40 0301 	orr.w	r3, r0, r1
 8002dc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002df4:	f021 010c 	bic.w	r1, r1, #12
 8002df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e02:	430b      	orrs	r3, r1
 8002e04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e16:	6999      	ldr	r1, [r3, #24]
 8002e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	ea40 0301 	orr.w	r3, r0, r1
 8002e22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	4b8f      	ldr	r3, [pc, #572]	; (8003068 <UART_SetConfig+0x2cc>)
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d005      	beq.n	8002e3c <UART_SetConfig+0xa0>
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	4b8d      	ldr	r3, [pc, #564]	; (800306c <UART_SetConfig+0x2d0>)
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d104      	bne.n	8002e46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e3c:	f7fe fca2 	bl	8001784 <HAL_RCC_GetPCLK2Freq>
 8002e40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e44:	e003      	b.n	8002e4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e46:	f7fe fc89 	bl	800175c <HAL_RCC_GetPCLK1Freq>
 8002e4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e58:	f040 810c 	bne.w	8003074 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e60:	2200      	movs	r2, #0
 8002e62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e6e:	4622      	mov	r2, r4
 8002e70:	462b      	mov	r3, r5
 8002e72:	1891      	adds	r1, r2, r2
 8002e74:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e76:	415b      	adcs	r3, r3
 8002e78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e7e:	4621      	mov	r1, r4
 8002e80:	eb12 0801 	adds.w	r8, r2, r1
 8002e84:	4629      	mov	r1, r5
 8002e86:	eb43 0901 	adc.w	r9, r3, r1
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e9e:	4690      	mov	r8, r2
 8002ea0:	4699      	mov	r9, r3
 8002ea2:	4623      	mov	r3, r4
 8002ea4:	eb18 0303 	adds.w	r3, r8, r3
 8002ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002eac:	462b      	mov	r3, r5
 8002eae:	eb49 0303 	adc.w	r3, r9, r3
 8002eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ec2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ec6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002eca:	460b      	mov	r3, r1
 8002ecc:	18db      	adds	r3, r3, r3
 8002ece:	653b      	str	r3, [r7, #80]	; 0x50
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	eb42 0303 	adc.w	r3, r2, r3
 8002ed6:	657b      	str	r3, [r7, #84]	; 0x54
 8002ed8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002edc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ee0:	f7fd f9ee 	bl	80002c0 <__aeabi_uldivmod>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4b61      	ldr	r3, [pc, #388]	; (8003070 <UART_SetConfig+0x2d4>)
 8002eea:	fba3 2302 	umull	r2, r3, r3, r2
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	011c      	lsls	r4, r3, #4
 8002ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002efc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f04:	4642      	mov	r2, r8
 8002f06:	464b      	mov	r3, r9
 8002f08:	1891      	adds	r1, r2, r2
 8002f0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f0c:	415b      	adcs	r3, r3
 8002f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f14:	4641      	mov	r1, r8
 8002f16:	eb12 0a01 	adds.w	sl, r2, r1
 8002f1a:	4649      	mov	r1, r9
 8002f1c:	eb43 0b01 	adc.w	fp, r3, r1
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f34:	4692      	mov	sl, r2
 8002f36:	469b      	mov	fp, r3
 8002f38:	4643      	mov	r3, r8
 8002f3a:	eb1a 0303 	adds.w	r3, sl, r3
 8002f3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f42:	464b      	mov	r3, r9
 8002f44:	eb4b 0303 	adc.w	r3, fp, r3
 8002f48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f60:	460b      	mov	r3, r1
 8002f62:	18db      	adds	r3, r3, r3
 8002f64:	643b      	str	r3, [r7, #64]	; 0x40
 8002f66:	4613      	mov	r3, r2
 8002f68:	eb42 0303 	adc.w	r3, r2, r3
 8002f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f76:	f7fd f9a3 	bl	80002c0 <__aeabi_uldivmod>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <UART_SetConfig+0x2d4>)
 8002f82:	fba3 2301 	umull	r2, r3, r3, r1
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	2264      	movs	r2, #100	; 0x64
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	1acb      	subs	r3, r1, r3
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f96:	4b36      	ldr	r3, [pc, #216]	; (8003070 <UART_SetConfig+0x2d4>)
 8002f98:	fba3 2302 	umull	r2, r3, r3, r2
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fa4:	441c      	add	r4, r3
 8002fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002faa:	2200      	movs	r2, #0
 8002fac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002fb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002fb8:	4642      	mov	r2, r8
 8002fba:	464b      	mov	r3, r9
 8002fbc:	1891      	adds	r1, r2, r2
 8002fbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fc0:	415b      	adcs	r3, r3
 8002fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fc8:	4641      	mov	r1, r8
 8002fca:	1851      	adds	r1, r2, r1
 8002fcc:	6339      	str	r1, [r7, #48]	; 0x30
 8002fce:	4649      	mov	r1, r9
 8002fd0:	414b      	adcs	r3, r1
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002fe0:	4659      	mov	r1, fp
 8002fe2:	00cb      	lsls	r3, r1, #3
 8002fe4:	4651      	mov	r1, sl
 8002fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fea:	4651      	mov	r1, sl
 8002fec:	00ca      	lsls	r2, r1, #3
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4642      	mov	r2, r8
 8002ff6:	189b      	adds	r3, r3, r2
 8002ff8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ffc:	464b      	mov	r3, r9
 8002ffe:	460a      	mov	r2, r1
 8003000:	eb42 0303 	adc.w	r3, r2, r3
 8003004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003014:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003018:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800301c:	460b      	mov	r3, r1
 800301e:	18db      	adds	r3, r3, r3
 8003020:	62bb      	str	r3, [r7, #40]	; 0x28
 8003022:	4613      	mov	r3, r2
 8003024:	eb42 0303 	adc.w	r3, r2, r3
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800302a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800302e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003032:	f7fd f945 	bl	80002c0 <__aeabi_uldivmod>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <UART_SetConfig+0x2d4>)
 800303c:	fba3 1302 	umull	r1, r3, r3, r2
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	2164      	movs	r1, #100	; 0x64
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	3332      	adds	r3, #50	; 0x32
 800304e:	4a08      	ldr	r2, [pc, #32]	; (8003070 <UART_SetConfig+0x2d4>)
 8003050:	fba2 2303 	umull	r2, r3, r2, r3
 8003054:	095b      	lsrs	r3, r3, #5
 8003056:	f003 0207 	and.w	r2, r3, #7
 800305a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4422      	add	r2, r4
 8003062:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003064:	e106      	b.n	8003274 <UART_SetConfig+0x4d8>
 8003066:	bf00      	nop
 8003068:	40011000 	.word	0x40011000
 800306c:	40011400 	.word	0x40011400
 8003070:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003074:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003078:	2200      	movs	r2, #0
 800307a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800307e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003082:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003086:	4642      	mov	r2, r8
 8003088:	464b      	mov	r3, r9
 800308a:	1891      	adds	r1, r2, r2
 800308c:	6239      	str	r1, [r7, #32]
 800308e:	415b      	adcs	r3, r3
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
 8003092:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003096:	4641      	mov	r1, r8
 8003098:	1854      	adds	r4, r2, r1
 800309a:	4649      	mov	r1, r9
 800309c:	eb43 0501 	adc.w	r5, r3, r1
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	00eb      	lsls	r3, r5, #3
 80030aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ae:	00e2      	lsls	r2, r4, #3
 80030b0:	4614      	mov	r4, r2
 80030b2:	461d      	mov	r5, r3
 80030b4:	4643      	mov	r3, r8
 80030b6:	18e3      	adds	r3, r4, r3
 80030b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030bc:	464b      	mov	r3, r9
 80030be:	eb45 0303 	adc.w	r3, r5, r3
 80030c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030e2:	4629      	mov	r1, r5
 80030e4:	008b      	lsls	r3, r1, #2
 80030e6:	4621      	mov	r1, r4
 80030e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ec:	4621      	mov	r1, r4
 80030ee:	008a      	lsls	r2, r1, #2
 80030f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80030f4:	f7fd f8e4 	bl	80002c0 <__aeabi_uldivmod>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4b60      	ldr	r3, [pc, #384]	; (8003280 <UART_SetConfig+0x4e4>)
 80030fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	011c      	lsls	r4, r3, #4
 8003106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800310a:	2200      	movs	r2, #0
 800310c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003110:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003114:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003118:	4642      	mov	r2, r8
 800311a:	464b      	mov	r3, r9
 800311c:	1891      	adds	r1, r2, r2
 800311e:	61b9      	str	r1, [r7, #24]
 8003120:	415b      	adcs	r3, r3
 8003122:	61fb      	str	r3, [r7, #28]
 8003124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003128:	4641      	mov	r1, r8
 800312a:	1851      	adds	r1, r2, r1
 800312c:	6139      	str	r1, [r7, #16]
 800312e:	4649      	mov	r1, r9
 8003130:	414b      	adcs	r3, r1
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003140:	4659      	mov	r1, fp
 8003142:	00cb      	lsls	r3, r1, #3
 8003144:	4651      	mov	r1, sl
 8003146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800314a:	4651      	mov	r1, sl
 800314c:	00ca      	lsls	r2, r1, #3
 800314e:	4610      	mov	r0, r2
 8003150:	4619      	mov	r1, r3
 8003152:	4603      	mov	r3, r0
 8003154:	4642      	mov	r2, r8
 8003156:	189b      	adds	r3, r3, r2
 8003158:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800315c:	464b      	mov	r3, r9
 800315e:	460a      	mov	r2, r1
 8003160:	eb42 0303 	adc.w	r3, r2, r3
 8003164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	67bb      	str	r3, [r7, #120]	; 0x78
 8003172:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003180:	4649      	mov	r1, r9
 8003182:	008b      	lsls	r3, r1, #2
 8003184:	4641      	mov	r1, r8
 8003186:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800318a:	4641      	mov	r1, r8
 800318c:	008a      	lsls	r2, r1, #2
 800318e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003192:	f7fd f895 	bl	80002c0 <__aeabi_uldivmod>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4611      	mov	r1, r2
 800319c:	4b38      	ldr	r3, [pc, #224]	; (8003280 <UART_SetConfig+0x4e4>)
 800319e:	fba3 2301 	umull	r2, r3, r3, r1
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	2264      	movs	r2, #100	; 0x64
 80031a6:	fb02 f303 	mul.w	r3, r2, r3
 80031aa:	1acb      	subs	r3, r1, r3
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	3332      	adds	r3, #50	; 0x32
 80031b0:	4a33      	ldr	r2, [pc, #204]	; (8003280 <UART_SetConfig+0x4e4>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031bc:	441c      	add	r4, r3
 80031be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c2:	2200      	movs	r2, #0
 80031c4:	673b      	str	r3, [r7, #112]	; 0x70
 80031c6:	677a      	str	r2, [r7, #116]	; 0x74
 80031c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031cc:	4642      	mov	r2, r8
 80031ce:	464b      	mov	r3, r9
 80031d0:	1891      	adds	r1, r2, r2
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	415b      	adcs	r3, r3
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031dc:	4641      	mov	r1, r8
 80031de:	1851      	adds	r1, r2, r1
 80031e0:	6039      	str	r1, [r7, #0]
 80031e2:	4649      	mov	r1, r9
 80031e4:	414b      	adcs	r3, r1
 80031e6:	607b      	str	r3, [r7, #4]
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031f4:	4659      	mov	r1, fp
 80031f6:	00cb      	lsls	r3, r1, #3
 80031f8:	4651      	mov	r1, sl
 80031fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031fe:	4651      	mov	r1, sl
 8003200:	00ca      	lsls	r2, r1, #3
 8003202:	4610      	mov	r0, r2
 8003204:	4619      	mov	r1, r3
 8003206:	4603      	mov	r3, r0
 8003208:	4642      	mov	r2, r8
 800320a:	189b      	adds	r3, r3, r2
 800320c:	66bb      	str	r3, [r7, #104]	; 0x68
 800320e:	464b      	mov	r3, r9
 8003210:	460a      	mov	r2, r1
 8003212:	eb42 0303 	adc.w	r3, r2, r3
 8003216:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	663b      	str	r3, [r7, #96]	; 0x60
 8003222:	667a      	str	r2, [r7, #100]	; 0x64
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003230:	4649      	mov	r1, r9
 8003232:	008b      	lsls	r3, r1, #2
 8003234:	4641      	mov	r1, r8
 8003236:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800323a:	4641      	mov	r1, r8
 800323c:	008a      	lsls	r2, r1, #2
 800323e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003242:	f7fd f83d 	bl	80002c0 <__aeabi_uldivmod>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <UART_SetConfig+0x4e4>)
 800324c:	fba3 1302 	umull	r1, r3, r3, r2
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	2164      	movs	r1, #100	; 0x64
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	3332      	adds	r3, #50	; 0x32
 800325e:	4a08      	ldr	r2, [pc, #32]	; (8003280 <UART_SetConfig+0x4e4>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	f003 020f 	and.w	r2, r3, #15
 800326a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4422      	add	r2, r4
 8003272:	609a      	str	r2, [r3, #8]
}
 8003274:	bf00      	nop
 8003276:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800327a:	46bd      	mov	sp, r7
 800327c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003280:	51eb851f 	.word	0x51eb851f

08003284 <siprintf>:
 8003284:	b40e      	push	{r1, r2, r3}
 8003286:	b500      	push	{lr}
 8003288:	b09c      	sub	sp, #112	; 0x70
 800328a:	ab1d      	add	r3, sp, #116	; 0x74
 800328c:	9002      	str	r0, [sp, #8]
 800328e:	9006      	str	r0, [sp, #24]
 8003290:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003294:	4809      	ldr	r0, [pc, #36]	; (80032bc <siprintf+0x38>)
 8003296:	9107      	str	r1, [sp, #28]
 8003298:	9104      	str	r1, [sp, #16]
 800329a:	4909      	ldr	r1, [pc, #36]	; (80032c0 <siprintf+0x3c>)
 800329c:	f853 2b04 	ldr.w	r2, [r3], #4
 80032a0:	9105      	str	r1, [sp, #20]
 80032a2:	6800      	ldr	r0, [r0, #0]
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	a902      	add	r1, sp, #8
 80032a8:	f000 f992 	bl	80035d0 <_svfiprintf_r>
 80032ac:	9b02      	ldr	r3, [sp, #8]
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	b01c      	add	sp, #112	; 0x70
 80032b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80032b8:	b003      	add	sp, #12
 80032ba:	4770      	bx	lr
 80032bc:	20000058 	.word	0x20000058
 80032c0:	ffff0208 	.word	0xffff0208

080032c4 <memset>:
 80032c4:	4402      	add	r2, r0
 80032c6:	4603      	mov	r3, r0
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d100      	bne.n	80032ce <memset+0xa>
 80032cc:	4770      	bx	lr
 80032ce:	f803 1b01 	strb.w	r1, [r3], #1
 80032d2:	e7f9      	b.n	80032c8 <memset+0x4>

080032d4 <__errno>:
 80032d4:	4b01      	ldr	r3, [pc, #4]	; (80032dc <__errno+0x8>)
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20000058 	.word	0x20000058

080032e0 <__libc_init_array>:
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	4d0d      	ldr	r5, [pc, #52]	; (8003318 <__libc_init_array+0x38>)
 80032e4:	4c0d      	ldr	r4, [pc, #52]	; (800331c <__libc_init_array+0x3c>)
 80032e6:	1b64      	subs	r4, r4, r5
 80032e8:	10a4      	asrs	r4, r4, #2
 80032ea:	2600      	movs	r6, #0
 80032ec:	42a6      	cmp	r6, r4
 80032ee:	d109      	bne.n	8003304 <__libc_init_array+0x24>
 80032f0:	4d0b      	ldr	r5, [pc, #44]	; (8003320 <__libc_init_array+0x40>)
 80032f2:	4c0c      	ldr	r4, [pc, #48]	; (8003324 <__libc_init_array+0x44>)
 80032f4:	f000 fc6a 	bl	8003bcc <_init>
 80032f8:	1b64      	subs	r4, r4, r5
 80032fa:	10a4      	asrs	r4, r4, #2
 80032fc:	2600      	movs	r6, #0
 80032fe:	42a6      	cmp	r6, r4
 8003300:	d105      	bne.n	800330e <__libc_init_array+0x2e>
 8003302:	bd70      	pop	{r4, r5, r6, pc}
 8003304:	f855 3b04 	ldr.w	r3, [r5], #4
 8003308:	4798      	blx	r3
 800330a:	3601      	adds	r6, #1
 800330c:	e7ee      	b.n	80032ec <__libc_init_array+0xc>
 800330e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003312:	4798      	blx	r3
 8003314:	3601      	adds	r6, #1
 8003316:	e7f2      	b.n	80032fe <__libc_init_array+0x1e>
 8003318:	08003c84 	.word	0x08003c84
 800331c:	08003c84 	.word	0x08003c84
 8003320:	08003c84 	.word	0x08003c84
 8003324:	08003c88 	.word	0x08003c88

08003328 <__retarget_lock_acquire_recursive>:
 8003328:	4770      	bx	lr

0800332a <__retarget_lock_release_recursive>:
 800332a:	4770      	bx	lr

0800332c <_free_r>:
 800332c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800332e:	2900      	cmp	r1, #0
 8003330:	d044      	beq.n	80033bc <_free_r+0x90>
 8003332:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003336:	9001      	str	r0, [sp, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	f1a1 0404 	sub.w	r4, r1, #4
 800333e:	bfb8      	it	lt
 8003340:	18e4      	addlt	r4, r4, r3
 8003342:	f000 f8df 	bl	8003504 <__malloc_lock>
 8003346:	4a1e      	ldr	r2, [pc, #120]	; (80033c0 <_free_r+0x94>)
 8003348:	9801      	ldr	r0, [sp, #4]
 800334a:	6813      	ldr	r3, [r2, #0]
 800334c:	b933      	cbnz	r3, 800335c <_free_r+0x30>
 800334e:	6063      	str	r3, [r4, #4]
 8003350:	6014      	str	r4, [r2, #0]
 8003352:	b003      	add	sp, #12
 8003354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003358:	f000 b8da 	b.w	8003510 <__malloc_unlock>
 800335c:	42a3      	cmp	r3, r4
 800335e:	d908      	bls.n	8003372 <_free_r+0x46>
 8003360:	6825      	ldr	r5, [r4, #0]
 8003362:	1961      	adds	r1, r4, r5
 8003364:	428b      	cmp	r3, r1
 8003366:	bf01      	itttt	eq
 8003368:	6819      	ldreq	r1, [r3, #0]
 800336a:	685b      	ldreq	r3, [r3, #4]
 800336c:	1949      	addeq	r1, r1, r5
 800336e:	6021      	streq	r1, [r4, #0]
 8003370:	e7ed      	b.n	800334e <_free_r+0x22>
 8003372:	461a      	mov	r2, r3
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	b10b      	cbz	r3, 800337c <_free_r+0x50>
 8003378:	42a3      	cmp	r3, r4
 800337a:	d9fa      	bls.n	8003372 <_free_r+0x46>
 800337c:	6811      	ldr	r1, [r2, #0]
 800337e:	1855      	adds	r5, r2, r1
 8003380:	42a5      	cmp	r5, r4
 8003382:	d10b      	bne.n	800339c <_free_r+0x70>
 8003384:	6824      	ldr	r4, [r4, #0]
 8003386:	4421      	add	r1, r4
 8003388:	1854      	adds	r4, r2, r1
 800338a:	42a3      	cmp	r3, r4
 800338c:	6011      	str	r1, [r2, #0]
 800338e:	d1e0      	bne.n	8003352 <_free_r+0x26>
 8003390:	681c      	ldr	r4, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	6053      	str	r3, [r2, #4]
 8003396:	440c      	add	r4, r1
 8003398:	6014      	str	r4, [r2, #0]
 800339a:	e7da      	b.n	8003352 <_free_r+0x26>
 800339c:	d902      	bls.n	80033a4 <_free_r+0x78>
 800339e:	230c      	movs	r3, #12
 80033a0:	6003      	str	r3, [r0, #0]
 80033a2:	e7d6      	b.n	8003352 <_free_r+0x26>
 80033a4:	6825      	ldr	r5, [r4, #0]
 80033a6:	1961      	adds	r1, r4, r5
 80033a8:	428b      	cmp	r3, r1
 80033aa:	bf04      	itt	eq
 80033ac:	6819      	ldreq	r1, [r3, #0]
 80033ae:	685b      	ldreq	r3, [r3, #4]
 80033b0:	6063      	str	r3, [r4, #4]
 80033b2:	bf04      	itt	eq
 80033b4:	1949      	addeq	r1, r1, r5
 80033b6:	6021      	streq	r1, [r4, #0]
 80033b8:	6054      	str	r4, [r2, #4]
 80033ba:	e7ca      	b.n	8003352 <_free_r+0x26>
 80033bc:	b003      	add	sp, #12
 80033be:	bd30      	pop	{r4, r5, pc}
 80033c0:	20000208 	.word	0x20000208

080033c4 <sbrk_aligned>:
 80033c4:	b570      	push	{r4, r5, r6, lr}
 80033c6:	4e0e      	ldr	r6, [pc, #56]	; (8003400 <sbrk_aligned+0x3c>)
 80033c8:	460c      	mov	r4, r1
 80033ca:	6831      	ldr	r1, [r6, #0]
 80033cc:	4605      	mov	r5, r0
 80033ce:	b911      	cbnz	r1, 80033d6 <sbrk_aligned+0x12>
 80033d0:	f000 fba6 	bl	8003b20 <_sbrk_r>
 80033d4:	6030      	str	r0, [r6, #0]
 80033d6:	4621      	mov	r1, r4
 80033d8:	4628      	mov	r0, r5
 80033da:	f000 fba1 	bl	8003b20 <_sbrk_r>
 80033de:	1c43      	adds	r3, r0, #1
 80033e0:	d00a      	beq.n	80033f8 <sbrk_aligned+0x34>
 80033e2:	1cc4      	adds	r4, r0, #3
 80033e4:	f024 0403 	bic.w	r4, r4, #3
 80033e8:	42a0      	cmp	r0, r4
 80033ea:	d007      	beq.n	80033fc <sbrk_aligned+0x38>
 80033ec:	1a21      	subs	r1, r4, r0
 80033ee:	4628      	mov	r0, r5
 80033f0:	f000 fb96 	bl	8003b20 <_sbrk_r>
 80033f4:	3001      	adds	r0, #1
 80033f6:	d101      	bne.n	80033fc <sbrk_aligned+0x38>
 80033f8:	f04f 34ff 	mov.w	r4, #4294967295
 80033fc:	4620      	mov	r0, r4
 80033fe:	bd70      	pop	{r4, r5, r6, pc}
 8003400:	2000020c 	.word	0x2000020c

08003404 <_malloc_r>:
 8003404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003408:	1ccd      	adds	r5, r1, #3
 800340a:	f025 0503 	bic.w	r5, r5, #3
 800340e:	3508      	adds	r5, #8
 8003410:	2d0c      	cmp	r5, #12
 8003412:	bf38      	it	cc
 8003414:	250c      	movcc	r5, #12
 8003416:	2d00      	cmp	r5, #0
 8003418:	4607      	mov	r7, r0
 800341a:	db01      	blt.n	8003420 <_malloc_r+0x1c>
 800341c:	42a9      	cmp	r1, r5
 800341e:	d905      	bls.n	800342c <_malloc_r+0x28>
 8003420:	230c      	movs	r3, #12
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	2600      	movs	r6, #0
 8003426:	4630      	mov	r0, r6
 8003428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800342c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003500 <_malloc_r+0xfc>
 8003430:	f000 f868 	bl	8003504 <__malloc_lock>
 8003434:	f8d8 3000 	ldr.w	r3, [r8]
 8003438:	461c      	mov	r4, r3
 800343a:	bb5c      	cbnz	r4, 8003494 <_malloc_r+0x90>
 800343c:	4629      	mov	r1, r5
 800343e:	4638      	mov	r0, r7
 8003440:	f7ff ffc0 	bl	80033c4 <sbrk_aligned>
 8003444:	1c43      	adds	r3, r0, #1
 8003446:	4604      	mov	r4, r0
 8003448:	d155      	bne.n	80034f6 <_malloc_r+0xf2>
 800344a:	f8d8 4000 	ldr.w	r4, [r8]
 800344e:	4626      	mov	r6, r4
 8003450:	2e00      	cmp	r6, #0
 8003452:	d145      	bne.n	80034e0 <_malloc_r+0xdc>
 8003454:	2c00      	cmp	r4, #0
 8003456:	d048      	beq.n	80034ea <_malloc_r+0xe6>
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	4631      	mov	r1, r6
 800345c:	4638      	mov	r0, r7
 800345e:	eb04 0903 	add.w	r9, r4, r3
 8003462:	f000 fb5d 	bl	8003b20 <_sbrk_r>
 8003466:	4581      	cmp	r9, r0
 8003468:	d13f      	bne.n	80034ea <_malloc_r+0xe6>
 800346a:	6821      	ldr	r1, [r4, #0]
 800346c:	1a6d      	subs	r5, r5, r1
 800346e:	4629      	mov	r1, r5
 8003470:	4638      	mov	r0, r7
 8003472:	f7ff ffa7 	bl	80033c4 <sbrk_aligned>
 8003476:	3001      	adds	r0, #1
 8003478:	d037      	beq.n	80034ea <_malloc_r+0xe6>
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	442b      	add	r3, r5
 800347e:	6023      	str	r3, [r4, #0]
 8003480:	f8d8 3000 	ldr.w	r3, [r8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d038      	beq.n	80034fa <_malloc_r+0xf6>
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	42a2      	cmp	r2, r4
 800348c:	d12b      	bne.n	80034e6 <_malloc_r+0xe2>
 800348e:	2200      	movs	r2, #0
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	e00f      	b.n	80034b4 <_malloc_r+0xb0>
 8003494:	6822      	ldr	r2, [r4, #0]
 8003496:	1b52      	subs	r2, r2, r5
 8003498:	d41f      	bmi.n	80034da <_malloc_r+0xd6>
 800349a:	2a0b      	cmp	r2, #11
 800349c:	d917      	bls.n	80034ce <_malloc_r+0xca>
 800349e:	1961      	adds	r1, r4, r5
 80034a0:	42a3      	cmp	r3, r4
 80034a2:	6025      	str	r5, [r4, #0]
 80034a4:	bf18      	it	ne
 80034a6:	6059      	strne	r1, [r3, #4]
 80034a8:	6863      	ldr	r3, [r4, #4]
 80034aa:	bf08      	it	eq
 80034ac:	f8c8 1000 	streq.w	r1, [r8]
 80034b0:	5162      	str	r2, [r4, r5]
 80034b2:	604b      	str	r3, [r1, #4]
 80034b4:	4638      	mov	r0, r7
 80034b6:	f104 060b 	add.w	r6, r4, #11
 80034ba:	f000 f829 	bl	8003510 <__malloc_unlock>
 80034be:	f026 0607 	bic.w	r6, r6, #7
 80034c2:	1d23      	adds	r3, r4, #4
 80034c4:	1af2      	subs	r2, r6, r3
 80034c6:	d0ae      	beq.n	8003426 <_malloc_r+0x22>
 80034c8:	1b9b      	subs	r3, r3, r6
 80034ca:	50a3      	str	r3, [r4, r2]
 80034cc:	e7ab      	b.n	8003426 <_malloc_r+0x22>
 80034ce:	42a3      	cmp	r3, r4
 80034d0:	6862      	ldr	r2, [r4, #4]
 80034d2:	d1dd      	bne.n	8003490 <_malloc_r+0x8c>
 80034d4:	f8c8 2000 	str.w	r2, [r8]
 80034d8:	e7ec      	b.n	80034b4 <_malloc_r+0xb0>
 80034da:	4623      	mov	r3, r4
 80034dc:	6864      	ldr	r4, [r4, #4]
 80034de:	e7ac      	b.n	800343a <_malloc_r+0x36>
 80034e0:	4634      	mov	r4, r6
 80034e2:	6876      	ldr	r6, [r6, #4]
 80034e4:	e7b4      	b.n	8003450 <_malloc_r+0x4c>
 80034e6:	4613      	mov	r3, r2
 80034e8:	e7cc      	b.n	8003484 <_malloc_r+0x80>
 80034ea:	230c      	movs	r3, #12
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	4638      	mov	r0, r7
 80034f0:	f000 f80e 	bl	8003510 <__malloc_unlock>
 80034f4:	e797      	b.n	8003426 <_malloc_r+0x22>
 80034f6:	6025      	str	r5, [r4, #0]
 80034f8:	e7dc      	b.n	80034b4 <_malloc_r+0xb0>
 80034fa:	605b      	str	r3, [r3, #4]
 80034fc:	deff      	udf	#255	; 0xff
 80034fe:	bf00      	nop
 8003500:	20000208 	.word	0x20000208

08003504 <__malloc_lock>:
 8003504:	4801      	ldr	r0, [pc, #4]	; (800350c <__malloc_lock+0x8>)
 8003506:	f7ff bf0f 	b.w	8003328 <__retarget_lock_acquire_recursive>
 800350a:	bf00      	nop
 800350c:	20000204 	.word	0x20000204

08003510 <__malloc_unlock>:
 8003510:	4801      	ldr	r0, [pc, #4]	; (8003518 <__malloc_unlock+0x8>)
 8003512:	f7ff bf0a 	b.w	800332a <__retarget_lock_release_recursive>
 8003516:	bf00      	nop
 8003518:	20000204 	.word	0x20000204

0800351c <__ssputs_r>:
 800351c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003520:	688e      	ldr	r6, [r1, #8]
 8003522:	461f      	mov	r7, r3
 8003524:	42be      	cmp	r6, r7
 8003526:	680b      	ldr	r3, [r1, #0]
 8003528:	4682      	mov	sl, r0
 800352a:	460c      	mov	r4, r1
 800352c:	4690      	mov	r8, r2
 800352e:	d82c      	bhi.n	800358a <__ssputs_r+0x6e>
 8003530:	898a      	ldrh	r2, [r1, #12]
 8003532:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003536:	d026      	beq.n	8003586 <__ssputs_r+0x6a>
 8003538:	6965      	ldr	r5, [r4, #20]
 800353a:	6909      	ldr	r1, [r1, #16]
 800353c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003540:	eba3 0901 	sub.w	r9, r3, r1
 8003544:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003548:	1c7b      	adds	r3, r7, #1
 800354a:	444b      	add	r3, r9
 800354c:	106d      	asrs	r5, r5, #1
 800354e:	429d      	cmp	r5, r3
 8003550:	bf38      	it	cc
 8003552:	461d      	movcc	r5, r3
 8003554:	0553      	lsls	r3, r2, #21
 8003556:	d527      	bpl.n	80035a8 <__ssputs_r+0x8c>
 8003558:	4629      	mov	r1, r5
 800355a:	f7ff ff53 	bl	8003404 <_malloc_r>
 800355e:	4606      	mov	r6, r0
 8003560:	b360      	cbz	r0, 80035bc <__ssputs_r+0xa0>
 8003562:	6921      	ldr	r1, [r4, #16]
 8003564:	464a      	mov	r2, r9
 8003566:	f000 faeb 	bl	8003b40 <memcpy>
 800356a:	89a3      	ldrh	r3, [r4, #12]
 800356c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003574:	81a3      	strh	r3, [r4, #12]
 8003576:	6126      	str	r6, [r4, #16]
 8003578:	6165      	str	r5, [r4, #20]
 800357a:	444e      	add	r6, r9
 800357c:	eba5 0509 	sub.w	r5, r5, r9
 8003580:	6026      	str	r6, [r4, #0]
 8003582:	60a5      	str	r5, [r4, #8]
 8003584:	463e      	mov	r6, r7
 8003586:	42be      	cmp	r6, r7
 8003588:	d900      	bls.n	800358c <__ssputs_r+0x70>
 800358a:	463e      	mov	r6, r7
 800358c:	6820      	ldr	r0, [r4, #0]
 800358e:	4632      	mov	r2, r6
 8003590:	4641      	mov	r1, r8
 8003592:	f000 faab 	bl	8003aec <memmove>
 8003596:	68a3      	ldr	r3, [r4, #8]
 8003598:	1b9b      	subs	r3, r3, r6
 800359a:	60a3      	str	r3, [r4, #8]
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	4433      	add	r3, r6
 80035a0:	6023      	str	r3, [r4, #0]
 80035a2:	2000      	movs	r0, #0
 80035a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035a8:	462a      	mov	r2, r5
 80035aa:	f000 fad7 	bl	8003b5c <_realloc_r>
 80035ae:	4606      	mov	r6, r0
 80035b0:	2800      	cmp	r0, #0
 80035b2:	d1e0      	bne.n	8003576 <__ssputs_r+0x5a>
 80035b4:	6921      	ldr	r1, [r4, #16]
 80035b6:	4650      	mov	r0, sl
 80035b8:	f7ff feb8 	bl	800332c <_free_r>
 80035bc:	230c      	movs	r3, #12
 80035be:	f8ca 3000 	str.w	r3, [sl]
 80035c2:	89a3      	ldrh	r3, [r4, #12]
 80035c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035c8:	81a3      	strh	r3, [r4, #12]
 80035ca:	f04f 30ff 	mov.w	r0, #4294967295
 80035ce:	e7e9      	b.n	80035a4 <__ssputs_r+0x88>

080035d0 <_svfiprintf_r>:
 80035d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035d4:	4698      	mov	r8, r3
 80035d6:	898b      	ldrh	r3, [r1, #12]
 80035d8:	061b      	lsls	r3, r3, #24
 80035da:	b09d      	sub	sp, #116	; 0x74
 80035dc:	4607      	mov	r7, r0
 80035de:	460d      	mov	r5, r1
 80035e0:	4614      	mov	r4, r2
 80035e2:	d50e      	bpl.n	8003602 <_svfiprintf_r+0x32>
 80035e4:	690b      	ldr	r3, [r1, #16]
 80035e6:	b963      	cbnz	r3, 8003602 <_svfiprintf_r+0x32>
 80035e8:	2140      	movs	r1, #64	; 0x40
 80035ea:	f7ff ff0b 	bl	8003404 <_malloc_r>
 80035ee:	6028      	str	r0, [r5, #0]
 80035f0:	6128      	str	r0, [r5, #16]
 80035f2:	b920      	cbnz	r0, 80035fe <_svfiprintf_r+0x2e>
 80035f4:	230c      	movs	r3, #12
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	f04f 30ff 	mov.w	r0, #4294967295
 80035fc:	e0d0      	b.n	80037a0 <_svfiprintf_r+0x1d0>
 80035fe:	2340      	movs	r3, #64	; 0x40
 8003600:	616b      	str	r3, [r5, #20]
 8003602:	2300      	movs	r3, #0
 8003604:	9309      	str	r3, [sp, #36]	; 0x24
 8003606:	2320      	movs	r3, #32
 8003608:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800360c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003610:	2330      	movs	r3, #48	; 0x30
 8003612:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80037b8 <_svfiprintf_r+0x1e8>
 8003616:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800361a:	f04f 0901 	mov.w	r9, #1
 800361e:	4623      	mov	r3, r4
 8003620:	469a      	mov	sl, r3
 8003622:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003626:	b10a      	cbz	r2, 800362c <_svfiprintf_r+0x5c>
 8003628:	2a25      	cmp	r2, #37	; 0x25
 800362a:	d1f9      	bne.n	8003620 <_svfiprintf_r+0x50>
 800362c:	ebba 0b04 	subs.w	fp, sl, r4
 8003630:	d00b      	beq.n	800364a <_svfiprintf_r+0x7a>
 8003632:	465b      	mov	r3, fp
 8003634:	4622      	mov	r2, r4
 8003636:	4629      	mov	r1, r5
 8003638:	4638      	mov	r0, r7
 800363a:	f7ff ff6f 	bl	800351c <__ssputs_r>
 800363e:	3001      	adds	r0, #1
 8003640:	f000 80a9 	beq.w	8003796 <_svfiprintf_r+0x1c6>
 8003644:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003646:	445a      	add	r2, fp
 8003648:	9209      	str	r2, [sp, #36]	; 0x24
 800364a:	f89a 3000 	ldrb.w	r3, [sl]
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 80a1 	beq.w	8003796 <_svfiprintf_r+0x1c6>
 8003654:	2300      	movs	r3, #0
 8003656:	f04f 32ff 	mov.w	r2, #4294967295
 800365a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800365e:	f10a 0a01 	add.w	sl, sl, #1
 8003662:	9304      	str	r3, [sp, #16]
 8003664:	9307      	str	r3, [sp, #28]
 8003666:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800366a:	931a      	str	r3, [sp, #104]	; 0x68
 800366c:	4654      	mov	r4, sl
 800366e:	2205      	movs	r2, #5
 8003670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003674:	4850      	ldr	r0, [pc, #320]	; (80037b8 <_svfiprintf_r+0x1e8>)
 8003676:	f7fc fdd3 	bl	8000220 <memchr>
 800367a:	9a04      	ldr	r2, [sp, #16]
 800367c:	b9d8      	cbnz	r0, 80036b6 <_svfiprintf_r+0xe6>
 800367e:	06d0      	lsls	r0, r2, #27
 8003680:	bf44      	itt	mi
 8003682:	2320      	movmi	r3, #32
 8003684:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003688:	0711      	lsls	r1, r2, #28
 800368a:	bf44      	itt	mi
 800368c:	232b      	movmi	r3, #43	; 0x2b
 800368e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003692:	f89a 3000 	ldrb.w	r3, [sl]
 8003696:	2b2a      	cmp	r3, #42	; 0x2a
 8003698:	d015      	beq.n	80036c6 <_svfiprintf_r+0xf6>
 800369a:	9a07      	ldr	r2, [sp, #28]
 800369c:	4654      	mov	r4, sl
 800369e:	2000      	movs	r0, #0
 80036a0:	f04f 0c0a 	mov.w	ip, #10
 80036a4:	4621      	mov	r1, r4
 80036a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036aa:	3b30      	subs	r3, #48	; 0x30
 80036ac:	2b09      	cmp	r3, #9
 80036ae:	d94d      	bls.n	800374c <_svfiprintf_r+0x17c>
 80036b0:	b1b0      	cbz	r0, 80036e0 <_svfiprintf_r+0x110>
 80036b2:	9207      	str	r2, [sp, #28]
 80036b4:	e014      	b.n	80036e0 <_svfiprintf_r+0x110>
 80036b6:	eba0 0308 	sub.w	r3, r0, r8
 80036ba:	fa09 f303 	lsl.w	r3, r9, r3
 80036be:	4313      	orrs	r3, r2
 80036c0:	9304      	str	r3, [sp, #16]
 80036c2:	46a2      	mov	sl, r4
 80036c4:	e7d2      	b.n	800366c <_svfiprintf_r+0x9c>
 80036c6:	9b03      	ldr	r3, [sp, #12]
 80036c8:	1d19      	adds	r1, r3, #4
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	9103      	str	r1, [sp, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bfbb      	ittet	lt
 80036d2:	425b      	neglt	r3, r3
 80036d4:	f042 0202 	orrlt.w	r2, r2, #2
 80036d8:	9307      	strge	r3, [sp, #28]
 80036da:	9307      	strlt	r3, [sp, #28]
 80036dc:	bfb8      	it	lt
 80036de:	9204      	strlt	r2, [sp, #16]
 80036e0:	7823      	ldrb	r3, [r4, #0]
 80036e2:	2b2e      	cmp	r3, #46	; 0x2e
 80036e4:	d10c      	bne.n	8003700 <_svfiprintf_r+0x130>
 80036e6:	7863      	ldrb	r3, [r4, #1]
 80036e8:	2b2a      	cmp	r3, #42	; 0x2a
 80036ea:	d134      	bne.n	8003756 <_svfiprintf_r+0x186>
 80036ec:	9b03      	ldr	r3, [sp, #12]
 80036ee:	1d1a      	adds	r2, r3, #4
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	9203      	str	r2, [sp, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bfb8      	it	lt
 80036f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80036fc:	3402      	adds	r4, #2
 80036fe:	9305      	str	r3, [sp, #20]
 8003700:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80037c8 <_svfiprintf_r+0x1f8>
 8003704:	7821      	ldrb	r1, [r4, #0]
 8003706:	2203      	movs	r2, #3
 8003708:	4650      	mov	r0, sl
 800370a:	f7fc fd89 	bl	8000220 <memchr>
 800370e:	b138      	cbz	r0, 8003720 <_svfiprintf_r+0x150>
 8003710:	9b04      	ldr	r3, [sp, #16]
 8003712:	eba0 000a 	sub.w	r0, r0, sl
 8003716:	2240      	movs	r2, #64	; 0x40
 8003718:	4082      	lsls	r2, r0
 800371a:	4313      	orrs	r3, r2
 800371c:	3401      	adds	r4, #1
 800371e:	9304      	str	r3, [sp, #16]
 8003720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003724:	4825      	ldr	r0, [pc, #148]	; (80037bc <_svfiprintf_r+0x1ec>)
 8003726:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800372a:	2206      	movs	r2, #6
 800372c:	f7fc fd78 	bl	8000220 <memchr>
 8003730:	2800      	cmp	r0, #0
 8003732:	d038      	beq.n	80037a6 <_svfiprintf_r+0x1d6>
 8003734:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <_svfiprintf_r+0x1f0>)
 8003736:	bb1b      	cbnz	r3, 8003780 <_svfiprintf_r+0x1b0>
 8003738:	9b03      	ldr	r3, [sp, #12]
 800373a:	3307      	adds	r3, #7
 800373c:	f023 0307 	bic.w	r3, r3, #7
 8003740:	3308      	adds	r3, #8
 8003742:	9303      	str	r3, [sp, #12]
 8003744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003746:	4433      	add	r3, r6
 8003748:	9309      	str	r3, [sp, #36]	; 0x24
 800374a:	e768      	b.n	800361e <_svfiprintf_r+0x4e>
 800374c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003750:	460c      	mov	r4, r1
 8003752:	2001      	movs	r0, #1
 8003754:	e7a6      	b.n	80036a4 <_svfiprintf_r+0xd4>
 8003756:	2300      	movs	r3, #0
 8003758:	3401      	adds	r4, #1
 800375a:	9305      	str	r3, [sp, #20]
 800375c:	4619      	mov	r1, r3
 800375e:	f04f 0c0a 	mov.w	ip, #10
 8003762:	4620      	mov	r0, r4
 8003764:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003768:	3a30      	subs	r2, #48	; 0x30
 800376a:	2a09      	cmp	r2, #9
 800376c:	d903      	bls.n	8003776 <_svfiprintf_r+0x1a6>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0c6      	beq.n	8003700 <_svfiprintf_r+0x130>
 8003772:	9105      	str	r1, [sp, #20]
 8003774:	e7c4      	b.n	8003700 <_svfiprintf_r+0x130>
 8003776:	fb0c 2101 	mla	r1, ip, r1, r2
 800377a:	4604      	mov	r4, r0
 800377c:	2301      	movs	r3, #1
 800377e:	e7f0      	b.n	8003762 <_svfiprintf_r+0x192>
 8003780:	ab03      	add	r3, sp, #12
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	462a      	mov	r2, r5
 8003786:	4b0f      	ldr	r3, [pc, #60]	; (80037c4 <_svfiprintf_r+0x1f4>)
 8003788:	a904      	add	r1, sp, #16
 800378a:	4638      	mov	r0, r7
 800378c:	f3af 8000 	nop.w
 8003790:	1c42      	adds	r2, r0, #1
 8003792:	4606      	mov	r6, r0
 8003794:	d1d6      	bne.n	8003744 <_svfiprintf_r+0x174>
 8003796:	89ab      	ldrh	r3, [r5, #12]
 8003798:	065b      	lsls	r3, r3, #25
 800379a:	f53f af2d 	bmi.w	80035f8 <_svfiprintf_r+0x28>
 800379e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037a0:	b01d      	add	sp, #116	; 0x74
 80037a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037a6:	ab03      	add	r3, sp, #12
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	462a      	mov	r2, r5
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <_svfiprintf_r+0x1f4>)
 80037ae:	a904      	add	r1, sp, #16
 80037b0:	4638      	mov	r0, r7
 80037b2:	f000 f879 	bl	80038a8 <_printf_i>
 80037b6:	e7eb      	b.n	8003790 <_svfiprintf_r+0x1c0>
 80037b8:	08003c48 	.word	0x08003c48
 80037bc:	08003c52 	.word	0x08003c52
 80037c0:	00000000 	.word	0x00000000
 80037c4:	0800351d 	.word	0x0800351d
 80037c8:	08003c4e 	.word	0x08003c4e

080037cc <_printf_common>:
 80037cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037d0:	4616      	mov	r6, r2
 80037d2:	4699      	mov	r9, r3
 80037d4:	688a      	ldr	r2, [r1, #8]
 80037d6:	690b      	ldr	r3, [r1, #16]
 80037d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037dc:	4293      	cmp	r3, r2
 80037de:	bfb8      	it	lt
 80037e0:	4613      	movlt	r3, r2
 80037e2:	6033      	str	r3, [r6, #0]
 80037e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037e8:	4607      	mov	r7, r0
 80037ea:	460c      	mov	r4, r1
 80037ec:	b10a      	cbz	r2, 80037f2 <_printf_common+0x26>
 80037ee:	3301      	adds	r3, #1
 80037f0:	6033      	str	r3, [r6, #0]
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	0699      	lsls	r1, r3, #26
 80037f6:	bf42      	ittt	mi
 80037f8:	6833      	ldrmi	r3, [r6, #0]
 80037fa:	3302      	addmi	r3, #2
 80037fc:	6033      	strmi	r3, [r6, #0]
 80037fe:	6825      	ldr	r5, [r4, #0]
 8003800:	f015 0506 	ands.w	r5, r5, #6
 8003804:	d106      	bne.n	8003814 <_printf_common+0x48>
 8003806:	f104 0a19 	add.w	sl, r4, #25
 800380a:	68e3      	ldr	r3, [r4, #12]
 800380c:	6832      	ldr	r2, [r6, #0]
 800380e:	1a9b      	subs	r3, r3, r2
 8003810:	42ab      	cmp	r3, r5
 8003812:	dc26      	bgt.n	8003862 <_printf_common+0x96>
 8003814:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003818:	1e13      	subs	r3, r2, #0
 800381a:	6822      	ldr	r2, [r4, #0]
 800381c:	bf18      	it	ne
 800381e:	2301      	movne	r3, #1
 8003820:	0692      	lsls	r2, r2, #26
 8003822:	d42b      	bmi.n	800387c <_printf_common+0xb0>
 8003824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003828:	4649      	mov	r1, r9
 800382a:	4638      	mov	r0, r7
 800382c:	47c0      	blx	r8
 800382e:	3001      	adds	r0, #1
 8003830:	d01e      	beq.n	8003870 <_printf_common+0xa4>
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	6922      	ldr	r2, [r4, #16]
 8003836:	f003 0306 	and.w	r3, r3, #6
 800383a:	2b04      	cmp	r3, #4
 800383c:	bf02      	ittt	eq
 800383e:	68e5      	ldreq	r5, [r4, #12]
 8003840:	6833      	ldreq	r3, [r6, #0]
 8003842:	1aed      	subeq	r5, r5, r3
 8003844:	68a3      	ldr	r3, [r4, #8]
 8003846:	bf0c      	ite	eq
 8003848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800384c:	2500      	movne	r5, #0
 800384e:	4293      	cmp	r3, r2
 8003850:	bfc4      	itt	gt
 8003852:	1a9b      	subgt	r3, r3, r2
 8003854:	18ed      	addgt	r5, r5, r3
 8003856:	2600      	movs	r6, #0
 8003858:	341a      	adds	r4, #26
 800385a:	42b5      	cmp	r5, r6
 800385c:	d11a      	bne.n	8003894 <_printf_common+0xc8>
 800385e:	2000      	movs	r0, #0
 8003860:	e008      	b.n	8003874 <_printf_common+0xa8>
 8003862:	2301      	movs	r3, #1
 8003864:	4652      	mov	r2, sl
 8003866:	4649      	mov	r1, r9
 8003868:	4638      	mov	r0, r7
 800386a:	47c0      	blx	r8
 800386c:	3001      	adds	r0, #1
 800386e:	d103      	bne.n	8003878 <_printf_common+0xac>
 8003870:	f04f 30ff 	mov.w	r0, #4294967295
 8003874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003878:	3501      	adds	r5, #1
 800387a:	e7c6      	b.n	800380a <_printf_common+0x3e>
 800387c:	18e1      	adds	r1, r4, r3
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	2030      	movs	r0, #48	; 0x30
 8003882:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003886:	4422      	add	r2, r4
 8003888:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800388c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003890:	3302      	adds	r3, #2
 8003892:	e7c7      	b.n	8003824 <_printf_common+0x58>
 8003894:	2301      	movs	r3, #1
 8003896:	4622      	mov	r2, r4
 8003898:	4649      	mov	r1, r9
 800389a:	4638      	mov	r0, r7
 800389c:	47c0      	blx	r8
 800389e:	3001      	adds	r0, #1
 80038a0:	d0e6      	beq.n	8003870 <_printf_common+0xa4>
 80038a2:	3601      	adds	r6, #1
 80038a4:	e7d9      	b.n	800385a <_printf_common+0x8e>
	...

080038a8 <_printf_i>:
 80038a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038ac:	7e0f      	ldrb	r7, [r1, #24]
 80038ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80038b0:	2f78      	cmp	r7, #120	; 0x78
 80038b2:	4691      	mov	r9, r2
 80038b4:	4680      	mov	r8, r0
 80038b6:	460c      	mov	r4, r1
 80038b8:	469a      	mov	sl, r3
 80038ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80038be:	d807      	bhi.n	80038d0 <_printf_i+0x28>
 80038c0:	2f62      	cmp	r7, #98	; 0x62
 80038c2:	d80a      	bhi.n	80038da <_printf_i+0x32>
 80038c4:	2f00      	cmp	r7, #0
 80038c6:	f000 80d4 	beq.w	8003a72 <_printf_i+0x1ca>
 80038ca:	2f58      	cmp	r7, #88	; 0x58
 80038cc:	f000 80c0 	beq.w	8003a50 <_printf_i+0x1a8>
 80038d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038d8:	e03a      	b.n	8003950 <_printf_i+0xa8>
 80038da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038de:	2b15      	cmp	r3, #21
 80038e0:	d8f6      	bhi.n	80038d0 <_printf_i+0x28>
 80038e2:	a101      	add	r1, pc, #4	; (adr r1, 80038e8 <_printf_i+0x40>)
 80038e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038e8:	08003941 	.word	0x08003941
 80038ec:	08003955 	.word	0x08003955
 80038f0:	080038d1 	.word	0x080038d1
 80038f4:	080038d1 	.word	0x080038d1
 80038f8:	080038d1 	.word	0x080038d1
 80038fc:	080038d1 	.word	0x080038d1
 8003900:	08003955 	.word	0x08003955
 8003904:	080038d1 	.word	0x080038d1
 8003908:	080038d1 	.word	0x080038d1
 800390c:	080038d1 	.word	0x080038d1
 8003910:	080038d1 	.word	0x080038d1
 8003914:	08003a59 	.word	0x08003a59
 8003918:	08003981 	.word	0x08003981
 800391c:	08003a13 	.word	0x08003a13
 8003920:	080038d1 	.word	0x080038d1
 8003924:	080038d1 	.word	0x080038d1
 8003928:	08003a7b 	.word	0x08003a7b
 800392c:	080038d1 	.word	0x080038d1
 8003930:	08003981 	.word	0x08003981
 8003934:	080038d1 	.word	0x080038d1
 8003938:	080038d1 	.word	0x080038d1
 800393c:	08003a1b 	.word	0x08003a1b
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	1d1a      	adds	r2, r3, #4
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	602a      	str	r2, [r5, #0]
 8003948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800394c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003950:	2301      	movs	r3, #1
 8003952:	e09f      	b.n	8003a94 <_printf_i+0x1ec>
 8003954:	6820      	ldr	r0, [r4, #0]
 8003956:	682b      	ldr	r3, [r5, #0]
 8003958:	0607      	lsls	r7, r0, #24
 800395a:	f103 0104 	add.w	r1, r3, #4
 800395e:	6029      	str	r1, [r5, #0]
 8003960:	d501      	bpl.n	8003966 <_printf_i+0xbe>
 8003962:	681e      	ldr	r6, [r3, #0]
 8003964:	e003      	b.n	800396e <_printf_i+0xc6>
 8003966:	0646      	lsls	r6, r0, #25
 8003968:	d5fb      	bpl.n	8003962 <_printf_i+0xba>
 800396a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800396e:	2e00      	cmp	r6, #0
 8003970:	da03      	bge.n	800397a <_printf_i+0xd2>
 8003972:	232d      	movs	r3, #45	; 0x2d
 8003974:	4276      	negs	r6, r6
 8003976:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800397a:	485a      	ldr	r0, [pc, #360]	; (8003ae4 <_printf_i+0x23c>)
 800397c:	230a      	movs	r3, #10
 800397e:	e012      	b.n	80039a6 <_printf_i+0xfe>
 8003980:	682b      	ldr	r3, [r5, #0]
 8003982:	6820      	ldr	r0, [r4, #0]
 8003984:	1d19      	adds	r1, r3, #4
 8003986:	6029      	str	r1, [r5, #0]
 8003988:	0605      	lsls	r5, r0, #24
 800398a:	d501      	bpl.n	8003990 <_printf_i+0xe8>
 800398c:	681e      	ldr	r6, [r3, #0]
 800398e:	e002      	b.n	8003996 <_printf_i+0xee>
 8003990:	0641      	lsls	r1, r0, #25
 8003992:	d5fb      	bpl.n	800398c <_printf_i+0xe4>
 8003994:	881e      	ldrh	r6, [r3, #0]
 8003996:	4853      	ldr	r0, [pc, #332]	; (8003ae4 <_printf_i+0x23c>)
 8003998:	2f6f      	cmp	r7, #111	; 0x6f
 800399a:	bf0c      	ite	eq
 800399c:	2308      	moveq	r3, #8
 800399e:	230a      	movne	r3, #10
 80039a0:	2100      	movs	r1, #0
 80039a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039a6:	6865      	ldr	r5, [r4, #4]
 80039a8:	60a5      	str	r5, [r4, #8]
 80039aa:	2d00      	cmp	r5, #0
 80039ac:	bfa2      	ittt	ge
 80039ae:	6821      	ldrge	r1, [r4, #0]
 80039b0:	f021 0104 	bicge.w	r1, r1, #4
 80039b4:	6021      	strge	r1, [r4, #0]
 80039b6:	b90e      	cbnz	r6, 80039bc <_printf_i+0x114>
 80039b8:	2d00      	cmp	r5, #0
 80039ba:	d04b      	beq.n	8003a54 <_printf_i+0x1ac>
 80039bc:	4615      	mov	r5, r2
 80039be:	fbb6 f1f3 	udiv	r1, r6, r3
 80039c2:	fb03 6711 	mls	r7, r3, r1, r6
 80039c6:	5dc7      	ldrb	r7, [r0, r7]
 80039c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80039cc:	4637      	mov	r7, r6
 80039ce:	42bb      	cmp	r3, r7
 80039d0:	460e      	mov	r6, r1
 80039d2:	d9f4      	bls.n	80039be <_printf_i+0x116>
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d10b      	bne.n	80039f0 <_printf_i+0x148>
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	07de      	lsls	r6, r3, #31
 80039dc:	d508      	bpl.n	80039f0 <_printf_i+0x148>
 80039de:	6923      	ldr	r3, [r4, #16]
 80039e0:	6861      	ldr	r1, [r4, #4]
 80039e2:	4299      	cmp	r1, r3
 80039e4:	bfde      	ittt	le
 80039e6:	2330      	movle	r3, #48	; 0x30
 80039e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039f0:	1b52      	subs	r2, r2, r5
 80039f2:	6122      	str	r2, [r4, #16]
 80039f4:	f8cd a000 	str.w	sl, [sp]
 80039f8:	464b      	mov	r3, r9
 80039fa:	aa03      	add	r2, sp, #12
 80039fc:	4621      	mov	r1, r4
 80039fe:	4640      	mov	r0, r8
 8003a00:	f7ff fee4 	bl	80037cc <_printf_common>
 8003a04:	3001      	adds	r0, #1
 8003a06:	d14a      	bne.n	8003a9e <_printf_i+0x1f6>
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0c:	b004      	add	sp, #16
 8003a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	f043 0320 	orr.w	r3, r3, #32
 8003a18:	6023      	str	r3, [r4, #0]
 8003a1a:	4833      	ldr	r0, [pc, #204]	; (8003ae8 <_printf_i+0x240>)
 8003a1c:	2778      	movs	r7, #120	; 0x78
 8003a1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	6829      	ldr	r1, [r5, #0]
 8003a26:	061f      	lsls	r7, r3, #24
 8003a28:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a2c:	d402      	bmi.n	8003a34 <_printf_i+0x18c>
 8003a2e:	065f      	lsls	r7, r3, #25
 8003a30:	bf48      	it	mi
 8003a32:	b2b6      	uxthmi	r6, r6
 8003a34:	07df      	lsls	r7, r3, #31
 8003a36:	bf48      	it	mi
 8003a38:	f043 0320 	orrmi.w	r3, r3, #32
 8003a3c:	6029      	str	r1, [r5, #0]
 8003a3e:	bf48      	it	mi
 8003a40:	6023      	strmi	r3, [r4, #0]
 8003a42:	b91e      	cbnz	r6, 8003a4c <_printf_i+0x1a4>
 8003a44:	6823      	ldr	r3, [r4, #0]
 8003a46:	f023 0320 	bic.w	r3, r3, #32
 8003a4a:	6023      	str	r3, [r4, #0]
 8003a4c:	2310      	movs	r3, #16
 8003a4e:	e7a7      	b.n	80039a0 <_printf_i+0xf8>
 8003a50:	4824      	ldr	r0, [pc, #144]	; (8003ae4 <_printf_i+0x23c>)
 8003a52:	e7e4      	b.n	8003a1e <_printf_i+0x176>
 8003a54:	4615      	mov	r5, r2
 8003a56:	e7bd      	b.n	80039d4 <_printf_i+0x12c>
 8003a58:	682b      	ldr	r3, [r5, #0]
 8003a5a:	6826      	ldr	r6, [r4, #0]
 8003a5c:	6961      	ldr	r1, [r4, #20]
 8003a5e:	1d18      	adds	r0, r3, #4
 8003a60:	6028      	str	r0, [r5, #0]
 8003a62:	0635      	lsls	r5, r6, #24
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	d501      	bpl.n	8003a6c <_printf_i+0x1c4>
 8003a68:	6019      	str	r1, [r3, #0]
 8003a6a:	e002      	b.n	8003a72 <_printf_i+0x1ca>
 8003a6c:	0670      	lsls	r0, r6, #25
 8003a6e:	d5fb      	bpl.n	8003a68 <_printf_i+0x1c0>
 8003a70:	8019      	strh	r1, [r3, #0]
 8003a72:	2300      	movs	r3, #0
 8003a74:	6123      	str	r3, [r4, #16]
 8003a76:	4615      	mov	r5, r2
 8003a78:	e7bc      	b.n	80039f4 <_printf_i+0x14c>
 8003a7a:	682b      	ldr	r3, [r5, #0]
 8003a7c:	1d1a      	adds	r2, r3, #4
 8003a7e:	602a      	str	r2, [r5, #0]
 8003a80:	681d      	ldr	r5, [r3, #0]
 8003a82:	6862      	ldr	r2, [r4, #4]
 8003a84:	2100      	movs	r1, #0
 8003a86:	4628      	mov	r0, r5
 8003a88:	f7fc fbca 	bl	8000220 <memchr>
 8003a8c:	b108      	cbz	r0, 8003a92 <_printf_i+0x1ea>
 8003a8e:	1b40      	subs	r0, r0, r5
 8003a90:	6060      	str	r0, [r4, #4]
 8003a92:	6863      	ldr	r3, [r4, #4]
 8003a94:	6123      	str	r3, [r4, #16]
 8003a96:	2300      	movs	r3, #0
 8003a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a9c:	e7aa      	b.n	80039f4 <_printf_i+0x14c>
 8003a9e:	6923      	ldr	r3, [r4, #16]
 8003aa0:	462a      	mov	r2, r5
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	4640      	mov	r0, r8
 8003aa6:	47d0      	blx	sl
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	d0ad      	beq.n	8003a08 <_printf_i+0x160>
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	079b      	lsls	r3, r3, #30
 8003ab0:	d413      	bmi.n	8003ada <_printf_i+0x232>
 8003ab2:	68e0      	ldr	r0, [r4, #12]
 8003ab4:	9b03      	ldr	r3, [sp, #12]
 8003ab6:	4298      	cmp	r0, r3
 8003ab8:	bfb8      	it	lt
 8003aba:	4618      	movlt	r0, r3
 8003abc:	e7a6      	b.n	8003a0c <_printf_i+0x164>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	4632      	mov	r2, r6
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	4640      	mov	r0, r8
 8003ac6:	47d0      	blx	sl
 8003ac8:	3001      	adds	r0, #1
 8003aca:	d09d      	beq.n	8003a08 <_printf_i+0x160>
 8003acc:	3501      	adds	r5, #1
 8003ace:	68e3      	ldr	r3, [r4, #12]
 8003ad0:	9903      	ldr	r1, [sp, #12]
 8003ad2:	1a5b      	subs	r3, r3, r1
 8003ad4:	42ab      	cmp	r3, r5
 8003ad6:	dcf2      	bgt.n	8003abe <_printf_i+0x216>
 8003ad8:	e7eb      	b.n	8003ab2 <_printf_i+0x20a>
 8003ada:	2500      	movs	r5, #0
 8003adc:	f104 0619 	add.w	r6, r4, #25
 8003ae0:	e7f5      	b.n	8003ace <_printf_i+0x226>
 8003ae2:	bf00      	nop
 8003ae4:	08003c59 	.word	0x08003c59
 8003ae8:	08003c6a 	.word	0x08003c6a

08003aec <memmove>:
 8003aec:	4288      	cmp	r0, r1
 8003aee:	b510      	push	{r4, lr}
 8003af0:	eb01 0402 	add.w	r4, r1, r2
 8003af4:	d902      	bls.n	8003afc <memmove+0x10>
 8003af6:	4284      	cmp	r4, r0
 8003af8:	4623      	mov	r3, r4
 8003afa:	d807      	bhi.n	8003b0c <memmove+0x20>
 8003afc:	1e43      	subs	r3, r0, #1
 8003afe:	42a1      	cmp	r1, r4
 8003b00:	d008      	beq.n	8003b14 <memmove+0x28>
 8003b02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b0a:	e7f8      	b.n	8003afe <memmove+0x12>
 8003b0c:	4402      	add	r2, r0
 8003b0e:	4601      	mov	r1, r0
 8003b10:	428a      	cmp	r2, r1
 8003b12:	d100      	bne.n	8003b16 <memmove+0x2a>
 8003b14:	bd10      	pop	{r4, pc}
 8003b16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b1e:	e7f7      	b.n	8003b10 <memmove+0x24>

08003b20 <_sbrk_r>:
 8003b20:	b538      	push	{r3, r4, r5, lr}
 8003b22:	4d06      	ldr	r5, [pc, #24]	; (8003b3c <_sbrk_r+0x1c>)
 8003b24:	2300      	movs	r3, #0
 8003b26:	4604      	mov	r4, r0
 8003b28:	4608      	mov	r0, r1
 8003b2a:	602b      	str	r3, [r5, #0]
 8003b2c:	f7fd f844 	bl	8000bb8 <_sbrk>
 8003b30:	1c43      	adds	r3, r0, #1
 8003b32:	d102      	bne.n	8003b3a <_sbrk_r+0x1a>
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	b103      	cbz	r3, 8003b3a <_sbrk_r+0x1a>
 8003b38:	6023      	str	r3, [r4, #0]
 8003b3a:	bd38      	pop	{r3, r4, r5, pc}
 8003b3c:	20000200 	.word	0x20000200

08003b40 <memcpy>:
 8003b40:	440a      	add	r2, r1
 8003b42:	4291      	cmp	r1, r2
 8003b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b48:	d100      	bne.n	8003b4c <memcpy+0xc>
 8003b4a:	4770      	bx	lr
 8003b4c:	b510      	push	{r4, lr}
 8003b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b56:	4291      	cmp	r1, r2
 8003b58:	d1f9      	bne.n	8003b4e <memcpy+0xe>
 8003b5a:	bd10      	pop	{r4, pc}

08003b5c <_realloc_r>:
 8003b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b60:	4680      	mov	r8, r0
 8003b62:	4614      	mov	r4, r2
 8003b64:	460e      	mov	r6, r1
 8003b66:	b921      	cbnz	r1, 8003b72 <_realloc_r+0x16>
 8003b68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	f7ff bc49 	b.w	8003404 <_malloc_r>
 8003b72:	b92a      	cbnz	r2, 8003b80 <_realloc_r+0x24>
 8003b74:	f7ff fbda 	bl	800332c <_free_r>
 8003b78:	4625      	mov	r5, r4
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b80:	f000 f81b 	bl	8003bba <_malloc_usable_size_r>
 8003b84:	4284      	cmp	r4, r0
 8003b86:	4607      	mov	r7, r0
 8003b88:	d802      	bhi.n	8003b90 <_realloc_r+0x34>
 8003b8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003b8e:	d812      	bhi.n	8003bb6 <_realloc_r+0x5a>
 8003b90:	4621      	mov	r1, r4
 8003b92:	4640      	mov	r0, r8
 8003b94:	f7ff fc36 	bl	8003404 <_malloc_r>
 8003b98:	4605      	mov	r5, r0
 8003b9a:	2800      	cmp	r0, #0
 8003b9c:	d0ed      	beq.n	8003b7a <_realloc_r+0x1e>
 8003b9e:	42bc      	cmp	r4, r7
 8003ba0:	4622      	mov	r2, r4
 8003ba2:	4631      	mov	r1, r6
 8003ba4:	bf28      	it	cs
 8003ba6:	463a      	movcs	r2, r7
 8003ba8:	f7ff ffca 	bl	8003b40 <memcpy>
 8003bac:	4631      	mov	r1, r6
 8003bae:	4640      	mov	r0, r8
 8003bb0:	f7ff fbbc 	bl	800332c <_free_r>
 8003bb4:	e7e1      	b.n	8003b7a <_realloc_r+0x1e>
 8003bb6:	4635      	mov	r5, r6
 8003bb8:	e7df      	b.n	8003b7a <_realloc_r+0x1e>

08003bba <_malloc_usable_size_r>:
 8003bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bbe:	1f18      	subs	r0, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	bfbc      	itt	lt
 8003bc4:	580b      	ldrlt	r3, [r1, r0]
 8003bc6:	18c0      	addlt	r0, r0, r3
 8003bc8:	4770      	bx	lr
	...

08003bcc <_init>:
 8003bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bce:	bf00      	nop
 8003bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bd2:	bc08      	pop	{r3}
 8003bd4:	469e      	mov	lr, r3
 8003bd6:	4770      	bx	lr

08003bd8 <_fini>:
 8003bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bda:	bf00      	nop
 8003bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bde:	bc08      	pop	{r3}
 8003be0:	469e      	mov	lr, r3
 8003be2:	4770      	bx	lr
