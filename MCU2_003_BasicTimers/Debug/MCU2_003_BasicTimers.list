
MCU2_003_BasicTimers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000405c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800422c  0800422c  0001422c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042c4  080042c4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080042c4  080042c4  000142c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042cc  080042cc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080042d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000005c  08004330  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08004330  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df8d  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002013  00000000  00000000  0002e05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc0  00000000  00000000  00030070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009fc  00000000  00000000  00030d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000223fd  00000000  00000000  0003172c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000100c7  00000000  00000000  00053b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0fa3  00000000  00000000  00063bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a98  00000000  00000000  00134b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0013862c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004214 	.word	0x08004214

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004214 	.word	0x08004214

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <SysTick_Handler>:
 *      Author: DM
 */

#include "main.h"

void SysTick_Handler(void){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0

	HAL_IncTick();
 80005c0:	f000 fc3a 	bl	8000e38 <HAL_IncTick>

}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <USART2_IRQHandler>:


void USART2_IRQHandler(void){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0

	extern UART_HandleTypeDef husart2;
	HAL_UART_IRQHandler(&husart2);
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <USART2_IRQHandler+0x10>)
 80005ce:	f002 fa57 	bl	8002a80 <HAL_UART_IRQHandler>

}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000078 	.word	0x20000078

080005dc <TIM6_DAC_IRQHandler>:


void TIM6_DAC_IRQHandler(void){
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

	extern TIM_HandleTypeDef htim6;
	HAL_TIM_IRQHandler(&htim6);
 80005e0:	4802      	ldr	r0, [pc, #8]	; (80005ec <TIM6_DAC_IRQHandler+0x10>)
 80005e2:	f001 ff99 	bl	8002518 <HAL_TIM_IRQHandler>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200000c0 	.word	0x200000c0

080005f0 <main>:

static void RCC_Print_Clocks(void);
UART_HandleTypeDef husart2 = {0};
TIM_HandleTypeDef htim6 = {0};

int main(void){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

	HAL_Init();
 80005f4:	f000 fbce 	bl	8000d94 <HAL_Init>
	SystemClock_Config((uint32_t)180e3);
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <main+0x20>)
 80005fa:	f000 f80d 	bl	8000618 <SystemClock_Config>
//	UART2_Init();
	LED_Init();
 80005fe:	f000 fa79 	bl	8000af4 <LED_Init>
	TIM6_Init();
 8000602:	f000 fa59 	bl	8000ab8 <TIM6_Init>

	HAL_TIM_Base_Start_IT(&htim6);
 8000606:	4803      	ldr	r0, [pc, #12]	; (8000614 <main+0x24>)
 8000608:	f001 ff16 	bl	8002438 <HAL_TIM_Base_Start_IT>

	while( true );
 800060c:	e7fe      	b.n	800060c <main+0x1c>
 800060e:	bf00      	nop
 8000610:	0002bf20 	.word	0x0002bf20
 8000614:	200000c0 	.word	0x200000c0

08000618 <SystemClock_Config>:

	return 0;
}


void SystemClock_Config(uint32_t ClockFreq){
 8000618:	b580      	push	{r7, lr}
 800061a:	b0a8      	sub	sp, #160	; 0xa0
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	//PWR_REGULATOR_VOLTAGE_SCALE2         PWR_CR_VOS_1           /* Scale 2 mode: the maximum value of fHCLK is 144 MHz. It can be extended to                                                                       168 MHz by activating the over-drive mode. */
	//PWR_REGULATOR_VOLTAGE_SCALE3         PWR_CR_VOS_0           /* Scale 3 mode: the maximum value of fHCLK is 120 MHz. */

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]
 8000624:	4bad      	ldr	r3, [pc, #692]	; (80008dc <SystemClock_Config+0x2c4>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4aac      	ldr	r2, [pc, #688]	; (80008dc <SystemClock_Config+0x2c4>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4baa      	ldr	r3, [pc, #680]	; (80008dc <SystemClock_Config+0x2c4>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	623b      	str	r3, [r7, #32]
 800063a:	6a3b      	ldr	r3, [r7, #32]

	RCC_OscInitTypeDef osc_status = {0}, osc_init = {0};
 800063c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000640:	2234      	movs	r2, #52	; 0x34
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f003 f961 	bl	800390c <memset>
 800064a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800064e:	2234      	movs	r2, #52	; 0x34
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f003 f95a 	bl	800390c <memset>
	RCC_ClkInitTypeDef clk_init = {0};
 8000658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

	HAL_RCC_GetOscConfig(&osc_status);
 8000668:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800066c:	4618      	mov	r0, r3
 800066e:	f001 fdf7 	bl	8002260 <HAL_RCC_GetOscConfig>

	// Turn off PLL before change its configuration
	if( osc_status.PLL.PLLState == RCC_PLL_ON){
 8000672:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000676:	2b02      	cmp	r3, #2
 8000678:	d13a      	bne.n	80006f0 <SystemClock_Config+0xd8>


		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800067a:	230f      	movs	r3, #15
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
		clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800067e:	2300      	movs	r3, #0
 8000680:	62bb      	str	r3, [r7, #40]	; 0x28
		clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	62fb      	str	r3, [r7, #44]	; 0x2c
		clk_init.APB1CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	633b      	str	r3, [r7, #48]	; 0x30
		clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	637b      	str	r3, [r7, #52]	; 0x34

		// Change to HSI clock as SYSCLOCK
		if (HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_0) != HAL_OK)		Error_Handler();
 800068e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fffb 	bl	8001690 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x8c>
 80006a0:	f000 fa68 	bl	8000b74 <Error_Handler>

		osc_init.OscillatorType = RCC_OSCILLATORTYPE_NONE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63bb      	str	r3, [r7, #56]	; 0x38
		osc_init.PLL.PLLState = RCC_PLL_OFF;
 80006a8:	2301      	movs	r3, #1
 80006aa:	653b      	str	r3, [r7, #80]	; 0x50

		// Turn OFF PLL
		if (HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_5) != HAL_OK)		Error_Handler();
 80006ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b0:	2105      	movs	r1, #5
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 ffec 	bl	8001690 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xaa>
 80006be:	f000 fa59 	bl	8000b74 <Error_Handler>

		if (HAL_PWREx_DisableOverDrive() != HAL_OK)							Error_Handler();
 80006c2:	f000 ff95 	bl	80015f0 <HAL_PWREx_DisableOverDrive>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xb8>
 80006cc:	f000 fa52 	bl	8000b74 <Error_Handler>
		__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
 80006d4:	4b82      	ldr	r3, [pc, #520]	; (80008e0 <SystemClock_Config+0x2c8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006dc:	4a80      	ldr	r2, [pc, #512]	; (80008e0 <SystemClock_Config+0x2c8>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b7e      	ldr	r3, [pc, #504]	; (80008e0 <SystemClock_Config+0x2c8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ec:	61fb      	str	r3, [r7, #28]
 80006ee:	69fb      	ldr	r3, [r7, #28]
	}

	switch (ClockFreq) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a7c      	ldr	r2, [pc, #496]	; (80008e4 <SystemClock_Config+0x2cc>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d019      	beq.n	800072c <SystemClock_Config+0x114>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a7a      	ldr	r2, [pc, #488]	; (80008e4 <SystemClock_Config+0x2cc>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	f200 813d 	bhi.w	800097c <SystemClock_Config+0x364>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a78      	ldr	r2, [pc, #480]	; (80008e8 <SystemClock_Config+0x2d0>)
 8000706:	4293      	cmp	r3, r2
 8000708:	f000 80f2 	beq.w	80008f0 <SystemClock_Config+0x2d8>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a76      	ldr	r2, [pc, #472]	; (80008e8 <SystemClock_Config+0x2d0>)
 8000710:	4293      	cmp	r3, r2
 8000712:	f200 8133 	bhi.w	800097c <SystemClock_Config+0x364>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f24c 3250 	movw	r2, #50000	; 0xc350
 800071c:	4293      	cmp	r3, r2
 800071e:	d051      	beq.n	80007c4 <SystemClock_Config+0x1ac>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a72      	ldr	r2, [pc, #456]	; (80008ec <SystemClock_Config+0x2d4>)
 8000724:	4293      	cmp	r3, r2
 8000726:	f000 8093 	beq.w	8000850 <SystemClock_Config+0x238>

				if (HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_3) != HAL_OK)		Error_Handler();

			break;
		default:
			break;
 800072a:	e127      	b.n	800097c <SystemClock_Config+0x364>
				__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
 8000730:	4b6b      	ldr	r3, [pc, #428]	; (80008e0 <SystemClock_Config+0x2c8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a6a      	ldr	r2, [pc, #424]	; (80008e0 <SystemClock_Config+0x2c8>)
 8000736:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b68      	ldr	r3, [pc, #416]	; (80008e0 <SystemClock_Config+0x2c8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000744:	61bb      	str	r3, [r7, #24]
 8000746:	69bb      	ldr	r3, [r7, #24]
				if (HAL_PWREx_EnableOverDrive() != HAL_OK)							Error_Handler();
 8000748:	f000 ff02 	bl	8001550 <HAL_PWREx_EnableOverDrive>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x13e>
 8000752:	f000 fa0f 	bl	8000b74 <Error_Handler>
				osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000756:	2301      	movs	r3, #1
 8000758:	63bb      	str	r3, [r7, #56]	; 0x38
				osc_init.HSEState = RCC_HSE_ON;
 800075a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
				osc_init.PLL.PLLState = RCC_PLL_ON;
 8000760:	2302      	movs	r3, #2
 8000762:	653b      	str	r3, [r7, #80]	; 0x50
				osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000764:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000768:	657b      	str	r3, [r7, #84]	; 0x54
				osc_init.PLL.PLLM = 4;
 800076a:	2304      	movs	r3, #4
 800076c:	65bb      	str	r3, [r7, #88]	; 0x58
				osc_init.PLL.PLLN = 180;
 800076e:	23b4      	movs	r3, #180	; 0xb4
 8000770:	65fb      	str	r3, [r7, #92]	; 0x5c
				osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8000772:	2302      	movs	r3, #2
 8000774:	663b      	str	r3, [r7, #96]	; 0x60
				osc_init.PLL.PLLQ = 2;
 8000776:	2302      	movs	r3, #2
 8000778:	667b      	str	r3, [r7, #100]	; 0x64
				osc_init.PLL.PLLR = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	66bb      	str	r3, [r7, #104]	; 0x68
				if (HAL_RCC_OscConfig(&osc_init) != HAL_OK)							Error_Handler();
 800077e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000782:	4618      	mov	r0, r3
 8000784:	f001 face 	bl	8001d24 <HAL_RCC_OscConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x17a>
 800078e:	f000 f9f1 	bl	8000b74 <Error_Handler>
				clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000792:	230f      	movs	r3, #15
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
				clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000796:	2302      	movs	r3, #2
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
				clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	62fb      	str	r3, [r7, #44]	; 0x2c
				clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 800079e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a2:	633b      	str	r3, [r7, #48]	; 0x30
				clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a8:	637b      	str	r3, [r7, #52]	; 0x34
				if (HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_5) != HAL_OK)		Error_Handler();
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	2105      	movs	r1, #5
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 ff6d 	bl	8001690 <HAL_RCC_ClockConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	f000 80e1 	beq.w	8000980 <SystemClock_Config+0x368>
 80007be:	f000 f9d9 	bl	8000b74 <Error_Handler>
			break;
 80007c2:	e0dd      	b.n	8000980 <SystemClock_Config+0x368>
				__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	4b45      	ldr	r3, [pc, #276]	; (80008e0 <SystemClock_Config+0x2c8>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d0:	4a43      	ldr	r2, [pc, #268]	; (80008e0 <SystemClock_Config+0x2c8>)
 80007d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b41      	ldr	r3, [pc, #260]	; (80008e0 <SystemClock_Config+0x2c8>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	697b      	ldr	r3, [r7, #20]
				osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e4:	2301      	movs	r3, #1
 80007e6:	63bb      	str	r3, [r7, #56]	; 0x38
				osc_init.HSEState = RCC_HSE_ON;
 80007e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ec:	63fb      	str	r3, [r7, #60]	; 0x3c
				osc_init.PLL.PLLState = RCC_PLL_ON;
 80007ee:	2302      	movs	r3, #2
 80007f0:	653b      	str	r3, [r7, #80]	; 0x50
				osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007f6:	657b      	str	r3, [r7, #84]	; 0x54
				osc_init.PLL.PLLM = 4;
 80007f8:	2304      	movs	r3, #4
 80007fa:	65bb      	str	r3, [r7, #88]	; 0x58
				osc_init.PLL.PLLN = 50;
 80007fc:	2332      	movs	r3, #50	; 0x32
 80007fe:	65fb      	str	r3, [r7, #92]	; 0x5c
				osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8000800:	2302      	movs	r3, #2
 8000802:	663b      	str	r3, [r7, #96]	; 0x60
				osc_init.PLL.PLLQ = 2;
 8000804:	2302      	movs	r3, #2
 8000806:	667b      	str	r3, [r7, #100]	; 0x64
				osc_init.PLL.PLLR = 2;
 8000808:	2302      	movs	r3, #2
 800080a:	66bb      	str	r3, [r7, #104]	; 0x68
				if (HAL_RCC_OscConfig(&osc_init) != HAL_OK)							Error_Handler();
 800080c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000810:	4618      	mov	r0, r3
 8000812:	f001 fa87 	bl	8001d24 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x208>
 800081c:	f000 f9aa 	bl	8000b74 <Error_Handler>
				clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000820:	230f      	movs	r3, #15
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
				clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000824:	2302      	movs	r3, #2
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
				clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
				clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800082c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000830:	633b      	str	r3, [r7, #48]	; 0x30
				clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	637b      	str	r3, [r7, #52]	; 0x34
				if (HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_1) != HAL_OK)		Error_Handler();
 8000836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083a:	2101      	movs	r1, #1
 800083c:	4618      	mov	r0, r3
 800083e:	f000 ff27 	bl	8001690 <HAL_RCC_ClockConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	f000 809d 	beq.w	8000984 <SystemClock_Config+0x36c>
 800084a:	f000 f993 	bl	8000b74 <Error_Handler>
			break;
 800084e:	e099      	b.n	8000984 <SystemClock_Config+0x36c>
				__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <SystemClock_Config+0x2c8>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800085c:	4a20      	ldr	r2, [pc, #128]	; (80008e0 <SystemClock_Config+0x2c8>)
 800085e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <SystemClock_Config+0x2c8>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	693b      	ldr	r3, [r7, #16]
				osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000870:	2301      	movs	r3, #1
 8000872:	63bb      	str	r3, [r7, #56]	; 0x38
				osc_init.HSEState = RCC_HSE_ON;
 8000874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000878:	63fb      	str	r3, [r7, #60]	; 0x3c
				osc_init.PLL.PLLState = RCC_PLL_ON;
 800087a:	2302      	movs	r3, #2
 800087c:	653b      	str	r3, [r7, #80]	; 0x50
				osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000882:	657b      	str	r3, [r7, #84]	; 0x54
				osc_init.PLL.PLLM = 4;
 8000884:	2304      	movs	r3, #4
 8000886:	65bb      	str	r3, [r7, #88]	; 0x58
				osc_init.PLL.PLLN = 84;
 8000888:	2354      	movs	r3, #84	; 0x54
 800088a:	65fb      	str	r3, [r7, #92]	; 0x5c
				osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 800088c:	2302      	movs	r3, #2
 800088e:	663b      	str	r3, [r7, #96]	; 0x60
				osc_init.PLL.PLLQ = 2;
 8000890:	2302      	movs	r3, #2
 8000892:	667b      	str	r3, [r7, #100]	; 0x64
				osc_init.PLL.PLLR = 2;
 8000894:	2302      	movs	r3, #2
 8000896:	66bb      	str	r3, [r7, #104]	; 0x68
				if (HAL_RCC_OscConfig(&osc_init) != HAL_OK)							Error_Handler();
 8000898:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800089c:	4618      	mov	r0, r3
 800089e:	f001 fa41 	bl	8001d24 <HAL_RCC_OscConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x294>
 80008a8:	f000 f964 	bl	8000b74 <Error_Handler>
				clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80008ac:	230f      	movs	r3, #15
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
				clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b0:	2302      	movs	r3, #2
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
				clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
				clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008bc:	633b      	str	r3, [r7, #48]	; 0x30
				clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	637b      	str	r3, [r7, #52]	; 0x34
				if (HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_2) != HAL_OK)		Error_Handler();
 80008c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c6:	2102      	movs	r1, #2
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 fee1 	bl	8001690 <HAL_RCC_ClockConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d059      	beq.n	8000988 <SystemClock_Config+0x370>
 80008d4:	f000 f94e 	bl	8000b74 <Error_Handler>
			break;
 80008d8:	e056      	b.n	8000988 <SystemClock_Config+0x370>
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40007000 	.word	0x40007000
 80008e4:	0002bf20 	.word	0x0002bf20
 80008e8:	0001d4c0 	.word	0x0001d4c0
 80008ec:	00014820 	.word	0x00014820
				__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	4b2a      	ldr	r3, [pc, #168]	; (80009a0 <SystemClock_Config+0x388>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008fc:	4a28      	ldr	r2, [pc, #160]	; (80009a0 <SystemClock_Config+0x388>)
 80008fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000902:	6013      	str	r3, [r2, #0]
 8000904:	4b26      	ldr	r3, [pc, #152]	; (80009a0 <SystemClock_Config+0x388>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
				osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000910:	2301      	movs	r3, #1
 8000912:	63bb      	str	r3, [r7, #56]	; 0x38
				osc_init.HSEState = RCC_HSE_ON;
 8000914:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000918:	63fb      	str	r3, [r7, #60]	; 0x3c
				osc_init.PLL.PLLState = RCC_PLL_ON;
 800091a:	2302      	movs	r3, #2
 800091c:	653b      	str	r3, [r7, #80]	; 0x50
				osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800091e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000922:	657b      	str	r3, [r7, #84]	; 0x54
				osc_init.PLL.PLLM = 4;
 8000924:	2304      	movs	r3, #4
 8000926:	65bb      	str	r3, [r7, #88]	; 0x58
				osc_init.PLL.PLLN = 120;
 8000928:	2378      	movs	r3, #120	; 0x78
 800092a:	65fb      	str	r3, [r7, #92]	; 0x5c
				osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 800092c:	2302      	movs	r3, #2
 800092e:	663b      	str	r3, [r7, #96]	; 0x60
				osc_init.PLL.PLLQ = 2;
 8000930:	2302      	movs	r3, #2
 8000932:	667b      	str	r3, [r7, #100]	; 0x64
				osc_init.PLL.PLLR = 2;
 8000934:	2302      	movs	r3, #2
 8000936:	66bb      	str	r3, [r7, #104]	; 0x68
				if (HAL_RCC_OscConfig(&osc_init) != HAL_OK)							Error_Handler();
 8000938:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800093c:	4618      	mov	r0, r3
 800093e:	f001 f9f1 	bl	8001d24 <HAL_RCC_OscConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0x334>
 8000948:	f000 f914 	bl	8000b74 <Error_Handler>
				clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800094c:	230f      	movs	r3, #15
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
				clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000950:	2302      	movs	r3, #2
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
				clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
				clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000958:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800095c:	633b      	str	r3, [r7, #48]	; 0x30
				clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800095e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000962:	637b      	str	r3, [r7, #52]	; 0x34
				if (HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_3) != HAL_OK)		Error_Handler();
 8000964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000968:	2103      	movs	r1, #3
 800096a:	4618      	mov	r0, r3
 800096c:	f000 fe90 	bl	8001690 <HAL_RCC_ClockConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d00a      	beq.n	800098c <SystemClock_Config+0x374>
 8000976:	f000 f8fd 	bl	8000b74 <Error_Handler>
			break;
 800097a:	e007      	b.n	800098c <SystemClock_Config+0x374>
			break;
 800097c:	bf00      	nop
 800097e:	e006      	b.n	800098e <SystemClock_Config+0x376>
			break;
 8000980:	bf00      	nop
 8000982:	e004      	b.n	800098e <SystemClock_Config+0x376>
			break;
 8000984:	bf00      	nop
 8000986:	e002      	b.n	800098e <SystemClock_Config+0x376>
			break;
 8000988:	bf00      	nop
 800098a:	e000      	b.n	800098e <SystemClock_Config+0x376>
			break;
 800098c:	bf00      	nop
	}


	UART2_Init();
 800098e:	f000 f809 	bl	80009a4 <UART2_Init>
	RCC_Print_Clocks();
 8000992:	f000 f82f 	bl	80009f4 <RCC_Print_Clocks>

}
 8000996:	bf00      	nop
 8000998:	37a0      	adds	r7, #160	; 0xa0
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40007000 	.word	0x40007000

080009a4 <UART2_Init>:

void UART2_Init(void){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0

	husart2.Instance = USART2;
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <UART2_Init+0x48>)
 80009aa:	4a11      	ldr	r2, [pc, #68]	; (80009f0 <UART2_Init+0x4c>)
 80009ac:	601a      	str	r2, [r3, #0]

	husart2.Init.BaudRate = 115200;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <UART2_Init+0x48>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
	husart2.Init.Mode = UART_MODE_TX_RX;
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <UART2_Init+0x48>)
 80009b8:	220c      	movs	r2, #12
 80009ba:	615a      	str	r2, [r3, #20]
	husart2.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <UART2_Init+0x48>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
	husart2.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <UART2_Init+0x48>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
	husart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <UART2_Init+0x48>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
	husart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <UART2_Init+0x48>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	61da      	str	r2, [r3, #28]
	husart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <UART2_Init+0x48>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]

	if( HAL_UART_Init(&husart2) == HAL_ERROR )		while(1);
 80009da:	4804      	ldr	r0, [pc, #16]	; (80009ec <UART2_Init+0x48>)
 80009dc:	f001 ff74 	bl	80028c8 <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d100      	bne.n	80009e8 <UART2_Init+0x44>
 80009e6:	e7fe      	b.n	80009e6 <UART2_Init+0x42>
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000078 	.word	0x20000078
 80009f0:	40004400 	.word	0x40004400

080009f4 <RCC_Print_Clocks>:

static void RCC_Print_Clocks(void){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b0c0      	sub	sp, #256	; 0x100
 80009f8:	af00      	add	r7, sp, #0

	uint8_t msg[250];
	sprintf((char*)msg, "SYSCLOCK: %ld \n\r", HAL_RCC_GetSysClockFreq());
 80009fa:	f000 ff63 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 80009fe:	4602      	mov	r2, r0
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	4928      	ldr	r1, [pc, #160]	; (8000aa4 <RCC_Print_Clocks+0xb0>)
 8000a04:	4618      	mov	r0, r3
 8000a06:	f002 ff61 	bl	80038cc <siprintf>
	HAL_UART_Transmit(&husart2, msg, strlen((char*) msg), HAL_MAX_DELAY);
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fbff 	bl	8000210 <strlen>
 8000a12:	4603      	mov	r3, r0
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	1d39      	adds	r1, r7, #4
 8000a18:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1c:	4822      	ldr	r0, [pc, #136]	; (8000aa8 <RCC_Print_Clocks+0xb4>)
 8000a1e:	f001 ffa3 	bl	8002968 <HAL_UART_Transmit>

	sprintf((char*)msg, "AHCLOCK: %ld \n\r", HAL_RCC_GetHCLKFreq());
 8000a22:	f000 ff1b 	bl	800185c <HAL_RCC_GetHCLKFreq>
 8000a26:	4602      	mov	r2, r0
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4920      	ldr	r1, [pc, #128]	; (8000aac <RCC_Print_Clocks+0xb8>)
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 ff4d 	bl	80038cc <siprintf>
	HAL_UART_Transmit(&husart2, msg, strlen((char*) msg), HAL_MAX_DELAY);
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fbeb 	bl	8000210 <strlen>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	1d39      	adds	r1, r7, #4
 8000a40:	f04f 33ff 	mov.w	r3, #4294967295
 8000a44:	4818      	ldr	r0, [pc, #96]	; (8000aa8 <RCC_Print_Clocks+0xb4>)
 8000a46:	f001 ff8f 	bl	8002968 <HAL_UART_Transmit>

	sprintf((char*)msg, "PCLOCK 1: %ld \n\r", HAL_RCC_GetPCLK1Freq());
 8000a4a:	f000 ff13 	bl	8001874 <HAL_RCC_GetPCLK1Freq>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	4917      	ldr	r1, [pc, #92]	; (8000ab0 <RCC_Print_Clocks+0xbc>)
 8000a54:	4618      	mov	r0, r3
 8000a56:	f002 ff39 	bl	80038cc <siprintf>
	HAL_UART_Transmit(&husart2, msg, strlen((char*) msg), HAL_MAX_DELAY);
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fbd7 	bl	8000210 <strlen>
 8000a62:	4603      	mov	r3, r0
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	1d39      	adds	r1, r7, #4
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6c:	480e      	ldr	r0, [pc, #56]	; (8000aa8 <RCC_Print_Clocks+0xb4>)
 8000a6e:	f001 ff7b 	bl	8002968 <HAL_UART_Transmit>

	sprintf((char*)msg, "PCLOCK 2: %ld \n\r", HAL_RCC_GetPCLK2Freq());
 8000a72:	f000 ff13 	bl	800189c <HAL_RCC_GetPCLK2Freq>
 8000a76:	4602      	mov	r2, r0
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	490e      	ldr	r1, [pc, #56]	; (8000ab4 <RCC_Print_Clocks+0xc0>)
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f002 ff25 	bl	80038cc <siprintf>
	HAL_UART_Transmit(&husart2, msg, strlen((char*) msg), HAL_MAX_DELAY);
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fbc3 	bl	8000210 <strlen>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	1d39      	adds	r1, r7, #4
 8000a90:	f04f 33ff 	mov.w	r3, #4294967295
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <RCC_Print_Clocks+0xb4>)
 8000a96:	f001 ff67 	bl	8002968 <HAL_UART_Transmit>

}
 8000a9a:	bf00      	nop
 8000a9c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	0800422c 	.word	0x0800422c
 8000aa8:	20000078 	.word	0x20000078
 8000aac:	08004240 	.word	0x08004240
 8000ab0:	08004250 	.word	0x08004250
 8000ab4:	08004264 	.word	0x08004264

08000ab8 <TIM6_Init>:

void TIM6_Init(void){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0

	htim6.Instance = TIM6;
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <TIM6_Init+0x34>)
 8000abe:	4a0c      	ldr	r2, [pc, #48]	; (8000af0 <TIM6_Init+0x38>)
 8000ac0:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 44999;
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <TIM6_Init+0x34>)
 8000ac4:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8000ac8:	605a      	str	r2, [r3, #4]
	htim6.Init.Period = 999;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <TIM6_Init+0x34>)
 8000acc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ad0:	60da      	str	r2, [r3, #12]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <TIM6_Init+0x34>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]

	if( HAL_TIM_Base_Init(&htim6) != HAL_OK )			Error_Handler();
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <TIM6_Init+0x34>)
 8000ada:	f001 fc5d 	bl	8002398 <HAL_TIM_Base_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <TIM6_Init+0x30>
 8000ae4:	f000 f846 	bl	8000b74 <Error_Handler>

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200000c0 	.word	0x200000c0
 8000af0:	40001000 	.word	0x40001000

08000af4 <LED_Init>:

void LED_Init(void){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef led = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]

	led.Pin = GPIO_PIN_5;
 8000b08:	2320      	movs	r3, #32
 8000b0a:	607b      	str	r3, [r7, #4]
	led.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
	led.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
	led.Speed = GPIO_SPEED_MEDIUM;
 8000b14:	2301      	movs	r3, #1
 8000b16:	613b      	str	r3, [r7, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <LED_Init+0x5c>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <LED_Init+0x5c>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6313      	str	r3, [r2, #48]	; 0x30
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <LED_Init+0x5c>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &led);
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	4619      	mov	r1, r3
 8000b38:	4806      	ldr	r0, [pc, #24]	; (8000b54 <LED_Init+0x60>)
 8000b3a:	f000 fb41 	bl	80011c0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2120      	movs	r1, #32
 8000b42:	4804      	ldr	r0, [pc, #16]	; (8000b54 <LED_Init+0x60>)
 8000b44:	f000 fcd0 	bl	80014e8 <HAL_GPIO_WritePin>

}
 8000b48:	bf00      	nop
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020000 	.word	0x40020000

08000b58 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b60:	2120      	movs	r1, #32
 8000b62:	4803      	ldr	r0, [pc, #12]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000b64:	f000 fcd9 	bl	800151a <HAL_GPIO_TogglePin>

}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40020000 	.word	0x40020000

08000b74 <Error_Handler>:

void Error_Handler(void){
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

	while(1);
 8000b78:	e7fe      	b.n	8000b78 <Error_Handler+0x4>
	...

08000b7c <HAL_MspInit>:
 */

#include "main.h"

void HAL_MspInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f000 fa49 	bl	8001018 <HAL_NVIC_SetPriorityGrouping>

	SCB->SHCSR |= (0x7 << 16);	// Enable Fauts exceptions: usage fault, memory usage and bus fault.
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <HAL_MspInit+0x40>)
 8000b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b8a:	4a0c      	ldr	r2, [pc, #48]	; (8000bbc <HAL_MspInit+0x40>)
 8000b8c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000b90:	6253      	str	r3, [r2, #36]	; 0x24

	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	f06f 0009 	mvn.w	r0, #9
 8000b9a:	f000 fa48 	bl	800102e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	f06f 000b 	mvn.w	r0, #11
 8000ba6:	f000 fa42 	bl	800102e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	f06f 000a 	mvn.w	r0, #10
 8000bb2:	f000 fa3c 	bl	800102e <HAL_NVIC_SetPriority>
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a1d      	ldr	r2, [pc, #116]	; (8000c54 <HAL_UART_MspInit+0x94>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d133      	bne.n	8000c4a <HAL_UART_MspInit+0x8a>
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <HAL_UART_MspInit+0x98>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a1b      	ldr	r2, [pc, #108]	; (8000c58 <HAL_UART_MspInit+0x98>)
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <HAL_UART_MspInit+0x98>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_UART_MspInit+0x98>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <HAL_UART_MspInit+0x98>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_UART_MspInit+0x98>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c1a:	230c      	movs	r3, #12
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <HAL_UART_MspInit+0x9c>)
 8000c36:	f000 fac3 	bl	80011c0 <HAL_GPIO_Init>

  // Enable the IRQ and set up the priority (NVIC Settings)
   HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c3a:	2026      	movs	r0, #38	; 0x26
 8000c3c:	f000 fa13 	bl	8001066 <HAL_NVIC_EnableIRQ>
   HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000c40:	2200      	movs	r2, #0
 8000c42:	210f      	movs	r1, #15
 8000c44:	2026      	movs	r0, #38	; 0x26
 8000c46:	f000 f9f2 	bl	800102e <HAL_NVIC_SetPriority>

  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40004400 	.word	0x40004400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000

08000c60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

	if( htim->Instance == TIM6 ){
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <HAL_TIM_Base_MspInit+0x48>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d115      	bne.n	8000c9e <HAL_TIM_Base_MspInit+0x3e>

		__HAL_RCC_TIM6_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <HAL_TIM_Base_MspInit+0x4c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a0c      	ldr	r2, [pc, #48]	; (8000cac <HAL_TIM_Base_MspInit+0x4c>)
 8000c7c:	f043 0310 	orr.w	r3, r3, #16
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <HAL_TIM_Base_MspInit+0x4c>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f003 0310 	and.w	r3, r3, #16
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]

		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c8e:	2036      	movs	r0, #54	; 0x36
 8000c90:	f000 f9e9 	bl	8001066 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	210f      	movs	r1, #15
 8000c98:	2036      	movs	r0, #54	; 0x36
 8000c9a:	f000 f9c8 	bl	800102e <HAL_NVIC_SetPriority>

	}

}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40001000 	.word	0x40001000
 8000cac:	40023800 	.word	0x40023800

08000cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb8:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <_sbrk+0x5c>)
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <_sbrk+0x60>)
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <_sbrk+0x64>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <_sbrk+0x68>)
 8000cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d207      	bcs.n	8000cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce0:	f002 fe1c 	bl	800391c <__errno>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
 8000cee:	e009      	b.n	8000d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <_sbrk+0x64>)
 8000d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d02:	68fb      	ldr	r3, [r7, #12]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20020000 	.word	0x20020000
 8000d10:	00000400 	.word	0x00000400
 8000d14:	20000108 	.word	0x20000108
 8000d18:	20000258 	.word	0x20000258

08000d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <SystemInit+0x20>)
 8000d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <SystemInit+0x20>)
 8000d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8000d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d44:	f7ff ffea 	bl	8000d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d48:	480c      	ldr	r0, [pc, #48]	; (8000d7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d4a:	490d      	ldr	r1, [pc, #52]	; (8000d80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	; (8000d84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d60:	4c0a      	ldr	r4, [pc, #40]	; (8000d8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d6e:	f002 fddb 	bl	8003928 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d72:	f7ff fc3d 	bl	80005f0 <main>
  bx  lr    
 8000d76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d80:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d84:	080042d4 	.word	0x080042d4
  ldr r2, =_sbss
 8000d88:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d8c:	20000258 	.word	0x20000258

08000d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC_IRQHandler>
	...

08000d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d98:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <HAL_Init+0x40>)
 8000d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <HAL_Init+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <HAL_Init+0x40>)
 8000daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <HAL_Init+0x40>)
 8000db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f000 f92b 	bl	8001018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f000 f808 	bl	8000dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc8:	f7ff fed8 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023c00 	.word	0x40023c00

08000dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_InitTick+0x54>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HAL_InitTick+0x58>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4619      	mov	r1, r3
 8000dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f943 	bl	8001082 <HAL_SYSTICK_Config>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00e      	b.n	8000e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b0f      	cmp	r3, #15
 8000e0a:	d80a      	bhi.n	8000e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f000 f90b 	bl	800102e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e18:	4a06      	ldr	r2, [pc, #24]	; (8000e34 <HAL_InitTick+0x5c>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e000      	b.n	8000e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000004 	.word	0x20000004

08000e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_IncTick+0x20>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_IncTick+0x24>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <HAL_IncTick+0x24>)
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	2000010c 	.word	0x2000010c

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <HAL_GetTick+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	2000010c 	.word	0x2000010c

08000e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	db0b      	blt.n	8000f06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f003 021f 	and.w	r2, r3, #31
 8000ef4:	4907      	ldr	r1, [pc, #28]	; (8000f14 <__NVIC_EnableIRQ+0x38>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	2001      	movs	r0, #1
 8000efe:	fa00 f202 	lsl.w	r2, r0, r2
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000e100 	.word	0xe000e100

08000f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db0a      	blt.n	8000f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	490c      	ldr	r1, [pc, #48]	; (8000f64 <__NVIC_SetPriority+0x4c>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f40:	e00a      	b.n	8000f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4908      	ldr	r1, [pc, #32]	; (8000f68 <__NVIC_SetPriority+0x50>)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	761a      	strb	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf28      	it	cs
 8000f8a:	2304      	movcs	r3, #4
 8000f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3304      	adds	r3, #4
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d902      	bls.n	8000f9c <NVIC_EncodePriority+0x30>
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	e000      	b.n	8000f9e <NVIC_EncodePriority+0x32>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4313      	orrs	r3, r2
         );
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3724      	adds	r7, #36	; 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe4:	d301      	bcc.n	8000fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00f      	b.n	800100a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <SysTick_Config+0x40>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff2:	210f      	movs	r1, #15
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f7ff ff8e 	bl	8000f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <SysTick_Config+0x40>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001002:	4b04      	ldr	r3, [pc, #16]	; (8001014 <SysTick_Config+0x40>)
 8001004:	2207      	movs	r2, #7
 8001006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	e000e010 	.word	0xe000e010

08001018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ff29 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001040:	f7ff ff3e 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 8001044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	68b9      	ldr	r1, [r7, #8]
 800104a:	6978      	ldr	r0, [r7, #20]
 800104c:	f7ff ff8e 	bl	8000f6c <NVIC_EncodePriority>
 8001050:	4602      	mov	r2, r0
 8001052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001056:	4611      	mov	r1, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff5d 	bl	8000f18 <__NVIC_SetPriority>
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff31 	bl	8000edc <__NVIC_EnableIRQ>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ffa2 	bl	8000fd4 <SysTick_Config>
 8001090:	4603      	mov	r3, r0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b084      	sub	sp, #16
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010a8:	f7ff feda 	bl	8000e60 <HAL_GetTick>
 80010ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d008      	beq.n	80010cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2280      	movs	r2, #128	; 0x80
 80010be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e052      	b.n	8001172 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0216 	bic.w	r2, r2, #22
 80010da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	695a      	ldr	r2, [r3, #20]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d103      	bne.n	80010fc <HAL_DMA_Abort+0x62>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d007      	beq.n	800110c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0208 	bic.w	r2, r2, #8
 800110a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 0201 	bic.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800111c:	e013      	b.n	8001146 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800111e:	f7ff fe9f 	bl	8000e60 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b05      	cmp	r3, #5
 800112a:	d90c      	bls.n	8001146 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2220      	movs	r2, #32
 8001130:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2203      	movs	r2, #3
 8001136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e015      	b.n	8001172 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1e4      	bne.n	800111e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001158:	223f      	movs	r2, #63	; 0x3f
 800115a:	409a      	lsls	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d004      	beq.n	8001198 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2280      	movs	r2, #128	; 0x80
 8001192:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e00c      	b.n	80011b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2205      	movs	r2, #5
 800119c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0201 	bic.w	r2, r2, #1
 80011ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
 80011da:	e165      	b.n	80014a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011dc:	2201      	movs	r2, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	f040 8154 	bne.w	80014a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	2b01      	cmp	r3, #1
 8001204:	d005      	beq.n	8001212 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120e:	2b02      	cmp	r3, #2
 8001210:	d130      	bne.n	8001274 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001248:	2201      	movs	r2, #1
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	091b      	lsrs	r3, r3, #4
 800125e:	f003 0201 	and.w	r2, r3, #1
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b03      	cmp	r3, #3
 800127e:	d017      	beq.n	80012b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d123      	bne.n	8001304 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	08da      	lsrs	r2, r3, #3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3208      	adds	r2, #8
 80012c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	220f      	movs	r2, #15
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	691a      	ldr	r2, [r3, #16]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	08da      	lsrs	r2, r3, #3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3208      	adds	r2, #8
 80012fe:	69b9      	ldr	r1, [r7, #24]
 8001300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	2203      	movs	r2, #3
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0203 	and.w	r2, r3, #3
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 80ae 	beq.w	80014a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b5d      	ldr	r3, [pc, #372]	; (80014c0 <HAL_GPIO_Init+0x300>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	4a5c      	ldr	r2, [pc, #368]	; (80014c0 <HAL_GPIO_Init+0x300>)
 8001350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001354:	6453      	str	r3, [r2, #68]	; 0x44
 8001356:	4b5a      	ldr	r3, [pc, #360]	; (80014c0 <HAL_GPIO_Init+0x300>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001362:	4a58      	ldr	r2, [pc, #352]	; (80014c4 <HAL_GPIO_Init+0x304>)
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	3302      	adds	r3, #2
 800136a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	220f      	movs	r2, #15
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4f      	ldr	r2, [pc, #316]	; (80014c8 <HAL_GPIO_Init+0x308>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d025      	beq.n	80013da <HAL_GPIO_Init+0x21a>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4e      	ldr	r2, [pc, #312]	; (80014cc <HAL_GPIO_Init+0x30c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d01f      	beq.n	80013d6 <HAL_GPIO_Init+0x216>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a4d      	ldr	r2, [pc, #308]	; (80014d0 <HAL_GPIO_Init+0x310>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d019      	beq.n	80013d2 <HAL_GPIO_Init+0x212>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a4c      	ldr	r2, [pc, #304]	; (80014d4 <HAL_GPIO_Init+0x314>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d013      	beq.n	80013ce <HAL_GPIO_Init+0x20e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4b      	ldr	r2, [pc, #300]	; (80014d8 <HAL_GPIO_Init+0x318>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d00d      	beq.n	80013ca <HAL_GPIO_Init+0x20a>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4a      	ldr	r2, [pc, #296]	; (80014dc <HAL_GPIO_Init+0x31c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d007      	beq.n	80013c6 <HAL_GPIO_Init+0x206>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a49      	ldr	r2, [pc, #292]	; (80014e0 <HAL_GPIO_Init+0x320>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d101      	bne.n	80013c2 <HAL_GPIO_Init+0x202>
 80013be:	2306      	movs	r3, #6
 80013c0:	e00c      	b.n	80013dc <HAL_GPIO_Init+0x21c>
 80013c2:	2307      	movs	r3, #7
 80013c4:	e00a      	b.n	80013dc <HAL_GPIO_Init+0x21c>
 80013c6:	2305      	movs	r3, #5
 80013c8:	e008      	b.n	80013dc <HAL_GPIO_Init+0x21c>
 80013ca:	2304      	movs	r3, #4
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x21c>
 80013ce:	2303      	movs	r3, #3
 80013d0:	e004      	b.n	80013dc <HAL_GPIO_Init+0x21c>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_Init+0x21c>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <HAL_GPIO_Init+0x21c>
 80013da:	2300      	movs	r3, #0
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	f002 0203 	and.w	r2, r2, #3
 80013e2:	0092      	lsls	r2, r2, #2
 80013e4:	4093      	lsls	r3, r2
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ec:	4935      	ldr	r1, [pc, #212]	; (80014c4 <HAL_GPIO_Init+0x304>)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	3302      	adds	r3, #2
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013fa:	4b3a      	ldr	r3, [pc, #232]	; (80014e4 <HAL_GPIO_Init+0x324>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800141e:	4a31      	ldr	r2, [pc, #196]	; (80014e4 <HAL_GPIO_Init+0x324>)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001424:	4b2f      	ldr	r3, [pc, #188]	; (80014e4 <HAL_GPIO_Init+0x324>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001448:	4a26      	ldr	r2, [pc, #152]	; (80014e4 <HAL_GPIO_Init+0x324>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800144e:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <HAL_GPIO_Init+0x324>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001472:	4a1c      	ldr	r2, [pc, #112]	; (80014e4 <HAL_GPIO_Init+0x324>)
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <HAL_GPIO_Init+0x324>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800149c:	4a11      	ldr	r2, [pc, #68]	; (80014e4 <HAL_GPIO_Init+0x324>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3301      	adds	r3, #1
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	2b0f      	cmp	r3, #15
 80014ac:	f67f ae96 	bls.w	80011dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3724      	adds	r7, #36	; 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40013800 	.word	0x40013800
 80014c8:	40020000 	.word	0x40020000
 80014cc:	40020400 	.word	0x40020400
 80014d0:	40020800 	.word	0x40020800
 80014d4:	40020c00 	.word	0x40020c00
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40021400 	.word	0x40021400
 80014e0:	40021800 	.word	0x40021800
 80014e4:	40013c00 	.word	0x40013c00

080014e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	807b      	strh	r3, [r7, #2]
 80014f4:	4613      	mov	r3, r2
 80014f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f8:	787b      	ldrb	r3, [r7, #1]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fe:	887a      	ldrh	r2, [r7, #2]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001504:	e003      	b.n	800150e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	041a      	lsls	r2, r3, #16
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	619a      	str	r2, [r3, #24]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800151a:	b480      	push	{r7}
 800151c:	b085      	sub	sp, #20
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800152c:	887a      	ldrh	r2, [r7, #2]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4013      	ands	r3, r2
 8001532:	041a      	lsls	r2, r3, #16
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	43d9      	mvns	r1, r3
 8001538:	887b      	ldrh	r3, [r7, #2]
 800153a:	400b      	ands	r3, r1
 800153c:	431a      	orrs	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	619a      	str	r2, [r3, #24]
}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	4b20      	ldr	r3, [pc, #128]	; (80015e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001568:	6413      	str	r3, [r2, #64]	; 0x40
 800156a:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001576:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001578:	2201      	movs	r2, #1
 800157a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800157c:	f7ff fc70 	bl	8000e60 <HAL_GetTick>
 8001580:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001582:	e009      	b.n	8001598 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001584:	f7ff fc6c 	bl	8000e60 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001592:	d901      	bls.n	8001598 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e01f      	b.n	80015d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a4:	d1ee      	bne.n	8001584 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015ac:	f7ff fc58 	bl	8000e60 <HAL_GetTick>
 80015b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015b2:	e009      	b.n	80015c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015b4:	f7ff fc54 	bl	8000e60 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015c2:	d901      	bls.n	80015c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e007      	b.n	80015d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015d4:	d1ee      	bne.n	80015b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40023800 	.word	0x40023800
 80015e4:	420e0040 	.word	0x420e0040
 80015e8:	40007000 	.word	0x40007000
 80015ec:	420e0044 	.word	0x420e0044

080015f0 <HAL_PWREx_DisableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableOverDrive(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
  
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	4b20      	ldr	r3, [pc, #128]	; (8001680 <HAL_PWREx_DisableOverDrive+0x90>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	4a1f      	ldr	r2, [pc, #124]	; (8001680 <HAL_PWREx_DisableOverDrive+0x90>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001608:	6413      	str	r3, [r2, #64]	; 0x40
 800160a:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <HAL_PWREx_DisableOverDrive+0x90>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]
    
  /* Disable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_DISABLE();
 8001616:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <HAL_PWREx_DisableOverDrive+0x94>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800161c:	f7ff fc20 	bl	8000e60 <HAL_GetTick>
 8001620:	6078      	str	r0, [r7, #4]
 
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001622:	e009      	b.n	8001638 <HAL_PWREx_DisableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001624:	f7ff fc1c 	bl	8000e60 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001632:	d901      	bls.n	8001638 <HAL_PWREx_DisableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e01f      	b.n	8001678 <HAL_PWREx_DisableOverDrive+0x88>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <HAL_PWREx_DisableOverDrive+0x98>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001640:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001644:	d0ee      	beq.n	8001624 <HAL_PWREx_DisableOverDrive+0x34>
    }
  } 
  
  /* Disable the Over-drive */
  __HAL_PWR_OVERDRIVE_DISABLE();
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <HAL_PWREx_DisableOverDrive+0x9c>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800164c:	f7ff fc08 	bl	8000e60 <HAL_GetTick>
 8001650:	6078      	str	r0, [r7, #4]

  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001652:	e009      	b.n	8001668 <HAL_PWREx_DisableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001654:	f7ff fc04 	bl	8000e60 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001662:	d901      	bls.n	8001668 <HAL_PWREx_DisableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e007      	b.n	8001678 <HAL_PWREx_DisableOverDrive+0x88>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <HAL_PWREx_DisableOverDrive+0x98>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001674:	d0ee      	beq.n	8001654 <HAL_PWREx_DisableOverDrive+0x64>
    }
  }
  
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40023800 	.word	0x40023800
 8001684:	420e0044 	.word	0x420e0044
 8001688:	40007000 	.word	0x40007000
 800168c:	420e0040 	.word	0x420e0040

08001690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e0cc      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016a4:	4b68      	ldr	r3, [pc, #416]	; (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 030f 	and.w	r3, r3, #15
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d90c      	bls.n	80016cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	4b65      	ldr	r3, [pc, #404]	; (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ba:	4b63      	ldr	r3, [pc, #396]	; (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0b8      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d020      	beq.n	800171a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016e4:	4b59      	ldr	r3, [pc, #356]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	4a58      	ldr	r2, [pc, #352]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016fc:	4b53      	ldr	r3, [pc, #332]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4a52      	ldr	r2, [pc, #328]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001706:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001708:	4b50      	ldr	r3, [pc, #320]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	494d      	ldr	r1, [pc, #308]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	4313      	orrs	r3, r2
 8001718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d044      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d107      	bne.n	800173e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172e:	4b47      	ldr	r3, [pc, #284]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d119      	bne.n	800176e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e07f      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d003      	beq.n	800174e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800174a:	2b03      	cmp	r3, #3
 800174c:	d107      	bne.n	800175e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174e:	4b3f      	ldr	r3, [pc, #252]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d109      	bne.n	800176e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e06f      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175e:	4b3b      	ldr	r3, [pc, #236]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e067      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800176e:	4b37      	ldr	r3, [pc, #220]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f023 0203 	bic.w	r2, r3, #3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4934      	ldr	r1, [pc, #208]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	4313      	orrs	r3, r2
 800177e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001780:	f7ff fb6e 	bl	8000e60 <HAL_GetTick>
 8001784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001786:	e00a      	b.n	800179e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001788:	f7ff fb6a 	bl	8000e60 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f241 3288 	movw	r2, #5000	; 0x1388
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e04f      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179e:	4b2b      	ldr	r3, [pc, #172]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 020c 	and.w	r2, r3, #12
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d1eb      	bne.n	8001788 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 030f 	and.w	r3, r3, #15
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d20c      	bcs.n	80017d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b22      	ldr	r3, [pc, #136]	; (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c6:	4b20      	ldr	r3, [pc, #128]	; (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e032      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d008      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	4916      	ldr	r1, [pc, #88]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d009      	beq.n	8001816 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	490e      	ldr	r1, [pc, #56]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	4313      	orrs	r3, r2
 8001814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001816:	f000 f855 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 800181a:	4602      	mov	r2, r0
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	490a      	ldr	r1, [pc, #40]	; (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 8001828:	5ccb      	ldrb	r3, [r1, r3]
 800182a:	fa22 f303 	lsr.w	r3, r2, r3
 800182e:	4a09      	ldr	r2, [pc, #36]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_RCC_ClockConfig+0x1c8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff face 	bl	8000dd8 <HAL_InitTick>

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023c00 	.word	0x40023c00
 800184c:	40023800 	.word	0x40023800
 8001850:	08004278 	.word	0x08004278
 8001854:	20000000 	.word	0x20000000
 8001858:	20000004 	.word	0x20000004

0800185c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001860:	4b03      	ldr	r3, [pc, #12]	; (8001870 <HAL_RCC_GetHCLKFreq+0x14>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	20000000 	.word	0x20000000

08001874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001878:	f7ff fff0 	bl	800185c <HAL_RCC_GetHCLKFreq>
 800187c:	4602      	mov	r2, r0
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	0a9b      	lsrs	r3, r3, #10
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	4903      	ldr	r1, [pc, #12]	; (8001898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800188a:	5ccb      	ldrb	r3, [r1, r3]
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001890:	4618      	mov	r0, r3
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40023800 	.word	0x40023800
 8001898:	08004288 	.word	0x08004288

0800189c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018a0:	f7ff ffdc 	bl	800185c <HAL_RCC_GetHCLKFreq>
 80018a4:	4602      	mov	r2, r0
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	0b5b      	lsrs	r3, r3, #13
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	4903      	ldr	r1, [pc, #12]	; (80018c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018b2:	5ccb      	ldrb	r3, [r1, r3]
 80018b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40023800 	.word	0x40023800
 80018c0:	08004288 	.word	0x08004288

080018c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018c8:	b0ae      	sub	sp, #184	; 0xb8
 80018ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80018de:	2300      	movs	r3, #0
 80018e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018ea:	4bcb      	ldr	r3, [pc, #812]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x354>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b0c      	cmp	r3, #12
 80018f4:	f200 8206 	bhi.w	8001d04 <HAL_RCC_GetSysClockFreq+0x440>
 80018f8:	a201      	add	r2, pc, #4	; (adr r2, 8001900 <HAL_RCC_GetSysClockFreq+0x3c>)
 80018fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fe:	bf00      	nop
 8001900:	08001935 	.word	0x08001935
 8001904:	08001d05 	.word	0x08001d05
 8001908:	08001d05 	.word	0x08001d05
 800190c:	08001d05 	.word	0x08001d05
 8001910:	0800193d 	.word	0x0800193d
 8001914:	08001d05 	.word	0x08001d05
 8001918:	08001d05 	.word	0x08001d05
 800191c:	08001d05 	.word	0x08001d05
 8001920:	08001945 	.word	0x08001945
 8001924:	08001d05 	.word	0x08001d05
 8001928:	08001d05 	.word	0x08001d05
 800192c:	08001d05 	.word	0x08001d05
 8001930:	08001b35 	.word	0x08001b35
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001934:	4bb9      	ldr	r3, [pc, #740]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x358>)
 8001936:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800193a:	e1e7      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800193c:	4bb8      	ldr	r3, [pc, #736]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x35c>)
 800193e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001942:	e1e3      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001944:	4bb4      	ldr	r3, [pc, #720]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800194c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001950:	4bb1      	ldr	r3, [pc, #708]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d071      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195c:	4bae      	ldr	r3, [pc, #696]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x354>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	099b      	lsrs	r3, r3, #6
 8001962:	2200      	movs	r2, #0
 8001964:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001968:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800196c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001974:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001978:	2300      	movs	r3, #0
 800197a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800197e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001982:	4622      	mov	r2, r4
 8001984:	462b      	mov	r3, r5
 8001986:	f04f 0000 	mov.w	r0, #0
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	0159      	lsls	r1, r3, #5
 8001990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001994:	0150      	lsls	r0, r2, #5
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4621      	mov	r1, r4
 800199c:	1a51      	subs	r1, r2, r1
 800199e:	6439      	str	r1, [r7, #64]	; 0x40
 80019a0:	4629      	mov	r1, r5
 80019a2:	eb63 0301 	sbc.w	r3, r3, r1
 80019a6:	647b      	str	r3, [r7, #68]	; 0x44
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80019b4:	4649      	mov	r1, r9
 80019b6:	018b      	lsls	r3, r1, #6
 80019b8:	4641      	mov	r1, r8
 80019ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019be:	4641      	mov	r1, r8
 80019c0:	018a      	lsls	r2, r1, #6
 80019c2:	4641      	mov	r1, r8
 80019c4:	1a51      	subs	r1, r2, r1
 80019c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80019c8:	4649      	mov	r1, r9
 80019ca:	eb63 0301 	sbc.w	r3, r3, r1
 80019ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80019dc:	4649      	mov	r1, r9
 80019de:	00cb      	lsls	r3, r1, #3
 80019e0:	4641      	mov	r1, r8
 80019e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80019e6:	4641      	mov	r1, r8
 80019e8:	00ca      	lsls	r2, r1, #3
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	4603      	mov	r3, r0
 80019f0:	4622      	mov	r2, r4
 80019f2:	189b      	adds	r3, r3, r2
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
 80019f6:	462b      	mov	r3, r5
 80019f8:	460a      	mov	r2, r1
 80019fa:	eb42 0303 	adc.w	r3, r2, r3
 80019fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	024b      	lsls	r3, r1, #9
 8001a10:	4621      	mov	r1, r4
 8001a12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a16:	4621      	mov	r1, r4
 8001a18:	024a      	lsls	r2, r1, #9
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a22:	2200      	movs	r2, #0
 8001a24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001a2c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001a30:	f7fe fc46 	bl	80002c0 <__aeabi_uldivmod>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4613      	mov	r3, r2
 8001a3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a3e:	e067      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a40:	4b75      	ldr	r3, [pc, #468]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	099b      	lsrs	r3, r3, #6
 8001a46:	2200      	movs	r2, #0
 8001a48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a4c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001a50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a58:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a5e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001a62:	4622      	mov	r2, r4
 8001a64:	462b      	mov	r3, r5
 8001a66:	f04f 0000 	mov.w	r0, #0
 8001a6a:	f04f 0100 	mov.w	r1, #0
 8001a6e:	0159      	lsls	r1, r3, #5
 8001a70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a74:	0150      	lsls	r0, r2, #5
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	1a51      	subs	r1, r2, r1
 8001a7e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001a80:	4629      	mov	r1, r5
 8001a82:	eb63 0301 	sbc.w	r3, r3, r1
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001a94:	4649      	mov	r1, r9
 8001a96:	018b      	lsls	r3, r1, #6
 8001a98:	4641      	mov	r1, r8
 8001a9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a9e:	4641      	mov	r1, r8
 8001aa0:	018a      	lsls	r2, r1, #6
 8001aa2:	4641      	mov	r1, r8
 8001aa4:	ebb2 0a01 	subs.w	sl, r2, r1
 8001aa8:	4649      	mov	r1, r9
 8001aaa:	eb63 0b01 	sbc.w	fp, r3, r1
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001aba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001abe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ac2:	4692      	mov	sl, r2
 8001ac4:	469b      	mov	fp, r3
 8001ac6:	4623      	mov	r3, r4
 8001ac8:	eb1a 0303 	adds.w	r3, sl, r3
 8001acc:	623b      	str	r3, [r7, #32]
 8001ace:	462b      	mov	r3, r5
 8001ad0:	eb4b 0303 	adc.w	r3, fp, r3
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001ae2:	4629      	mov	r1, r5
 8001ae4:	028b      	lsls	r3, r1, #10
 8001ae6:	4621      	mov	r1, r4
 8001ae8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aec:	4621      	mov	r1, r4
 8001aee:	028a      	lsls	r2, r1, #10
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001af8:	2200      	movs	r2, #0
 8001afa:	673b      	str	r3, [r7, #112]	; 0x70
 8001afc:	677a      	str	r2, [r7, #116]	; 0x74
 8001afe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001b02:	f7fe fbdd 	bl	80002c0 <__aeabi_uldivmod>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b10:	4b41      	ldr	r3, [pc, #260]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	0c1b      	lsrs	r3, r3, #16
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001b22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b32:	e0eb      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b34:	4b38      	ldr	r3, [pc, #224]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b40:	4b35      	ldr	r3, [pc, #212]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d06b      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4c:	4b32      	ldr	r3, [pc, #200]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	099b      	lsrs	r3, r3, #6
 8001b52:	2200      	movs	r2, #0
 8001b54:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001b58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b5e:	663b      	str	r3, [r7, #96]	; 0x60
 8001b60:	2300      	movs	r3, #0
 8001b62:	667b      	str	r3, [r7, #100]	; 0x64
 8001b64:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001b68:	4622      	mov	r2, r4
 8001b6a:	462b      	mov	r3, r5
 8001b6c:	f04f 0000 	mov.w	r0, #0
 8001b70:	f04f 0100 	mov.w	r1, #0
 8001b74:	0159      	lsls	r1, r3, #5
 8001b76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b7a:	0150      	lsls	r0, r2, #5
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4621      	mov	r1, r4
 8001b82:	1a51      	subs	r1, r2, r1
 8001b84:	61b9      	str	r1, [r7, #24]
 8001b86:	4629      	mov	r1, r5
 8001b88:	eb63 0301 	sbc.w	r3, r3, r1
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001b9a:	4659      	mov	r1, fp
 8001b9c:	018b      	lsls	r3, r1, #6
 8001b9e:	4651      	mov	r1, sl
 8001ba0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ba4:	4651      	mov	r1, sl
 8001ba6:	018a      	lsls	r2, r1, #6
 8001ba8:	4651      	mov	r1, sl
 8001baa:	ebb2 0801 	subs.w	r8, r2, r1
 8001bae:	4659      	mov	r1, fp
 8001bb0:	eb63 0901 	sbc.w	r9, r3, r1
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bc0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bc4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bc8:	4690      	mov	r8, r2
 8001bca:	4699      	mov	r9, r3
 8001bcc:	4623      	mov	r3, r4
 8001bce:	eb18 0303 	adds.w	r3, r8, r3
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	462b      	mov	r3, r5
 8001bd6:	eb49 0303 	adc.w	r3, r9, r3
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001be8:	4629      	mov	r1, r5
 8001bea:	024b      	lsls	r3, r1, #9
 8001bec:	4621      	mov	r1, r4
 8001bee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	024a      	lsls	r2, r1, #9
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bfe:	2200      	movs	r2, #0
 8001c00:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c02:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001c04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c08:	f7fe fb5a 	bl	80002c0 <__aeabi_uldivmod>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4613      	mov	r3, r2
 8001c12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c16:	e065      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x420>
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	00f42400 	.word	0x00f42400
 8001c20:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c24:	4b3d      	ldr	r3, [pc, #244]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x458>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	099b      	lsrs	r3, r3, #6
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	4611      	mov	r1, r2
 8001c30:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c34:	653b      	str	r3, [r7, #80]	; 0x50
 8001c36:	2300      	movs	r3, #0
 8001c38:	657b      	str	r3, [r7, #84]	; 0x54
 8001c3a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001c3e:	4642      	mov	r2, r8
 8001c40:	464b      	mov	r3, r9
 8001c42:	f04f 0000 	mov.w	r0, #0
 8001c46:	f04f 0100 	mov.w	r1, #0
 8001c4a:	0159      	lsls	r1, r3, #5
 8001c4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c50:	0150      	lsls	r0, r2, #5
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4641      	mov	r1, r8
 8001c58:	1a51      	subs	r1, r2, r1
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	4649      	mov	r1, r9
 8001c5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001c70:	4659      	mov	r1, fp
 8001c72:	018b      	lsls	r3, r1, #6
 8001c74:	4651      	mov	r1, sl
 8001c76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c7a:	4651      	mov	r1, sl
 8001c7c:	018a      	lsls	r2, r1, #6
 8001c7e:	4651      	mov	r1, sl
 8001c80:	1a54      	subs	r4, r2, r1
 8001c82:	4659      	mov	r1, fp
 8001c84:	eb63 0501 	sbc.w	r5, r3, r1
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	00eb      	lsls	r3, r5, #3
 8001c92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c96:	00e2      	lsls	r2, r4, #3
 8001c98:	4614      	mov	r4, r2
 8001c9a:	461d      	mov	r5, r3
 8001c9c:	4643      	mov	r3, r8
 8001c9e:	18e3      	adds	r3, r4, r3
 8001ca0:	603b      	str	r3, [r7, #0]
 8001ca2:	464b      	mov	r3, r9
 8001ca4:	eb45 0303 	adc.w	r3, r5, r3
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	028b      	lsls	r3, r1, #10
 8001cba:	4621      	mov	r1, r4
 8001cbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	028a      	lsls	r2, r1, #10
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ccc:	2200      	movs	r2, #0
 8001cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cd0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001cd2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001cd6:	f7fe faf3 	bl	80002c0 <__aeabi_uldivmod>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4613      	mov	r3, r2
 8001ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x458>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	0f1b      	lsrs	r3, r3, #28
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001cf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001cf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d02:	e003      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001d06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	37b8      	adds	r7, #184	; 0xb8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	00f42400 	.word	0x00f42400

08001d24 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e28d      	b.n	8002252 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 8083 	beq.w	8001e4a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d44:	4b94      	ldr	r3, [pc, #592]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d019      	beq.n	8001d84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d50:	4b91      	ldr	r3, [pc, #580]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d5c:	4b8e      	ldr	r3, [pc, #568]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d68:	d00c      	beq.n	8001d84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d6a:	4b8b      	ldr	r3, [pc, #556]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	d112      	bne.n	8001d9c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d76:	4b88      	ldr	r3, [pc, #544]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d82:	d10b      	bne.n	8001d9c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d84:	4b84      	ldr	r3, [pc, #528]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d05b      	beq.n	8001e48 <HAL_RCC_OscConfig+0x124>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d157      	bne.n	8001e48 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e25a      	b.n	8002252 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da4:	d106      	bne.n	8001db4 <HAL_RCC_OscConfig+0x90>
 8001da6:	4b7c      	ldr	r3, [pc, #496]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a7b      	ldr	r2, [pc, #492]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e01d      	b.n	8001df0 <HAL_RCC_OscConfig+0xcc>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0xb4>
 8001dbe:	4b76      	ldr	r3, [pc, #472]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a75      	ldr	r2, [pc, #468]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	4b73      	ldr	r3, [pc, #460]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a72      	ldr	r2, [pc, #456]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	e00b      	b.n	8001df0 <HAL_RCC_OscConfig+0xcc>
 8001dd8:	4b6f      	ldr	r3, [pc, #444]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a6e      	ldr	r2, [pc, #440]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	4b6c      	ldr	r3, [pc, #432]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a6b      	ldr	r2, [pc, #428]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d013      	beq.n	8001e20 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff f832 	bl	8000e60 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e00:	f7ff f82e 	bl	8000e60 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	; 0x64
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e21f      	b.n	8002252 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e12:	4b61      	ldr	r3, [pc, #388]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0xdc>
 8001e1e:	e014      	b.n	8001e4a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7ff f81e 	bl	8000e60 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e28:	f7ff f81a 	bl	8000e60 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b64      	cmp	r3, #100	; 0x64
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e20b      	b.n	8002252 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3a:	4b57      	ldr	r3, [pc, #348]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x104>
 8001e46:	e000      	b.n	8001e4a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d06f      	beq.n	8001f36 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e56:	4b50      	ldr	r3, [pc, #320]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d017      	beq.n	8001e92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e62:	4b4d      	ldr	r3, [pc, #308]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d105      	bne.n	8001e7a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e6e:	4b4a      	ldr	r3, [pc, #296]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00b      	beq.n	8001e92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e7a:	4b47      	ldr	r3, [pc, #284]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e82:	2b0c      	cmp	r3, #12
 8001e84:	d11c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e86:	4b44      	ldr	r3, [pc, #272]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d116      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e92:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_RCC_OscConfig+0x186>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e1d3      	b.n	8002252 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eaa:	4b3b      	ldr	r3, [pc, #236]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4937      	ldr	r1, [pc, #220]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	e03a      	b.n	8001f36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d020      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec8:	4b34      	ldr	r3, [pc, #208]	; (8001f9c <HAL_RCC_OscConfig+0x278>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ece:	f7fe ffc7 	bl	8000e60 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed6:	f7fe ffc3 	bl	8000e60 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e1b4      	b.n	8002252 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef4:	4b28      	ldr	r3, [pc, #160]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4925      	ldr	r1, [pc, #148]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	600b      	str	r3, [r1, #0]
 8001f08:	e015      	b.n	8001f36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f0a:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <HAL_RCC_OscConfig+0x278>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7fe ffa6 	bl	8000e60 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f18:	f7fe ffa2 	bl	8000e60 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e193      	b.n	8002252 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d036      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d016      	beq.n	8001f78 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7fe ff86 	bl	8000e60 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f58:	f7fe ff82 	bl	8000e60 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e173      	b.n	8002252 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x234>
 8001f76:	e01b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7e:	f7fe ff6f 	bl	8000e60 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f84:	e00e      	b.n	8001fa4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f86:	f7fe ff6b 	bl	8000e60 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d907      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e15c      	b.n	8002252 <HAL_RCC_OscConfig+0x52e>
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	42470000 	.word	0x42470000
 8001fa0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa4:	4b8a      	ldr	r3, [pc, #552]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 8001fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ea      	bne.n	8001f86 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 8097 	beq.w	80020ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc2:	4b83      	ldr	r3, [pc, #524]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10f      	bne.n	8001fee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	4b7f      	ldr	r3, [pc, #508]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	4a7e      	ldr	r2, [pc, #504]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fde:	4b7c      	ldr	r3, [pc, #496]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fea:	2301      	movs	r3, #1
 8001fec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fee:	4b79      	ldr	r3, [pc, #484]	; (80021d4 <HAL_RCC_OscConfig+0x4b0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d118      	bne.n	800202c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ffa:	4b76      	ldr	r3, [pc, #472]	; (80021d4 <HAL_RCC_OscConfig+0x4b0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a75      	ldr	r2, [pc, #468]	; (80021d4 <HAL_RCC_OscConfig+0x4b0>)
 8002000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002006:	f7fe ff2b 	bl	8000e60 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200e:	f7fe ff27 	bl	8000e60 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e118      	b.n	8002252 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002020:	4b6c      	ldr	r3, [pc, #432]	; (80021d4 <HAL_RCC_OscConfig+0x4b0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d106      	bne.n	8002042 <HAL_RCC_OscConfig+0x31e>
 8002034:	4b66      	ldr	r3, [pc, #408]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002038:	4a65      	ldr	r2, [pc, #404]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6713      	str	r3, [r2, #112]	; 0x70
 8002040:	e01c      	b.n	800207c <HAL_RCC_OscConfig+0x358>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b05      	cmp	r3, #5
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x340>
 800204a:	4b61      	ldr	r3, [pc, #388]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	4a60      	ldr	r2, [pc, #384]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	6713      	str	r3, [r2, #112]	; 0x70
 8002056:	4b5e      	ldr	r3, [pc, #376]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 8002058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205a:	4a5d      	ldr	r2, [pc, #372]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6713      	str	r3, [r2, #112]	; 0x70
 8002062:	e00b      	b.n	800207c <HAL_RCC_OscConfig+0x358>
 8002064:	4b5a      	ldr	r3, [pc, #360]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002068:	4a59      	ldr	r2, [pc, #356]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 800206a:	f023 0301 	bic.w	r3, r3, #1
 800206e:	6713      	str	r3, [r2, #112]	; 0x70
 8002070:	4b57      	ldr	r3, [pc, #348]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	4a56      	ldr	r2, [pc, #344]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 8002076:	f023 0304 	bic.w	r3, r3, #4
 800207a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d015      	beq.n	80020b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002084:	f7fe feec 	bl	8000e60 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208a:	e00a      	b.n	80020a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800208c:	f7fe fee8 	bl	8000e60 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f241 3288 	movw	r2, #5000	; 0x1388
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e0d7      	b.n	8002252 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a2:	4b4b      	ldr	r3, [pc, #300]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 80020a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0ee      	beq.n	800208c <HAL_RCC_OscConfig+0x368>
 80020ae:	e014      	b.n	80020da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7fe fed6 	bl	8000e60 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7fe fed2 	bl	8000e60 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e0c1      	b.n	8002252 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ce:	4b40      	ldr	r3, [pc, #256]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1ee      	bne.n	80020b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020da:	7dfb      	ldrb	r3, [r7, #23]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d105      	bne.n	80020ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e0:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	4a3a      	ldr	r2, [pc, #232]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 80020e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80ad 	beq.w	8002250 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020f6:	4b36      	ldr	r3, [pc, #216]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d060      	beq.n	80021c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d145      	bne.n	8002196 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210a:	4b33      	ldr	r3, [pc, #204]	; (80021d8 <HAL_RCC_OscConfig+0x4b4>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002110:	f7fe fea6 	bl	8000e60 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002118:	f7fe fea2 	bl	8000e60 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e093      	b.n	8002252 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212a:	4b29      	ldr	r3, [pc, #164]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69da      	ldr	r2, [r3, #28]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	019b      	lsls	r3, r3, #6
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	085b      	lsrs	r3, r3, #1
 800214e:	3b01      	subs	r3, #1
 8002150:	041b      	lsls	r3, r3, #16
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002158:	061b      	lsls	r3, r3, #24
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	071b      	lsls	r3, r3, #28
 8002162:	491b      	ldr	r1, [pc, #108]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 8002164:	4313      	orrs	r3, r2
 8002166:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <HAL_RCC_OscConfig+0x4b4>)
 800216a:	2201      	movs	r2, #1
 800216c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216e:	f7fe fe77 	bl	8000e60 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002176:	f7fe fe73 	bl	8000e60 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e064      	b.n	8002252 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f0      	beq.n	8002176 <HAL_RCC_OscConfig+0x452>
 8002194:	e05c      	b.n	8002250 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <HAL_RCC_OscConfig+0x4b4>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7fe fe60 	bl	8000e60 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a4:	f7fe fe5c 	bl	8000e60 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e04d      	b.n	8002252 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_RCC_OscConfig+0x4ac>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x480>
 80021c2:	e045      	b.n	8002250 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d107      	bne.n	80021dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e040      	b.n	8002252 <HAL_RCC_OscConfig+0x52e>
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40007000 	.word	0x40007000
 80021d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021dc:	4b1f      	ldr	r3, [pc, #124]	; (800225c <HAL_RCC_OscConfig+0x538>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d030      	beq.n	800224c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d129      	bne.n	800224c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d122      	bne.n	800224c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800220c:	4013      	ands	r3, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002212:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002214:	4293      	cmp	r3, r2
 8002216:	d119      	bne.n	800224c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002222:	085b      	lsrs	r3, r3, #1
 8002224:	3b01      	subs	r3, #1
 8002226:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d10f      	bne.n	800224c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002236:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002238:	429a      	cmp	r2, r3
 800223a:	d107      	bne.n	800224c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002248:	429a      	cmp	r2, r3
 800224a:	d001      	beq.n	8002250 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023800 	.word	0x40023800

08002260 <HAL_RCC_GetOscConfig>:
  * @note   This function is only available in case of STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices.
  * @note   This function add the PLL/PLLR factor management
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	220f      	movs	r2, #15
 800226c:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 800226e:	4b49      	ldr	r3, [pc, #292]	; (8002394 <HAL_RCC_GetOscConfig+0x134>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002276:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800227a:	d104      	bne.n	8002286 <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	e00e      	b.n	80022a4 <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8002286:	4b43      	ldr	r3, [pc, #268]	; (8002394 <HAL_RCC_GetOscConfig+0x134>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002292:	d104      	bne.n	800229e <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	e002      	b.n	80022a4 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 80022a4:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <HAL_RCC_GetOscConfig+0x134>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d103      	bne.n	80022b8 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	e002      	b.n	80022be <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 80022be:	4b35      	ldr	r3, [pc, #212]	; (8002394 <HAL_RCC_GetOscConfig+0x134>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	08db      	lsrs	r3, r3, #3
 80022c4:	f003 021f 	and.w	r2, r3, #31
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 80022cc:	4b31      	ldr	r3, [pc, #196]	; (8002394 <HAL_RCC_GetOscConfig+0x134>)
 80022ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d103      	bne.n	80022e0 <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2205      	movs	r2, #5
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	e00c      	b.n	80022fa <HAL_RCC_GetOscConfig+0x9a>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 80022e0:	4b2c      	ldr	r3, [pc, #176]	; (8002394 <HAL_RCC_GetOscConfig+0x134>)
 80022e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d103      	bne.n	80022f4 <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	609a      	str	r2, [r3, #8]
 80022f2:	e002      	b.n	80022fa <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 80022fa:	4b26      	ldr	r3, [pc, #152]	; (8002394 <HAL_RCC_GetOscConfig+0x134>)
 80022fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b01      	cmp	r3, #1
 8002304:	d103      	bne.n	800230e <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	615a      	str	r2, [r3, #20]
 800230c:	e002      	b.n	8002314 <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8002314:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <HAL_RCC_GetOscConfig+0x134>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800231c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002320:	d103      	bne.n	800232a <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2202      	movs	r2, #2
 8002326:	619a      	str	r2, [r3, #24]
 8002328:	e002      	b.n	8002330 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002330:	4b18      	ldr	r3, [pc, #96]	; (8002394 <HAL_RCC_GetOscConfig+0x134>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 800233c:	4b15      	ldr	r3, [pc, #84]	; (8002394 <HAL_RCC_GetOscConfig+0x134>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_RCC_GetOscConfig+0x134>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	099b      	lsrs	r3, r3, #6
 800234e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <HAL_RCC_GetOscConfig+0x134>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800235e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	0c1a      	lsrs	r2, r3, #16
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_RCC_GetOscConfig+0x134>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	0e1b      	lsrs	r3, r3, #24
 8002370:	f003 020f 	and.w	r2, r3, #15
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLR = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_RCC_GetOscConfig+0x134>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	0f1b      	lsrs	r3, r3, #28
 800237e:	f003 0207 	and.w	r2, r3, #7
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800

08002398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e041      	b.n	800242e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d106      	bne.n	80023c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7fe fc4e 	bl	8000c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3304      	adds	r3, #4
 80023d4:	4619      	mov	r1, r3
 80023d6:	4610      	mov	r0, r2
 80023d8:	f000 f9b6 	bl	8002748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b01      	cmp	r3, #1
 800244a:	d001      	beq.n	8002450 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e04e      	b.n	80024ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a23      	ldr	r2, [pc, #140]	; (80024fc <HAL_TIM_Base_Start_IT+0xc4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d022      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x80>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247a:	d01d      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x80>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a1f      	ldr	r2, [pc, #124]	; (8002500 <HAL_TIM_Base_Start_IT+0xc8>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d018      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x80>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a1e      	ldr	r2, [pc, #120]	; (8002504 <HAL_TIM_Base_Start_IT+0xcc>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d013      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x80>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a1c      	ldr	r2, [pc, #112]	; (8002508 <HAL_TIM_Base_Start_IT+0xd0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00e      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x80>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a1b      	ldr	r2, [pc, #108]	; (800250c <HAL_TIM_Base_Start_IT+0xd4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d009      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x80>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a19      	ldr	r2, [pc, #100]	; (8002510 <HAL_TIM_Base_Start_IT+0xd8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d004      	beq.n	80024b8 <HAL_TIM_Base_Start_IT+0x80>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a18      	ldr	r2, [pc, #96]	; (8002514 <HAL_TIM_Base_Start_IT+0xdc>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d111      	bne.n	80024dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	d010      	beq.n	80024ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 0201 	orr.w	r2, r2, #1
 80024d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024da:	e007      	b.n	80024ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40010000 	.word	0x40010000
 8002500:	40000400 	.word	0x40000400
 8002504:	40000800 	.word	0x40000800
 8002508:	40000c00 	.word	0x40000c00
 800250c:	40010400 	.word	0x40010400
 8002510:	40014000 	.word	0x40014000
 8002514:	40001800 	.word	0x40001800

08002518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d020      	beq.n	800257c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d01b      	beq.n	800257c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0202 	mvn.w	r2, #2
 800254c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f8d2 	bl	800270c <HAL_TIM_IC_CaptureCallback>
 8002568:	e005      	b.n	8002576 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f8c4 	bl	80026f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f8d5 	bl	8002720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	d020      	beq.n	80025c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d01b      	beq.n	80025c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0204 	mvn.w	r2, #4
 8002598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2202      	movs	r2, #2
 800259e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f8ac 	bl	800270c <HAL_TIM_IC_CaptureCallback>
 80025b4:	e005      	b.n	80025c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f89e 	bl	80026f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f8af 	bl	8002720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d020      	beq.n	8002614 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01b      	beq.n	8002614 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0208 	mvn.w	r2, #8
 80025e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2204      	movs	r2, #4
 80025ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f886 	bl	800270c <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f878 	bl	80026f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f889 	bl	8002720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b00      	cmp	r3, #0
 800261c:	d020      	beq.n	8002660 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b00      	cmp	r3, #0
 8002626:	d01b      	beq.n	8002660 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0210 	mvn.w	r2, #16
 8002630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2208      	movs	r2, #8
 8002636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f860 	bl	800270c <HAL_TIM_IC_CaptureCallback>
 800264c:	e005      	b.n	800265a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f852 	bl	80026f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f863 	bl	8002720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00c      	beq.n	8002684 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d007      	beq.n	8002684 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0201 	mvn.w	r2, #1
 800267c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fe fa6a 	bl	8000b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00c      	beq.n	80026a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f906 	bl	80028b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00c      	beq.n	80026cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d007      	beq.n	80026cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f834 	bl	8002734 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00c      	beq.n	80026f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d007      	beq.n	80026f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f06f 0220 	mvn.w	r2, #32
 80026e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f8d8 	bl	80028a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026f0:	bf00      	nop
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a46      	ldr	r2, [pc, #280]	; (8002874 <TIM_Base_SetConfig+0x12c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d013      	beq.n	8002788 <TIM_Base_SetConfig+0x40>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002766:	d00f      	beq.n	8002788 <TIM_Base_SetConfig+0x40>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a43      	ldr	r2, [pc, #268]	; (8002878 <TIM_Base_SetConfig+0x130>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d00b      	beq.n	8002788 <TIM_Base_SetConfig+0x40>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a42      	ldr	r2, [pc, #264]	; (800287c <TIM_Base_SetConfig+0x134>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d007      	beq.n	8002788 <TIM_Base_SetConfig+0x40>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a41      	ldr	r2, [pc, #260]	; (8002880 <TIM_Base_SetConfig+0x138>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d003      	beq.n	8002788 <TIM_Base_SetConfig+0x40>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a40      	ldr	r2, [pc, #256]	; (8002884 <TIM_Base_SetConfig+0x13c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d108      	bne.n	800279a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800278e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a35      	ldr	r2, [pc, #212]	; (8002874 <TIM_Base_SetConfig+0x12c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d02b      	beq.n	80027fa <TIM_Base_SetConfig+0xb2>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a8:	d027      	beq.n	80027fa <TIM_Base_SetConfig+0xb2>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a32      	ldr	r2, [pc, #200]	; (8002878 <TIM_Base_SetConfig+0x130>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d023      	beq.n	80027fa <TIM_Base_SetConfig+0xb2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a31      	ldr	r2, [pc, #196]	; (800287c <TIM_Base_SetConfig+0x134>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d01f      	beq.n	80027fa <TIM_Base_SetConfig+0xb2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a30      	ldr	r2, [pc, #192]	; (8002880 <TIM_Base_SetConfig+0x138>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d01b      	beq.n	80027fa <TIM_Base_SetConfig+0xb2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a2f      	ldr	r2, [pc, #188]	; (8002884 <TIM_Base_SetConfig+0x13c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d017      	beq.n	80027fa <TIM_Base_SetConfig+0xb2>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a2e      	ldr	r2, [pc, #184]	; (8002888 <TIM_Base_SetConfig+0x140>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d013      	beq.n	80027fa <TIM_Base_SetConfig+0xb2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a2d      	ldr	r2, [pc, #180]	; (800288c <TIM_Base_SetConfig+0x144>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00f      	beq.n	80027fa <TIM_Base_SetConfig+0xb2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a2c      	ldr	r2, [pc, #176]	; (8002890 <TIM_Base_SetConfig+0x148>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d00b      	beq.n	80027fa <TIM_Base_SetConfig+0xb2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a2b      	ldr	r2, [pc, #172]	; (8002894 <TIM_Base_SetConfig+0x14c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d007      	beq.n	80027fa <TIM_Base_SetConfig+0xb2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a2a      	ldr	r2, [pc, #168]	; (8002898 <TIM_Base_SetConfig+0x150>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d003      	beq.n	80027fa <TIM_Base_SetConfig+0xb2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a29      	ldr	r2, [pc, #164]	; (800289c <TIM_Base_SetConfig+0x154>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d108      	bne.n	800280c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a10      	ldr	r2, [pc, #64]	; (8002874 <TIM_Base_SetConfig+0x12c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d003      	beq.n	8002840 <TIM_Base_SetConfig+0xf8>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a12      	ldr	r2, [pc, #72]	; (8002884 <TIM_Base_SetConfig+0x13c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d103      	bne.n	8002848 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b01      	cmp	r3, #1
 8002858:	d105      	bne.n	8002866 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f023 0201 	bic.w	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	611a      	str	r2, [r3, #16]
  }
}
 8002866:	bf00      	nop
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40010000 	.word	0x40010000
 8002878:	40000400 	.word	0x40000400
 800287c:	40000800 	.word	0x40000800
 8002880:	40000c00 	.word	0x40000c00
 8002884:	40010400 	.word	0x40010400
 8002888:	40014000 	.word	0x40014000
 800288c:	40014400 	.word	0x40014400
 8002890:	40014800 	.word	0x40014800
 8002894:	40001800 	.word	0x40001800
 8002898:	40001c00 	.word	0x40001c00
 800289c:	40002000 	.word	0x40002000

080028a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e042      	b.n	8002960 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe f966 	bl	8000bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2224      	movs	r2, #36	; 0x24
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800290a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 fd69 	bl	80033e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002920:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002930:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002940:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	; 0x28
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	4613      	mov	r3, r2
 8002976:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b20      	cmp	r3, #32
 8002986:	d175      	bne.n	8002a74 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_UART_Transmit+0x2c>
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e06e      	b.n	8002a76 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2221      	movs	r2, #33	; 0x21
 80029a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029a6:	f7fe fa5b 	bl	8000e60 <HAL_GetTick>
 80029aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	88fa      	ldrh	r2, [r7, #6]
 80029b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	88fa      	ldrh	r2, [r7, #6]
 80029b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c0:	d108      	bne.n	80029d4 <HAL_UART_Transmit+0x6c>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d104      	bne.n	80029d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	e003      	b.n	80029dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029dc:	e02e      	b.n	8002a3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2200      	movs	r2, #0
 80029e6:	2180      	movs	r1, #128	; 0x80
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 fb05 	bl	8002ff8 <UART_WaitOnFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e03a      	b.n	8002a76 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10b      	bne.n	8002a1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	3302      	adds	r3, #2
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	e007      	b.n	8002a2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	781a      	ldrb	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1cb      	bne.n	80029de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2140      	movs	r1, #64	; 0x40
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fad1 	bl	8002ff8 <UART_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e006      	b.n	8002a76 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	e000      	b.n	8002a76 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a74:	2302      	movs	r3, #2
  }
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3720      	adds	r7, #32
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b0ba      	sub	sp, #232	; 0xe8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002abe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10f      	bne.n	8002ae6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aca:	f003 0320 	and.w	r3, r3, #32
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x66>
 8002ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fbc2 	bl	8003268 <UART_Receive_IT>
      return;
 8002ae4:	e25b      	b.n	8002f9e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ae6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 80de 	beq.w	8002cac <HAL_UART_IRQHandler+0x22c>
 8002af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d106      	bne.n	8002b0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 80d1 	beq.w	8002cac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00b      	beq.n	8002b2e <HAL_UART_IRQHandler+0xae>
 8002b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d005      	beq.n	8002b2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	f043 0201 	orr.w	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00b      	beq.n	8002b52 <HAL_UART_IRQHandler+0xd2>
 8002b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	f043 0202 	orr.w	r2, r3, #2
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00b      	beq.n	8002b76 <HAL_UART_IRQHandler+0xf6>
 8002b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	f043 0204 	orr.w	r2, r3, #4
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d011      	beq.n	8002ba6 <HAL_UART_IRQHandler+0x126>
 8002b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d105      	bne.n	8002b9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d005      	beq.n	8002ba6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	f043 0208 	orr.w	r2, r3, #8
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 81f2 	beq.w	8002f94 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_UART_IRQHandler+0x14e>
 8002bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 fb4d 	bl	8003268 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd8:	2b40      	cmp	r3, #64	; 0x40
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d103      	bne.n	8002bfa <HAL_UART_IRQHandler+0x17a>
 8002bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d04f      	beq.n	8002c9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fa55 	bl	80030aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0a:	2b40      	cmp	r3, #64	; 0x40
 8002c0c:	d141      	bne.n	8002c92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3314      	adds	r3, #20
 8002c14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c1c:	e853 3f00 	ldrex	r3, [r3]
 8002c20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	3314      	adds	r3, #20
 8002c36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c4a:	e841 2300 	strex	r3, r2, [r1]
 8002c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1d9      	bne.n	8002c0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d013      	beq.n	8002c8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c66:	4a7e      	ldr	r2, [pc, #504]	; (8002e60 <HAL_UART_IRQHandler+0x3e0>)
 8002c68:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe fa83 	bl	800117a <HAL_DMA_Abort_IT>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d016      	beq.n	8002ca8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c84:	4610      	mov	r0, r2
 8002c86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c88:	e00e      	b.n	8002ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f99e 	bl	8002fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c90:	e00a      	b.n	8002ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f99a 	bl	8002fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c98:	e006      	b.n	8002ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f996 	bl	8002fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002ca6:	e175      	b.n	8002f94 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca8:	bf00      	nop
    return;
 8002caa:	e173      	b.n	8002f94 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	f040 814f 	bne.w	8002f54 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 8148 	beq.w	8002f54 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 8141 	beq.w	8002f54 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf2:	2b40      	cmp	r3, #64	; 0x40
 8002cf4:	f040 80b6 	bne.w	8002e64 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 8145 	beq.w	8002f98 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d16:	429a      	cmp	r2, r3
 8002d18:	f080 813e 	bcs.w	8002f98 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d2e:	f000 8088 	beq.w	8002e42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	330c      	adds	r3, #12
 8002d38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d40:	e853 3f00 	ldrex	r3, [r3]
 8002d44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	330c      	adds	r3, #12
 8002d5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d6e:	e841 2300 	strex	r3, r2, [r1]
 8002d72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1d9      	bne.n	8002d32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	3314      	adds	r3, #20
 8002d84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d88:	e853 3f00 	ldrex	r3, [r3]
 8002d8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3314      	adds	r3, #20
 8002d9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002da2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002da6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002daa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002dae:	e841 2300 	strex	r3, r2, [r1]
 8002db2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1e1      	bne.n	8002d7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	3314      	adds	r3, #20
 8002dc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dc4:	e853 3f00 	ldrex	r3, [r3]
 8002dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3314      	adds	r3, #20
 8002dda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002dde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002de0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002de4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002de6:	e841 2300 	strex	r3, r2, [r1]
 8002dea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002dec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1e3      	bne.n	8002dba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	330c      	adds	r3, #12
 8002e06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e0a:	e853 3f00 	ldrex	r3, [r3]
 8002e0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e12:	f023 0310 	bic.w	r3, r3, #16
 8002e16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	330c      	adds	r3, #12
 8002e20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e24:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e2c:	e841 2300 	strex	r3, r2, [r1]
 8002e30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1e3      	bne.n	8002e00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe f92c 	bl	800109a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2202      	movs	r2, #2
 8002e46:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	4619      	mov	r1, r3
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f8c1 	bl	8002fe0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e5e:	e09b      	b.n	8002f98 <HAL_UART_IRQHandler+0x518>
 8002e60:	08003171 	.word	0x08003171
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 808e 	beq.w	8002f9c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002e80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 8089 	beq.w	8002f9c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	330c      	adds	r3, #12
 8002e90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e94:	e853 3f00 	ldrex	r3, [r3]
 8002e98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ea0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	330c      	adds	r3, #12
 8002eaa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002eae:	647a      	str	r2, [r7, #68]	; 0x44
 8002eb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002eb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002eb6:	e841 2300 	strex	r3, r2, [r1]
 8002eba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1e3      	bne.n	8002e8a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3314      	adds	r3, #20
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	e853 3f00 	ldrex	r3, [r3]
 8002ed0:	623b      	str	r3, [r7, #32]
   return(result);
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	3314      	adds	r3, #20
 8002ee2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ee6:	633a      	str	r2, [r7, #48]	; 0x30
 8002ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eee:	e841 2300 	strex	r3, r2, [r1]
 8002ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1e3      	bne.n	8002ec2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	330c      	adds	r3, #12
 8002f0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	e853 3f00 	ldrex	r3, [r3]
 8002f16:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0310 	bic.w	r3, r3, #16
 8002f1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	330c      	adds	r3, #12
 8002f28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f2c:	61fa      	str	r2, [r7, #28]
 8002f2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f30:	69b9      	ldr	r1, [r7, #24]
 8002f32:	69fa      	ldr	r2, [r7, #28]
 8002f34:	e841 2300 	strex	r3, r2, [r1]
 8002f38:	617b      	str	r3, [r7, #20]
   return(result);
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1e3      	bne.n	8002f08 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f847 	bl	8002fe0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f52:	e023      	b.n	8002f9c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d009      	beq.n	8002f74 <HAL_UART_IRQHandler+0x4f4>
 8002f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f913 	bl	8003198 <UART_Transmit_IT>
    return;
 8002f72:	e014      	b.n	8002f9e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00e      	beq.n	8002f9e <HAL_UART_IRQHandler+0x51e>
 8002f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f953 	bl	8003238 <UART_EndTransmit_IT>
    return;
 8002f92:	e004      	b.n	8002f9e <HAL_UART_IRQHandler+0x51e>
    return;
 8002f94:	bf00      	nop
 8002f96:	e002      	b.n	8002f9e <HAL_UART_IRQHandler+0x51e>
      return;
 8002f98:	bf00      	nop
 8002f9a:	e000      	b.n	8002f9e <HAL_UART_IRQHandler+0x51e>
      return;
 8002f9c:	bf00      	nop
  }
}
 8002f9e:	37e8      	adds	r7, #232	; 0xe8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	4613      	mov	r3, r2
 8003006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003008:	e03b      	b.n	8003082 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003010:	d037      	beq.n	8003082 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003012:	f7fd ff25 	bl	8000e60 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	6a3a      	ldr	r2, [r7, #32]
 800301e:	429a      	cmp	r2, r3
 8003020:	d302      	bcc.n	8003028 <UART_WaitOnFlagUntilTimeout+0x30>
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e03a      	b.n	80030a2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b00      	cmp	r3, #0
 8003038:	d023      	beq.n	8003082 <UART_WaitOnFlagUntilTimeout+0x8a>
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b80      	cmp	r3, #128	; 0x80
 800303e:	d020      	beq.n	8003082 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b40      	cmp	r3, #64	; 0x40
 8003044:	d01d      	beq.n	8003082 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b08      	cmp	r3, #8
 8003052:	d116      	bne.n	8003082 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f81d 	bl	80030aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2208      	movs	r2, #8
 8003074:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e00f      	b.n	80030a2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4013      	ands	r3, r2
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	429a      	cmp	r2, r3
 8003090:	bf0c      	ite	eq
 8003092:	2301      	moveq	r3, #1
 8003094:	2300      	movne	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	461a      	mov	r2, r3
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	429a      	cmp	r2, r3
 800309e:	d0b4      	beq.n	800300a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b095      	sub	sp, #84	; 0x54
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	330c      	adds	r3, #12
 80030b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030bc:	e853 3f00 	ldrex	r3, [r3]
 80030c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	330c      	adds	r3, #12
 80030d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030d2:	643a      	str	r2, [r7, #64]	; 0x40
 80030d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030da:	e841 2300 	strex	r3, r2, [r1]
 80030de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1e5      	bne.n	80030b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3314      	adds	r3, #20
 80030ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	e853 3f00 	ldrex	r3, [r3]
 80030f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f023 0301 	bic.w	r3, r3, #1
 80030fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3314      	adds	r3, #20
 8003104:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003106:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003108:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800310c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800310e:	e841 2300 	strex	r3, r2, [r1]
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1e5      	bne.n	80030e6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	2b01      	cmp	r3, #1
 8003120:	d119      	bne.n	8003156 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	330c      	adds	r3, #12
 8003128:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	e853 3f00 	ldrex	r3, [r3]
 8003130:	60bb      	str	r3, [r7, #8]
   return(result);
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f023 0310 	bic.w	r3, r3, #16
 8003138:	647b      	str	r3, [r7, #68]	; 0x44
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	330c      	adds	r3, #12
 8003140:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003142:	61ba      	str	r2, [r7, #24]
 8003144:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003146:	6979      	ldr	r1, [r7, #20]
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	e841 2300 	strex	r3, r2, [r1]
 800314e:	613b      	str	r3, [r7, #16]
   return(result);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1e5      	bne.n	8003122 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003164:	bf00      	nop
 8003166:	3754      	adds	r7, #84	; 0x54
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f7ff ff1e 	bl	8002fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b21      	cmp	r3, #33	; 0x21
 80031aa:	d13e      	bne.n	800322a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b4:	d114      	bne.n	80031e0 <UART_Transmit_IT+0x48>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d110      	bne.n	80031e0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	461a      	mov	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	1c9a      	adds	r2, r3, #2
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	621a      	str	r2, [r3, #32]
 80031de:	e008      	b.n	80031f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	1c59      	adds	r1, r3, #1
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6211      	str	r1, [r2, #32]
 80031ea:	781a      	ldrb	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	4619      	mov	r1, r3
 8003200:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10f      	bne.n	8003226 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003214:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003224:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	e000      	b.n	800322c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800322a:	2302      	movs	r3, #2
  }
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800324e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff fea3 	bl	8002fa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08c      	sub	sp, #48	; 0x30
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b22      	cmp	r3, #34	; 0x22
 800327a:	f040 80ae 	bne.w	80033da <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003286:	d117      	bne.n	80032b8 <UART_Receive_IT+0x50>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d113      	bne.n	80032b8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003290:	2300      	movs	r3, #0
 8003292:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	1c9a      	adds	r2, r3, #2
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	629a      	str	r2, [r3, #40]	; 0x28
 80032b6:	e026      	b.n	8003306 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ca:	d007      	beq.n	80032dc <UART_Receive_IT+0x74>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10a      	bne.n	80032ea <UART_Receive_IT+0x82>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d106      	bne.n	80032ea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e6:	701a      	strb	r2, [r3, #0]
 80032e8:	e008      	b.n	80032fc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29b      	uxth	r3, r3
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	4619      	mov	r1, r3
 8003314:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003316:	2b00      	cmp	r3, #0
 8003318:	d15d      	bne.n	80033d6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0220 	bic.w	r2, r2, #32
 8003328:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003338:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695a      	ldr	r2, [r3, #20]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	2b01      	cmp	r3, #1
 800335e:	d135      	bne.n	80033cc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	330c      	adds	r3, #12
 800336c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	e853 3f00 	ldrex	r3, [r3]
 8003374:	613b      	str	r3, [r7, #16]
   return(result);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f023 0310 	bic.w	r3, r3, #16
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	330c      	adds	r3, #12
 8003384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003386:	623a      	str	r2, [r7, #32]
 8003388:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338a:	69f9      	ldr	r1, [r7, #28]
 800338c:	6a3a      	ldr	r2, [r7, #32]
 800338e:	e841 2300 	strex	r3, r2, [r1]
 8003392:	61bb      	str	r3, [r7, #24]
   return(result);
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1e5      	bne.n	8003366 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b10      	cmp	r3, #16
 80033a6:	d10a      	bne.n	80033be <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033c2:	4619      	mov	r1, r3
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff fe0b 	bl	8002fe0 <HAL_UARTEx_RxEventCallback>
 80033ca:	e002      	b.n	80033d2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff fdf3 	bl	8002fb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	e002      	b.n	80033dc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80033da:	2302      	movs	r3, #2
  }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3730      	adds	r7, #48	; 0x30
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033e8:	b0c0      	sub	sp, #256	; 0x100
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003400:	68d9      	ldr	r1, [r3, #12]
 8003402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	ea40 0301 	orr.w	r3, r0, r1
 800340c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800340e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	431a      	orrs	r2, r3
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	431a      	orrs	r2, r3
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800343c:	f021 010c 	bic.w	r1, r1, #12
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800344a:	430b      	orrs	r3, r1
 800344c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800344e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800345a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345e:	6999      	ldr	r1, [r3, #24]
 8003460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	ea40 0301 	orr.w	r3, r0, r1
 800346a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800346c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	4b8f      	ldr	r3, [pc, #572]	; (80036b0 <UART_SetConfig+0x2cc>)
 8003474:	429a      	cmp	r2, r3
 8003476:	d005      	beq.n	8003484 <UART_SetConfig+0xa0>
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4b8d      	ldr	r3, [pc, #564]	; (80036b4 <UART_SetConfig+0x2d0>)
 8003480:	429a      	cmp	r2, r3
 8003482:	d104      	bne.n	800348e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003484:	f7fe fa0a 	bl	800189c <HAL_RCC_GetPCLK2Freq>
 8003488:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800348c:	e003      	b.n	8003496 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800348e:	f7fe f9f1 	bl	8001874 <HAL_RCC_GetPCLK1Freq>
 8003492:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a0:	f040 810c 	bne.w	80036bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034a8:	2200      	movs	r2, #0
 80034aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034b6:	4622      	mov	r2, r4
 80034b8:	462b      	mov	r3, r5
 80034ba:	1891      	adds	r1, r2, r2
 80034bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80034be:	415b      	adcs	r3, r3
 80034c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034c6:	4621      	mov	r1, r4
 80034c8:	eb12 0801 	adds.w	r8, r2, r1
 80034cc:	4629      	mov	r1, r5
 80034ce:	eb43 0901 	adc.w	r9, r3, r1
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034e6:	4690      	mov	r8, r2
 80034e8:	4699      	mov	r9, r3
 80034ea:	4623      	mov	r3, r4
 80034ec:	eb18 0303 	adds.w	r3, r8, r3
 80034f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034f4:	462b      	mov	r3, r5
 80034f6:	eb49 0303 	adc.w	r3, r9, r3
 80034fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800350a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800350e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003512:	460b      	mov	r3, r1
 8003514:	18db      	adds	r3, r3, r3
 8003516:	653b      	str	r3, [r7, #80]	; 0x50
 8003518:	4613      	mov	r3, r2
 800351a:	eb42 0303 	adc.w	r3, r2, r3
 800351e:	657b      	str	r3, [r7, #84]	; 0x54
 8003520:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003524:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003528:	f7fc feca 	bl	80002c0 <__aeabi_uldivmod>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4b61      	ldr	r3, [pc, #388]	; (80036b8 <UART_SetConfig+0x2d4>)
 8003532:	fba3 2302 	umull	r2, r3, r3, r2
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	011c      	lsls	r4, r3, #4
 800353a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800353e:	2200      	movs	r2, #0
 8003540:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003544:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003548:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800354c:	4642      	mov	r2, r8
 800354e:	464b      	mov	r3, r9
 8003550:	1891      	adds	r1, r2, r2
 8003552:	64b9      	str	r1, [r7, #72]	; 0x48
 8003554:	415b      	adcs	r3, r3
 8003556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003558:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800355c:	4641      	mov	r1, r8
 800355e:	eb12 0a01 	adds.w	sl, r2, r1
 8003562:	4649      	mov	r1, r9
 8003564:	eb43 0b01 	adc.w	fp, r3, r1
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003574:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003578:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800357c:	4692      	mov	sl, r2
 800357e:	469b      	mov	fp, r3
 8003580:	4643      	mov	r3, r8
 8003582:	eb1a 0303 	adds.w	r3, sl, r3
 8003586:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800358a:	464b      	mov	r3, r9
 800358c:	eb4b 0303 	adc.w	r3, fp, r3
 8003590:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035a8:	460b      	mov	r3, r1
 80035aa:	18db      	adds	r3, r3, r3
 80035ac:	643b      	str	r3, [r7, #64]	; 0x40
 80035ae:	4613      	mov	r3, r2
 80035b0:	eb42 0303 	adc.w	r3, r2, r3
 80035b4:	647b      	str	r3, [r7, #68]	; 0x44
 80035b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035be:	f7fc fe7f 	bl	80002c0 <__aeabi_uldivmod>
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	4611      	mov	r1, r2
 80035c8:	4b3b      	ldr	r3, [pc, #236]	; (80036b8 <UART_SetConfig+0x2d4>)
 80035ca:	fba3 2301 	umull	r2, r3, r3, r1
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	2264      	movs	r2, #100	; 0x64
 80035d2:	fb02 f303 	mul.w	r3, r2, r3
 80035d6:	1acb      	subs	r3, r1, r3
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035de:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <UART_SetConfig+0x2d4>)
 80035e0:	fba3 2302 	umull	r2, r3, r3, r2
 80035e4:	095b      	lsrs	r3, r3, #5
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035ec:	441c      	add	r4, r3
 80035ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035f2:	2200      	movs	r2, #0
 80035f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003600:	4642      	mov	r2, r8
 8003602:	464b      	mov	r3, r9
 8003604:	1891      	adds	r1, r2, r2
 8003606:	63b9      	str	r1, [r7, #56]	; 0x38
 8003608:	415b      	adcs	r3, r3
 800360a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800360c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003610:	4641      	mov	r1, r8
 8003612:	1851      	adds	r1, r2, r1
 8003614:	6339      	str	r1, [r7, #48]	; 0x30
 8003616:	4649      	mov	r1, r9
 8003618:	414b      	adcs	r3, r1
 800361a:	637b      	str	r3, [r7, #52]	; 0x34
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003628:	4659      	mov	r1, fp
 800362a:	00cb      	lsls	r3, r1, #3
 800362c:	4651      	mov	r1, sl
 800362e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003632:	4651      	mov	r1, sl
 8003634:	00ca      	lsls	r2, r1, #3
 8003636:	4610      	mov	r0, r2
 8003638:	4619      	mov	r1, r3
 800363a:	4603      	mov	r3, r0
 800363c:	4642      	mov	r2, r8
 800363e:	189b      	adds	r3, r3, r2
 8003640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003644:	464b      	mov	r3, r9
 8003646:	460a      	mov	r2, r1
 8003648:	eb42 0303 	adc.w	r3, r2, r3
 800364c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800365c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003660:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003664:	460b      	mov	r3, r1
 8003666:	18db      	adds	r3, r3, r3
 8003668:	62bb      	str	r3, [r7, #40]	; 0x28
 800366a:	4613      	mov	r3, r2
 800366c:	eb42 0303 	adc.w	r3, r2, r3
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003672:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003676:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800367a:	f7fc fe21 	bl	80002c0 <__aeabi_uldivmod>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <UART_SetConfig+0x2d4>)
 8003684:	fba3 1302 	umull	r1, r3, r3, r2
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	2164      	movs	r1, #100	; 0x64
 800368c:	fb01 f303 	mul.w	r3, r1, r3
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	3332      	adds	r3, #50	; 0x32
 8003696:	4a08      	ldr	r2, [pc, #32]	; (80036b8 <UART_SetConfig+0x2d4>)
 8003698:	fba2 2303 	umull	r2, r3, r2, r3
 800369c:	095b      	lsrs	r3, r3, #5
 800369e:	f003 0207 	and.w	r2, r3, #7
 80036a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4422      	add	r2, r4
 80036aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036ac:	e106      	b.n	80038bc <UART_SetConfig+0x4d8>
 80036ae:	bf00      	nop
 80036b0:	40011000 	.word	0x40011000
 80036b4:	40011400 	.word	0x40011400
 80036b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036c0:	2200      	movs	r2, #0
 80036c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036ce:	4642      	mov	r2, r8
 80036d0:	464b      	mov	r3, r9
 80036d2:	1891      	adds	r1, r2, r2
 80036d4:	6239      	str	r1, [r7, #32]
 80036d6:	415b      	adcs	r3, r3
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
 80036da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036de:	4641      	mov	r1, r8
 80036e0:	1854      	adds	r4, r2, r1
 80036e2:	4649      	mov	r1, r9
 80036e4:	eb43 0501 	adc.w	r5, r3, r1
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	00eb      	lsls	r3, r5, #3
 80036f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036f6:	00e2      	lsls	r2, r4, #3
 80036f8:	4614      	mov	r4, r2
 80036fa:	461d      	mov	r5, r3
 80036fc:	4643      	mov	r3, r8
 80036fe:	18e3      	adds	r3, r4, r3
 8003700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003704:	464b      	mov	r3, r9
 8003706:	eb45 0303 	adc.w	r3, r5, r3
 800370a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800370e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800371a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800372a:	4629      	mov	r1, r5
 800372c:	008b      	lsls	r3, r1, #2
 800372e:	4621      	mov	r1, r4
 8003730:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003734:	4621      	mov	r1, r4
 8003736:	008a      	lsls	r2, r1, #2
 8003738:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800373c:	f7fc fdc0 	bl	80002c0 <__aeabi_uldivmod>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4b60      	ldr	r3, [pc, #384]	; (80038c8 <UART_SetConfig+0x4e4>)
 8003746:	fba3 2302 	umull	r2, r3, r3, r2
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	011c      	lsls	r4, r3, #4
 800374e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003752:	2200      	movs	r2, #0
 8003754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003758:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800375c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003760:	4642      	mov	r2, r8
 8003762:	464b      	mov	r3, r9
 8003764:	1891      	adds	r1, r2, r2
 8003766:	61b9      	str	r1, [r7, #24]
 8003768:	415b      	adcs	r3, r3
 800376a:	61fb      	str	r3, [r7, #28]
 800376c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003770:	4641      	mov	r1, r8
 8003772:	1851      	adds	r1, r2, r1
 8003774:	6139      	str	r1, [r7, #16]
 8003776:	4649      	mov	r1, r9
 8003778:	414b      	adcs	r3, r1
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003788:	4659      	mov	r1, fp
 800378a:	00cb      	lsls	r3, r1, #3
 800378c:	4651      	mov	r1, sl
 800378e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003792:	4651      	mov	r1, sl
 8003794:	00ca      	lsls	r2, r1, #3
 8003796:	4610      	mov	r0, r2
 8003798:	4619      	mov	r1, r3
 800379a:	4603      	mov	r3, r0
 800379c:	4642      	mov	r2, r8
 800379e:	189b      	adds	r3, r3, r2
 80037a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037a4:	464b      	mov	r3, r9
 80037a6:	460a      	mov	r2, r1
 80037a8:	eb42 0303 	adc.w	r3, r2, r3
 80037ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80037ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037c8:	4649      	mov	r1, r9
 80037ca:	008b      	lsls	r3, r1, #2
 80037cc:	4641      	mov	r1, r8
 80037ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037d2:	4641      	mov	r1, r8
 80037d4:	008a      	lsls	r2, r1, #2
 80037d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037da:	f7fc fd71 	bl	80002c0 <__aeabi_uldivmod>
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4611      	mov	r1, r2
 80037e4:	4b38      	ldr	r3, [pc, #224]	; (80038c8 <UART_SetConfig+0x4e4>)
 80037e6:	fba3 2301 	umull	r2, r3, r3, r1
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	2264      	movs	r2, #100	; 0x64
 80037ee:	fb02 f303 	mul.w	r3, r2, r3
 80037f2:	1acb      	subs	r3, r1, r3
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	3332      	adds	r3, #50	; 0x32
 80037f8:	4a33      	ldr	r2, [pc, #204]	; (80038c8 <UART_SetConfig+0x4e4>)
 80037fa:	fba2 2303 	umull	r2, r3, r2, r3
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003804:	441c      	add	r4, r3
 8003806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800380a:	2200      	movs	r2, #0
 800380c:	673b      	str	r3, [r7, #112]	; 0x70
 800380e:	677a      	str	r2, [r7, #116]	; 0x74
 8003810:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003814:	4642      	mov	r2, r8
 8003816:	464b      	mov	r3, r9
 8003818:	1891      	adds	r1, r2, r2
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	415b      	adcs	r3, r3
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003824:	4641      	mov	r1, r8
 8003826:	1851      	adds	r1, r2, r1
 8003828:	6039      	str	r1, [r7, #0]
 800382a:	4649      	mov	r1, r9
 800382c:	414b      	adcs	r3, r1
 800382e:	607b      	str	r3, [r7, #4]
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800383c:	4659      	mov	r1, fp
 800383e:	00cb      	lsls	r3, r1, #3
 8003840:	4651      	mov	r1, sl
 8003842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003846:	4651      	mov	r1, sl
 8003848:	00ca      	lsls	r2, r1, #3
 800384a:	4610      	mov	r0, r2
 800384c:	4619      	mov	r1, r3
 800384e:	4603      	mov	r3, r0
 8003850:	4642      	mov	r2, r8
 8003852:	189b      	adds	r3, r3, r2
 8003854:	66bb      	str	r3, [r7, #104]	; 0x68
 8003856:	464b      	mov	r3, r9
 8003858:	460a      	mov	r2, r1
 800385a:	eb42 0303 	adc.w	r3, r2, r3
 800385e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	663b      	str	r3, [r7, #96]	; 0x60
 800386a:	667a      	str	r2, [r7, #100]	; 0x64
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003878:	4649      	mov	r1, r9
 800387a:	008b      	lsls	r3, r1, #2
 800387c:	4641      	mov	r1, r8
 800387e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003882:	4641      	mov	r1, r8
 8003884:	008a      	lsls	r2, r1, #2
 8003886:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800388a:	f7fc fd19 	bl	80002c0 <__aeabi_uldivmod>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <UART_SetConfig+0x4e4>)
 8003894:	fba3 1302 	umull	r1, r3, r3, r2
 8003898:	095b      	lsrs	r3, r3, #5
 800389a:	2164      	movs	r1, #100	; 0x64
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	3332      	adds	r3, #50	; 0x32
 80038a6:	4a08      	ldr	r2, [pc, #32]	; (80038c8 <UART_SetConfig+0x4e4>)
 80038a8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ac:	095b      	lsrs	r3, r3, #5
 80038ae:	f003 020f 	and.w	r2, r3, #15
 80038b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4422      	add	r2, r4
 80038ba:	609a      	str	r2, [r3, #8]
}
 80038bc:	bf00      	nop
 80038be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038c2:	46bd      	mov	sp, r7
 80038c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038c8:	51eb851f 	.word	0x51eb851f

080038cc <siprintf>:
 80038cc:	b40e      	push	{r1, r2, r3}
 80038ce:	b500      	push	{lr}
 80038d0:	b09c      	sub	sp, #112	; 0x70
 80038d2:	ab1d      	add	r3, sp, #116	; 0x74
 80038d4:	9002      	str	r0, [sp, #8]
 80038d6:	9006      	str	r0, [sp, #24]
 80038d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038dc:	4809      	ldr	r0, [pc, #36]	; (8003904 <siprintf+0x38>)
 80038de:	9107      	str	r1, [sp, #28]
 80038e0:	9104      	str	r1, [sp, #16]
 80038e2:	4909      	ldr	r1, [pc, #36]	; (8003908 <siprintf+0x3c>)
 80038e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80038e8:	9105      	str	r1, [sp, #20]
 80038ea:	6800      	ldr	r0, [r0, #0]
 80038ec:	9301      	str	r3, [sp, #4]
 80038ee:	a902      	add	r1, sp, #8
 80038f0:	f000 f992 	bl	8003c18 <_svfiprintf_r>
 80038f4:	9b02      	ldr	r3, [sp, #8]
 80038f6:	2200      	movs	r2, #0
 80038f8:	701a      	strb	r2, [r3, #0]
 80038fa:	b01c      	add	sp, #112	; 0x70
 80038fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003900:	b003      	add	sp, #12
 8003902:	4770      	bx	lr
 8003904:	20000058 	.word	0x20000058
 8003908:	ffff0208 	.word	0xffff0208

0800390c <memset>:
 800390c:	4402      	add	r2, r0
 800390e:	4603      	mov	r3, r0
 8003910:	4293      	cmp	r3, r2
 8003912:	d100      	bne.n	8003916 <memset+0xa>
 8003914:	4770      	bx	lr
 8003916:	f803 1b01 	strb.w	r1, [r3], #1
 800391a:	e7f9      	b.n	8003910 <memset+0x4>

0800391c <__errno>:
 800391c:	4b01      	ldr	r3, [pc, #4]	; (8003924 <__errno+0x8>)
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	20000058 	.word	0x20000058

08003928 <__libc_init_array>:
 8003928:	b570      	push	{r4, r5, r6, lr}
 800392a:	4d0d      	ldr	r5, [pc, #52]	; (8003960 <__libc_init_array+0x38>)
 800392c:	4c0d      	ldr	r4, [pc, #52]	; (8003964 <__libc_init_array+0x3c>)
 800392e:	1b64      	subs	r4, r4, r5
 8003930:	10a4      	asrs	r4, r4, #2
 8003932:	2600      	movs	r6, #0
 8003934:	42a6      	cmp	r6, r4
 8003936:	d109      	bne.n	800394c <__libc_init_array+0x24>
 8003938:	4d0b      	ldr	r5, [pc, #44]	; (8003968 <__libc_init_array+0x40>)
 800393a:	4c0c      	ldr	r4, [pc, #48]	; (800396c <__libc_init_array+0x44>)
 800393c:	f000 fc6a 	bl	8004214 <_init>
 8003940:	1b64      	subs	r4, r4, r5
 8003942:	10a4      	asrs	r4, r4, #2
 8003944:	2600      	movs	r6, #0
 8003946:	42a6      	cmp	r6, r4
 8003948:	d105      	bne.n	8003956 <__libc_init_array+0x2e>
 800394a:	bd70      	pop	{r4, r5, r6, pc}
 800394c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003950:	4798      	blx	r3
 8003952:	3601      	adds	r6, #1
 8003954:	e7ee      	b.n	8003934 <__libc_init_array+0xc>
 8003956:	f855 3b04 	ldr.w	r3, [r5], #4
 800395a:	4798      	blx	r3
 800395c:	3601      	adds	r6, #1
 800395e:	e7f2      	b.n	8003946 <__libc_init_array+0x1e>
 8003960:	080042cc 	.word	0x080042cc
 8003964:	080042cc 	.word	0x080042cc
 8003968:	080042cc 	.word	0x080042cc
 800396c:	080042d0 	.word	0x080042d0

08003970 <__retarget_lock_acquire_recursive>:
 8003970:	4770      	bx	lr

08003972 <__retarget_lock_release_recursive>:
 8003972:	4770      	bx	lr

08003974 <_free_r>:
 8003974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003976:	2900      	cmp	r1, #0
 8003978:	d044      	beq.n	8003a04 <_free_r+0x90>
 800397a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800397e:	9001      	str	r0, [sp, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	f1a1 0404 	sub.w	r4, r1, #4
 8003986:	bfb8      	it	lt
 8003988:	18e4      	addlt	r4, r4, r3
 800398a:	f000 f8df 	bl	8003b4c <__malloc_lock>
 800398e:	4a1e      	ldr	r2, [pc, #120]	; (8003a08 <_free_r+0x94>)
 8003990:	9801      	ldr	r0, [sp, #4]
 8003992:	6813      	ldr	r3, [r2, #0]
 8003994:	b933      	cbnz	r3, 80039a4 <_free_r+0x30>
 8003996:	6063      	str	r3, [r4, #4]
 8003998:	6014      	str	r4, [r2, #0]
 800399a:	b003      	add	sp, #12
 800399c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039a0:	f000 b8da 	b.w	8003b58 <__malloc_unlock>
 80039a4:	42a3      	cmp	r3, r4
 80039a6:	d908      	bls.n	80039ba <_free_r+0x46>
 80039a8:	6825      	ldr	r5, [r4, #0]
 80039aa:	1961      	adds	r1, r4, r5
 80039ac:	428b      	cmp	r3, r1
 80039ae:	bf01      	itttt	eq
 80039b0:	6819      	ldreq	r1, [r3, #0]
 80039b2:	685b      	ldreq	r3, [r3, #4]
 80039b4:	1949      	addeq	r1, r1, r5
 80039b6:	6021      	streq	r1, [r4, #0]
 80039b8:	e7ed      	b.n	8003996 <_free_r+0x22>
 80039ba:	461a      	mov	r2, r3
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	b10b      	cbz	r3, 80039c4 <_free_r+0x50>
 80039c0:	42a3      	cmp	r3, r4
 80039c2:	d9fa      	bls.n	80039ba <_free_r+0x46>
 80039c4:	6811      	ldr	r1, [r2, #0]
 80039c6:	1855      	adds	r5, r2, r1
 80039c8:	42a5      	cmp	r5, r4
 80039ca:	d10b      	bne.n	80039e4 <_free_r+0x70>
 80039cc:	6824      	ldr	r4, [r4, #0]
 80039ce:	4421      	add	r1, r4
 80039d0:	1854      	adds	r4, r2, r1
 80039d2:	42a3      	cmp	r3, r4
 80039d4:	6011      	str	r1, [r2, #0]
 80039d6:	d1e0      	bne.n	800399a <_free_r+0x26>
 80039d8:	681c      	ldr	r4, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	6053      	str	r3, [r2, #4]
 80039de:	440c      	add	r4, r1
 80039e0:	6014      	str	r4, [r2, #0]
 80039e2:	e7da      	b.n	800399a <_free_r+0x26>
 80039e4:	d902      	bls.n	80039ec <_free_r+0x78>
 80039e6:	230c      	movs	r3, #12
 80039e8:	6003      	str	r3, [r0, #0]
 80039ea:	e7d6      	b.n	800399a <_free_r+0x26>
 80039ec:	6825      	ldr	r5, [r4, #0]
 80039ee:	1961      	adds	r1, r4, r5
 80039f0:	428b      	cmp	r3, r1
 80039f2:	bf04      	itt	eq
 80039f4:	6819      	ldreq	r1, [r3, #0]
 80039f6:	685b      	ldreq	r3, [r3, #4]
 80039f8:	6063      	str	r3, [r4, #4]
 80039fa:	bf04      	itt	eq
 80039fc:	1949      	addeq	r1, r1, r5
 80039fe:	6021      	streq	r1, [r4, #0]
 8003a00:	6054      	str	r4, [r2, #4]
 8003a02:	e7ca      	b.n	800399a <_free_r+0x26>
 8003a04:	b003      	add	sp, #12
 8003a06:	bd30      	pop	{r4, r5, pc}
 8003a08:	20000250 	.word	0x20000250

08003a0c <sbrk_aligned>:
 8003a0c:	b570      	push	{r4, r5, r6, lr}
 8003a0e:	4e0e      	ldr	r6, [pc, #56]	; (8003a48 <sbrk_aligned+0x3c>)
 8003a10:	460c      	mov	r4, r1
 8003a12:	6831      	ldr	r1, [r6, #0]
 8003a14:	4605      	mov	r5, r0
 8003a16:	b911      	cbnz	r1, 8003a1e <sbrk_aligned+0x12>
 8003a18:	f000 fba6 	bl	8004168 <_sbrk_r>
 8003a1c:	6030      	str	r0, [r6, #0]
 8003a1e:	4621      	mov	r1, r4
 8003a20:	4628      	mov	r0, r5
 8003a22:	f000 fba1 	bl	8004168 <_sbrk_r>
 8003a26:	1c43      	adds	r3, r0, #1
 8003a28:	d00a      	beq.n	8003a40 <sbrk_aligned+0x34>
 8003a2a:	1cc4      	adds	r4, r0, #3
 8003a2c:	f024 0403 	bic.w	r4, r4, #3
 8003a30:	42a0      	cmp	r0, r4
 8003a32:	d007      	beq.n	8003a44 <sbrk_aligned+0x38>
 8003a34:	1a21      	subs	r1, r4, r0
 8003a36:	4628      	mov	r0, r5
 8003a38:	f000 fb96 	bl	8004168 <_sbrk_r>
 8003a3c:	3001      	adds	r0, #1
 8003a3e:	d101      	bne.n	8003a44 <sbrk_aligned+0x38>
 8003a40:	f04f 34ff 	mov.w	r4, #4294967295
 8003a44:	4620      	mov	r0, r4
 8003a46:	bd70      	pop	{r4, r5, r6, pc}
 8003a48:	20000254 	.word	0x20000254

08003a4c <_malloc_r>:
 8003a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a50:	1ccd      	adds	r5, r1, #3
 8003a52:	f025 0503 	bic.w	r5, r5, #3
 8003a56:	3508      	adds	r5, #8
 8003a58:	2d0c      	cmp	r5, #12
 8003a5a:	bf38      	it	cc
 8003a5c:	250c      	movcc	r5, #12
 8003a5e:	2d00      	cmp	r5, #0
 8003a60:	4607      	mov	r7, r0
 8003a62:	db01      	blt.n	8003a68 <_malloc_r+0x1c>
 8003a64:	42a9      	cmp	r1, r5
 8003a66:	d905      	bls.n	8003a74 <_malloc_r+0x28>
 8003a68:	230c      	movs	r3, #12
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	2600      	movs	r6, #0
 8003a6e:	4630      	mov	r0, r6
 8003a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003b48 <_malloc_r+0xfc>
 8003a78:	f000 f868 	bl	8003b4c <__malloc_lock>
 8003a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8003a80:	461c      	mov	r4, r3
 8003a82:	bb5c      	cbnz	r4, 8003adc <_malloc_r+0x90>
 8003a84:	4629      	mov	r1, r5
 8003a86:	4638      	mov	r0, r7
 8003a88:	f7ff ffc0 	bl	8003a0c <sbrk_aligned>
 8003a8c:	1c43      	adds	r3, r0, #1
 8003a8e:	4604      	mov	r4, r0
 8003a90:	d155      	bne.n	8003b3e <_malloc_r+0xf2>
 8003a92:	f8d8 4000 	ldr.w	r4, [r8]
 8003a96:	4626      	mov	r6, r4
 8003a98:	2e00      	cmp	r6, #0
 8003a9a:	d145      	bne.n	8003b28 <_malloc_r+0xdc>
 8003a9c:	2c00      	cmp	r4, #0
 8003a9e:	d048      	beq.n	8003b32 <_malloc_r+0xe6>
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	4631      	mov	r1, r6
 8003aa4:	4638      	mov	r0, r7
 8003aa6:	eb04 0903 	add.w	r9, r4, r3
 8003aaa:	f000 fb5d 	bl	8004168 <_sbrk_r>
 8003aae:	4581      	cmp	r9, r0
 8003ab0:	d13f      	bne.n	8003b32 <_malloc_r+0xe6>
 8003ab2:	6821      	ldr	r1, [r4, #0]
 8003ab4:	1a6d      	subs	r5, r5, r1
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	4638      	mov	r0, r7
 8003aba:	f7ff ffa7 	bl	8003a0c <sbrk_aligned>
 8003abe:	3001      	adds	r0, #1
 8003ac0:	d037      	beq.n	8003b32 <_malloc_r+0xe6>
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	442b      	add	r3, r5
 8003ac6:	6023      	str	r3, [r4, #0]
 8003ac8:	f8d8 3000 	ldr.w	r3, [r8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d038      	beq.n	8003b42 <_malloc_r+0xf6>
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	42a2      	cmp	r2, r4
 8003ad4:	d12b      	bne.n	8003b2e <_malloc_r+0xe2>
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	605a      	str	r2, [r3, #4]
 8003ada:	e00f      	b.n	8003afc <_malloc_r+0xb0>
 8003adc:	6822      	ldr	r2, [r4, #0]
 8003ade:	1b52      	subs	r2, r2, r5
 8003ae0:	d41f      	bmi.n	8003b22 <_malloc_r+0xd6>
 8003ae2:	2a0b      	cmp	r2, #11
 8003ae4:	d917      	bls.n	8003b16 <_malloc_r+0xca>
 8003ae6:	1961      	adds	r1, r4, r5
 8003ae8:	42a3      	cmp	r3, r4
 8003aea:	6025      	str	r5, [r4, #0]
 8003aec:	bf18      	it	ne
 8003aee:	6059      	strne	r1, [r3, #4]
 8003af0:	6863      	ldr	r3, [r4, #4]
 8003af2:	bf08      	it	eq
 8003af4:	f8c8 1000 	streq.w	r1, [r8]
 8003af8:	5162      	str	r2, [r4, r5]
 8003afa:	604b      	str	r3, [r1, #4]
 8003afc:	4638      	mov	r0, r7
 8003afe:	f104 060b 	add.w	r6, r4, #11
 8003b02:	f000 f829 	bl	8003b58 <__malloc_unlock>
 8003b06:	f026 0607 	bic.w	r6, r6, #7
 8003b0a:	1d23      	adds	r3, r4, #4
 8003b0c:	1af2      	subs	r2, r6, r3
 8003b0e:	d0ae      	beq.n	8003a6e <_malloc_r+0x22>
 8003b10:	1b9b      	subs	r3, r3, r6
 8003b12:	50a3      	str	r3, [r4, r2]
 8003b14:	e7ab      	b.n	8003a6e <_malloc_r+0x22>
 8003b16:	42a3      	cmp	r3, r4
 8003b18:	6862      	ldr	r2, [r4, #4]
 8003b1a:	d1dd      	bne.n	8003ad8 <_malloc_r+0x8c>
 8003b1c:	f8c8 2000 	str.w	r2, [r8]
 8003b20:	e7ec      	b.n	8003afc <_malloc_r+0xb0>
 8003b22:	4623      	mov	r3, r4
 8003b24:	6864      	ldr	r4, [r4, #4]
 8003b26:	e7ac      	b.n	8003a82 <_malloc_r+0x36>
 8003b28:	4634      	mov	r4, r6
 8003b2a:	6876      	ldr	r6, [r6, #4]
 8003b2c:	e7b4      	b.n	8003a98 <_malloc_r+0x4c>
 8003b2e:	4613      	mov	r3, r2
 8003b30:	e7cc      	b.n	8003acc <_malloc_r+0x80>
 8003b32:	230c      	movs	r3, #12
 8003b34:	603b      	str	r3, [r7, #0]
 8003b36:	4638      	mov	r0, r7
 8003b38:	f000 f80e 	bl	8003b58 <__malloc_unlock>
 8003b3c:	e797      	b.n	8003a6e <_malloc_r+0x22>
 8003b3e:	6025      	str	r5, [r4, #0]
 8003b40:	e7dc      	b.n	8003afc <_malloc_r+0xb0>
 8003b42:	605b      	str	r3, [r3, #4]
 8003b44:	deff      	udf	#255	; 0xff
 8003b46:	bf00      	nop
 8003b48:	20000250 	.word	0x20000250

08003b4c <__malloc_lock>:
 8003b4c:	4801      	ldr	r0, [pc, #4]	; (8003b54 <__malloc_lock+0x8>)
 8003b4e:	f7ff bf0f 	b.w	8003970 <__retarget_lock_acquire_recursive>
 8003b52:	bf00      	nop
 8003b54:	2000024c 	.word	0x2000024c

08003b58 <__malloc_unlock>:
 8003b58:	4801      	ldr	r0, [pc, #4]	; (8003b60 <__malloc_unlock+0x8>)
 8003b5a:	f7ff bf0a 	b.w	8003972 <__retarget_lock_release_recursive>
 8003b5e:	bf00      	nop
 8003b60:	2000024c 	.word	0x2000024c

08003b64 <__ssputs_r>:
 8003b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b68:	688e      	ldr	r6, [r1, #8]
 8003b6a:	461f      	mov	r7, r3
 8003b6c:	42be      	cmp	r6, r7
 8003b6e:	680b      	ldr	r3, [r1, #0]
 8003b70:	4682      	mov	sl, r0
 8003b72:	460c      	mov	r4, r1
 8003b74:	4690      	mov	r8, r2
 8003b76:	d82c      	bhi.n	8003bd2 <__ssputs_r+0x6e>
 8003b78:	898a      	ldrh	r2, [r1, #12]
 8003b7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b7e:	d026      	beq.n	8003bce <__ssputs_r+0x6a>
 8003b80:	6965      	ldr	r5, [r4, #20]
 8003b82:	6909      	ldr	r1, [r1, #16]
 8003b84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b88:	eba3 0901 	sub.w	r9, r3, r1
 8003b8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b90:	1c7b      	adds	r3, r7, #1
 8003b92:	444b      	add	r3, r9
 8003b94:	106d      	asrs	r5, r5, #1
 8003b96:	429d      	cmp	r5, r3
 8003b98:	bf38      	it	cc
 8003b9a:	461d      	movcc	r5, r3
 8003b9c:	0553      	lsls	r3, r2, #21
 8003b9e:	d527      	bpl.n	8003bf0 <__ssputs_r+0x8c>
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	f7ff ff53 	bl	8003a4c <_malloc_r>
 8003ba6:	4606      	mov	r6, r0
 8003ba8:	b360      	cbz	r0, 8003c04 <__ssputs_r+0xa0>
 8003baa:	6921      	ldr	r1, [r4, #16]
 8003bac:	464a      	mov	r2, r9
 8003bae:	f000 faeb 	bl	8004188 <memcpy>
 8003bb2:	89a3      	ldrh	r3, [r4, #12]
 8003bb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bbc:	81a3      	strh	r3, [r4, #12]
 8003bbe:	6126      	str	r6, [r4, #16]
 8003bc0:	6165      	str	r5, [r4, #20]
 8003bc2:	444e      	add	r6, r9
 8003bc4:	eba5 0509 	sub.w	r5, r5, r9
 8003bc8:	6026      	str	r6, [r4, #0]
 8003bca:	60a5      	str	r5, [r4, #8]
 8003bcc:	463e      	mov	r6, r7
 8003bce:	42be      	cmp	r6, r7
 8003bd0:	d900      	bls.n	8003bd4 <__ssputs_r+0x70>
 8003bd2:	463e      	mov	r6, r7
 8003bd4:	6820      	ldr	r0, [r4, #0]
 8003bd6:	4632      	mov	r2, r6
 8003bd8:	4641      	mov	r1, r8
 8003bda:	f000 faab 	bl	8004134 <memmove>
 8003bde:	68a3      	ldr	r3, [r4, #8]
 8003be0:	1b9b      	subs	r3, r3, r6
 8003be2:	60a3      	str	r3, [r4, #8]
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	4433      	add	r3, r6
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	2000      	movs	r0, #0
 8003bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bf0:	462a      	mov	r2, r5
 8003bf2:	f000 fad7 	bl	80041a4 <_realloc_r>
 8003bf6:	4606      	mov	r6, r0
 8003bf8:	2800      	cmp	r0, #0
 8003bfa:	d1e0      	bne.n	8003bbe <__ssputs_r+0x5a>
 8003bfc:	6921      	ldr	r1, [r4, #16]
 8003bfe:	4650      	mov	r0, sl
 8003c00:	f7ff feb8 	bl	8003974 <_free_r>
 8003c04:	230c      	movs	r3, #12
 8003c06:	f8ca 3000 	str.w	r3, [sl]
 8003c0a:	89a3      	ldrh	r3, [r4, #12]
 8003c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c10:	81a3      	strh	r3, [r4, #12]
 8003c12:	f04f 30ff 	mov.w	r0, #4294967295
 8003c16:	e7e9      	b.n	8003bec <__ssputs_r+0x88>

08003c18 <_svfiprintf_r>:
 8003c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c1c:	4698      	mov	r8, r3
 8003c1e:	898b      	ldrh	r3, [r1, #12]
 8003c20:	061b      	lsls	r3, r3, #24
 8003c22:	b09d      	sub	sp, #116	; 0x74
 8003c24:	4607      	mov	r7, r0
 8003c26:	460d      	mov	r5, r1
 8003c28:	4614      	mov	r4, r2
 8003c2a:	d50e      	bpl.n	8003c4a <_svfiprintf_r+0x32>
 8003c2c:	690b      	ldr	r3, [r1, #16]
 8003c2e:	b963      	cbnz	r3, 8003c4a <_svfiprintf_r+0x32>
 8003c30:	2140      	movs	r1, #64	; 0x40
 8003c32:	f7ff ff0b 	bl	8003a4c <_malloc_r>
 8003c36:	6028      	str	r0, [r5, #0]
 8003c38:	6128      	str	r0, [r5, #16]
 8003c3a:	b920      	cbnz	r0, 8003c46 <_svfiprintf_r+0x2e>
 8003c3c:	230c      	movs	r3, #12
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	f04f 30ff 	mov.w	r0, #4294967295
 8003c44:	e0d0      	b.n	8003de8 <_svfiprintf_r+0x1d0>
 8003c46:	2340      	movs	r3, #64	; 0x40
 8003c48:	616b      	str	r3, [r5, #20]
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8003c4e:	2320      	movs	r3, #32
 8003c50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c54:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c58:	2330      	movs	r3, #48	; 0x30
 8003c5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003e00 <_svfiprintf_r+0x1e8>
 8003c5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c62:	f04f 0901 	mov.w	r9, #1
 8003c66:	4623      	mov	r3, r4
 8003c68:	469a      	mov	sl, r3
 8003c6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c6e:	b10a      	cbz	r2, 8003c74 <_svfiprintf_r+0x5c>
 8003c70:	2a25      	cmp	r2, #37	; 0x25
 8003c72:	d1f9      	bne.n	8003c68 <_svfiprintf_r+0x50>
 8003c74:	ebba 0b04 	subs.w	fp, sl, r4
 8003c78:	d00b      	beq.n	8003c92 <_svfiprintf_r+0x7a>
 8003c7a:	465b      	mov	r3, fp
 8003c7c:	4622      	mov	r2, r4
 8003c7e:	4629      	mov	r1, r5
 8003c80:	4638      	mov	r0, r7
 8003c82:	f7ff ff6f 	bl	8003b64 <__ssputs_r>
 8003c86:	3001      	adds	r0, #1
 8003c88:	f000 80a9 	beq.w	8003dde <_svfiprintf_r+0x1c6>
 8003c8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c8e:	445a      	add	r2, fp
 8003c90:	9209      	str	r2, [sp, #36]	; 0x24
 8003c92:	f89a 3000 	ldrb.w	r3, [sl]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 80a1 	beq.w	8003dde <_svfiprintf_r+0x1c6>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ca6:	f10a 0a01 	add.w	sl, sl, #1
 8003caa:	9304      	str	r3, [sp, #16]
 8003cac:	9307      	str	r3, [sp, #28]
 8003cae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cb2:	931a      	str	r3, [sp, #104]	; 0x68
 8003cb4:	4654      	mov	r4, sl
 8003cb6:	2205      	movs	r2, #5
 8003cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cbc:	4850      	ldr	r0, [pc, #320]	; (8003e00 <_svfiprintf_r+0x1e8>)
 8003cbe:	f7fc faaf 	bl	8000220 <memchr>
 8003cc2:	9a04      	ldr	r2, [sp, #16]
 8003cc4:	b9d8      	cbnz	r0, 8003cfe <_svfiprintf_r+0xe6>
 8003cc6:	06d0      	lsls	r0, r2, #27
 8003cc8:	bf44      	itt	mi
 8003cca:	2320      	movmi	r3, #32
 8003ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cd0:	0711      	lsls	r1, r2, #28
 8003cd2:	bf44      	itt	mi
 8003cd4:	232b      	movmi	r3, #43	; 0x2b
 8003cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cda:	f89a 3000 	ldrb.w	r3, [sl]
 8003cde:	2b2a      	cmp	r3, #42	; 0x2a
 8003ce0:	d015      	beq.n	8003d0e <_svfiprintf_r+0xf6>
 8003ce2:	9a07      	ldr	r2, [sp, #28]
 8003ce4:	4654      	mov	r4, sl
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	f04f 0c0a 	mov.w	ip, #10
 8003cec:	4621      	mov	r1, r4
 8003cee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cf2:	3b30      	subs	r3, #48	; 0x30
 8003cf4:	2b09      	cmp	r3, #9
 8003cf6:	d94d      	bls.n	8003d94 <_svfiprintf_r+0x17c>
 8003cf8:	b1b0      	cbz	r0, 8003d28 <_svfiprintf_r+0x110>
 8003cfa:	9207      	str	r2, [sp, #28]
 8003cfc:	e014      	b.n	8003d28 <_svfiprintf_r+0x110>
 8003cfe:	eba0 0308 	sub.w	r3, r0, r8
 8003d02:	fa09 f303 	lsl.w	r3, r9, r3
 8003d06:	4313      	orrs	r3, r2
 8003d08:	9304      	str	r3, [sp, #16]
 8003d0a:	46a2      	mov	sl, r4
 8003d0c:	e7d2      	b.n	8003cb4 <_svfiprintf_r+0x9c>
 8003d0e:	9b03      	ldr	r3, [sp, #12]
 8003d10:	1d19      	adds	r1, r3, #4
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	9103      	str	r1, [sp, #12]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	bfbb      	ittet	lt
 8003d1a:	425b      	neglt	r3, r3
 8003d1c:	f042 0202 	orrlt.w	r2, r2, #2
 8003d20:	9307      	strge	r3, [sp, #28]
 8003d22:	9307      	strlt	r3, [sp, #28]
 8003d24:	bfb8      	it	lt
 8003d26:	9204      	strlt	r2, [sp, #16]
 8003d28:	7823      	ldrb	r3, [r4, #0]
 8003d2a:	2b2e      	cmp	r3, #46	; 0x2e
 8003d2c:	d10c      	bne.n	8003d48 <_svfiprintf_r+0x130>
 8003d2e:	7863      	ldrb	r3, [r4, #1]
 8003d30:	2b2a      	cmp	r3, #42	; 0x2a
 8003d32:	d134      	bne.n	8003d9e <_svfiprintf_r+0x186>
 8003d34:	9b03      	ldr	r3, [sp, #12]
 8003d36:	1d1a      	adds	r2, r3, #4
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	9203      	str	r2, [sp, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bfb8      	it	lt
 8003d40:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d44:	3402      	adds	r4, #2
 8003d46:	9305      	str	r3, [sp, #20]
 8003d48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003e10 <_svfiprintf_r+0x1f8>
 8003d4c:	7821      	ldrb	r1, [r4, #0]
 8003d4e:	2203      	movs	r2, #3
 8003d50:	4650      	mov	r0, sl
 8003d52:	f7fc fa65 	bl	8000220 <memchr>
 8003d56:	b138      	cbz	r0, 8003d68 <_svfiprintf_r+0x150>
 8003d58:	9b04      	ldr	r3, [sp, #16]
 8003d5a:	eba0 000a 	sub.w	r0, r0, sl
 8003d5e:	2240      	movs	r2, #64	; 0x40
 8003d60:	4082      	lsls	r2, r0
 8003d62:	4313      	orrs	r3, r2
 8003d64:	3401      	adds	r4, #1
 8003d66:	9304      	str	r3, [sp, #16]
 8003d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d6c:	4825      	ldr	r0, [pc, #148]	; (8003e04 <_svfiprintf_r+0x1ec>)
 8003d6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d72:	2206      	movs	r2, #6
 8003d74:	f7fc fa54 	bl	8000220 <memchr>
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	d038      	beq.n	8003dee <_svfiprintf_r+0x1d6>
 8003d7c:	4b22      	ldr	r3, [pc, #136]	; (8003e08 <_svfiprintf_r+0x1f0>)
 8003d7e:	bb1b      	cbnz	r3, 8003dc8 <_svfiprintf_r+0x1b0>
 8003d80:	9b03      	ldr	r3, [sp, #12]
 8003d82:	3307      	adds	r3, #7
 8003d84:	f023 0307 	bic.w	r3, r3, #7
 8003d88:	3308      	adds	r3, #8
 8003d8a:	9303      	str	r3, [sp, #12]
 8003d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d8e:	4433      	add	r3, r6
 8003d90:	9309      	str	r3, [sp, #36]	; 0x24
 8003d92:	e768      	b.n	8003c66 <_svfiprintf_r+0x4e>
 8003d94:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d98:	460c      	mov	r4, r1
 8003d9a:	2001      	movs	r0, #1
 8003d9c:	e7a6      	b.n	8003cec <_svfiprintf_r+0xd4>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	3401      	adds	r4, #1
 8003da2:	9305      	str	r3, [sp, #20]
 8003da4:	4619      	mov	r1, r3
 8003da6:	f04f 0c0a 	mov.w	ip, #10
 8003daa:	4620      	mov	r0, r4
 8003dac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003db0:	3a30      	subs	r2, #48	; 0x30
 8003db2:	2a09      	cmp	r2, #9
 8003db4:	d903      	bls.n	8003dbe <_svfiprintf_r+0x1a6>
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0c6      	beq.n	8003d48 <_svfiprintf_r+0x130>
 8003dba:	9105      	str	r1, [sp, #20]
 8003dbc:	e7c4      	b.n	8003d48 <_svfiprintf_r+0x130>
 8003dbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dc2:	4604      	mov	r4, r0
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e7f0      	b.n	8003daa <_svfiprintf_r+0x192>
 8003dc8:	ab03      	add	r3, sp, #12
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	462a      	mov	r2, r5
 8003dce:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <_svfiprintf_r+0x1f4>)
 8003dd0:	a904      	add	r1, sp, #16
 8003dd2:	4638      	mov	r0, r7
 8003dd4:	f3af 8000 	nop.w
 8003dd8:	1c42      	adds	r2, r0, #1
 8003dda:	4606      	mov	r6, r0
 8003ddc:	d1d6      	bne.n	8003d8c <_svfiprintf_r+0x174>
 8003dde:	89ab      	ldrh	r3, [r5, #12]
 8003de0:	065b      	lsls	r3, r3, #25
 8003de2:	f53f af2d 	bmi.w	8003c40 <_svfiprintf_r+0x28>
 8003de6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003de8:	b01d      	add	sp, #116	; 0x74
 8003dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dee:	ab03      	add	r3, sp, #12
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	462a      	mov	r2, r5
 8003df4:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <_svfiprintf_r+0x1f4>)
 8003df6:	a904      	add	r1, sp, #16
 8003df8:	4638      	mov	r0, r7
 8003dfa:	f000 f879 	bl	8003ef0 <_printf_i>
 8003dfe:	e7eb      	b.n	8003dd8 <_svfiprintf_r+0x1c0>
 8003e00:	08004290 	.word	0x08004290
 8003e04:	0800429a 	.word	0x0800429a
 8003e08:	00000000 	.word	0x00000000
 8003e0c:	08003b65 	.word	0x08003b65
 8003e10:	08004296 	.word	0x08004296

08003e14 <_printf_common>:
 8003e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e18:	4616      	mov	r6, r2
 8003e1a:	4699      	mov	r9, r3
 8003e1c:	688a      	ldr	r2, [r1, #8]
 8003e1e:	690b      	ldr	r3, [r1, #16]
 8003e20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e24:	4293      	cmp	r3, r2
 8003e26:	bfb8      	it	lt
 8003e28:	4613      	movlt	r3, r2
 8003e2a:	6033      	str	r3, [r6, #0]
 8003e2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e30:	4607      	mov	r7, r0
 8003e32:	460c      	mov	r4, r1
 8003e34:	b10a      	cbz	r2, 8003e3a <_printf_common+0x26>
 8003e36:	3301      	adds	r3, #1
 8003e38:	6033      	str	r3, [r6, #0]
 8003e3a:	6823      	ldr	r3, [r4, #0]
 8003e3c:	0699      	lsls	r1, r3, #26
 8003e3e:	bf42      	ittt	mi
 8003e40:	6833      	ldrmi	r3, [r6, #0]
 8003e42:	3302      	addmi	r3, #2
 8003e44:	6033      	strmi	r3, [r6, #0]
 8003e46:	6825      	ldr	r5, [r4, #0]
 8003e48:	f015 0506 	ands.w	r5, r5, #6
 8003e4c:	d106      	bne.n	8003e5c <_printf_common+0x48>
 8003e4e:	f104 0a19 	add.w	sl, r4, #25
 8003e52:	68e3      	ldr	r3, [r4, #12]
 8003e54:	6832      	ldr	r2, [r6, #0]
 8003e56:	1a9b      	subs	r3, r3, r2
 8003e58:	42ab      	cmp	r3, r5
 8003e5a:	dc26      	bgt.n	8003eaa <_printf_common+0x96>
 8003e5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e60:	1e13      	subs	r3, r2, #0
 8003e62:	6822      	ldr	r2, [r4, #0]
 8003e64:	bf18      	it	ne
 8003e66:	2301      	movne	r3, #1
 8003e68:	0692      	lsls	r2, r2, #26
 8003e6a:	d42b      	bmi.n	8003ec4 <_printf_common+0xb0>
 8003e6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e70:	4649      	mov	r1, r9
 8003e72:	4638      	mov	r0, r7
 8003e74:	47c0      	blx	r8
 8003e76:	3001      	adds	r0, #1
 8003e78:	d01e      	beq.n	8003eb8 <_printf_common+0xa4>
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	6922      	ldr	r2, [r4, #16]
 8003e7e:	f003 0306 	and.w	r3, r3, #6
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	bf02      	ittt	eq
 8003e86:	68e5      	ldreq	r5, [r4, #12]
 8003e88:	6833      	ldreq	r3, [r6, #0]
 8003e8a:	1aed      	subeq	r5, r5, r3
 8003e8c:	68a3      	ldr	r3, [r4, #8]
 8003e8e:	bf0c      	ite	eq
 8003e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e94:	2500      	movne	r5, #0
 8003e96:	4293      	cmp	r3, r2
 8003e98:	bfc4      	itt	gt
 8003e9a:	1a9b      	subgt	r3, r3, r2
 8003e9c:	18ed      	addgt	r5, r5, r3
 8003e9e:	2600      	movs	r6, #0
 8003ea0:	341a      	adds	r4, #26
 8003ea2:	42b5      	cmp	r5, r6
 8003ea4:	d11a      	bne.n	8003edc <_printf_common+0xc8>
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	e008      	b.n	8003ebc <_printf_common+0xa8>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	4652      	mov	r2, sl
 8003eae:	4649      	mov	r1, r9
 8003eb0:	4638      	mov	r0, r7
 8003eb2:	47c0      	blx	r8
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	d103      	bne.n	8003ec0 <_printf_common+0xac>
 8003eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ec0:	3501      	adds	r5, #1
 8003ec2:	e7c6      	b.n	8003e52 <_printf_common+0x3e>
 8003ec4:	18e1      	adds	r1, r4, r3
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	2030      	movs	r0, #48	; 0x30
 8003eca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ece:	4422      	add	r2, r4
 8003ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ed4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ed8:	3302      	adds	r3, #2
 8003eda:	e7c7      	b.n	8003e6c <_printf_common+0x58>
 8003edc:	2301      	movs	r3, #1
 8003ede:	4622      	mov	r2, r4
 8003ee0:	4649      	mov	r1, r9
 8003ee2:	4638      	mov	r0, r7
 8003ee4:	47c0      	blx	r8
 8003ee6:	3001      	adds	r0, #1
 8003ee8:	d0e6      	beq.n	8003eb8 <_printf_common+0xa4>
 8003eea:	3601      	adds	r6, #1
 8003eec:	e7d9      	b.n	8003ea2 <_printf_common+0x8e>
	...

08003ef0 <_printf_i>:
 8003ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef4:	7e0f      	ldrb	r7, [r1, #24]
 8003ef6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ef8:	2f78      	cmp	r7, #120	; 0x78
 8003efa:	4691      	mov	r9, r2
 8003efc:	4680      	mov	r8, r0
 8003efe:	460c      	mov	r4, r1
 8003f00:	469a      	mov	sl, r3
 8003f02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f06:	d807      	bhi.n	8003f18 <_printf_i+0x28>
 8003f08:	2f62      	cmp	r7, #98	; 0x62
 8003f0a:	d80a      	bhi.n	8003f22 <_printf_i+0x32>
 8003f0c:	2f00      	cmp	r7, #0
 8003f0e:	f000 80d4 	beq.w	80040ba <_printf_i+0x1ca>
 8003f12:	2f58      	cmp	r7, #88	; 0x58
 8003f14:	f000 80c0 	beq.w	8004098 <_printf_i+0x1a8>
 8003f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f20:	e03a      	b.n	8003f98 <_printf_i+0xa8>
 8003f22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f26:	2b15      	cmp	r3, #21
 8003f28:	d8f6      	bhi.n	8003f18 <_printf_i+0x28>
 8003f2a:	a101      	add	r1, pc, #4	; (adr r1, 8003f30 <_printf_i+0x40>)
 8003f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f30:	08003f89 	.word	0x08003f89
 8003f34:	08003f9d 	.word	0x08003f9d
 8003f38:	08003f19 	.word	0x08003f19
 8003f3c:	08003f19 	.word	0x08003f19
 8003f40:	08003f19 	.word	0x08003f19
 8003f44:	08003f19 	.word	0x08003f19
 8003f48:	08003f9d 	.word	0x08003f9d
 8003f4c:	08003f19 	.word	0x08003f19
 8003f50:	08003f19 	.word	0x08003f19
 8003f54:	08003f19 	.word	0x08003f19
 8003f58:	08003f19 	.word	0x08003f19
 8003f5c:	080040a1 	.word	0x080040a1
 8003f60:	08003fc9 	.word	0x08003fc9
 8003f64:	0800405b 	.word	0x0800405b
 8003f68:	08003f19 	.word	0x08003f19
 8003f6c:	08003f19 	.word	0x08003f19
 8003f70:	080040c3 	.word	0x080040c3
 8003f74:	08003f19 	.word	0x08003f19
 8003f78:	08003fc9 	.word	0x08003fc9
 8003f7c:	08003f19 	.word	0x08003f19
 8003f80:	08003f19 	.word	0x08003f19
 8003f84:	08004063 	.word	0x08004063
 8003f88:	682b      	ldr	r3, [r5, #0]
 8003f8a:	1d1a      	adds	r2, r3, #4
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	602a      	str	r2, [r5, #0]
 8003f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e09f      	b.n	80040dc <_printf_i+0x1ec>
 8003f9c:	6820      	ldr	r0, [r4, #0]
 8003f9e:	682b      	ldr	r3, [r5, #0]
 8003fa0:	0607      	lsls	r7, r0, #24
 8003fa2:	f103 0104 	add.w	r1, r3, #4
 8003fa6:	6029      	str	r1, [r5, #0]
 8003fa8:	d501      	bpl.n	8003fae <_printf_i+0xbe>
 8003faa:	681e      	ldr	r6, [r3, #0]
 8003fac:	e003      	b.n	8003fb6 <_printf_i+0xc6>
 8003fae:	0646      	lsls	r6, r0, #25
 8003fb0:	d5fb      	bpl.n	8003faa <_printf_i+0xba>
 8003fb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003fb6:	2e00      	cmp	r6, #0
 8003fb8:	da03      	bge.n	8003fc2 <_printf_i+0xd2>
 8003fba:	232d      	movs	r3, #45	; 0x2d
 8003fbc:	4276      	negs	r6, r6
 8003fbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fc2:	485a      	ldr	r0, [pc, #360]	; (800412c <_printf_i+0x23c>)
 8003fc4:	230a      	movs	r3, #10
 8003fc6:	e012      	b.n	8003fee <_printf_i+0xfe>
 8003fc8:	682b      	ldr	r3, [r5, #0]
 8003fca:	6820      	ldr	r0, [r4, #0]
 8003fcc:	1d19      	adds	r1, r3, #4
 8003fce:	6029      	str	r1, [r5, #0]
 8003fd0:	0605      	lsls	r5, r0, #24
 8003fd2:	d501      	bpl.n	8003fd8 <_printf_i+0xe8>
 8003fd4:	681e      	ldr	r6, [r3, #0]
 8003fd6:	e002      	b.n	8003fde <_printf_i+0xee>
 8003fd8:	0641      	lsls	r1, r0, #25
 8003fda:	d5fb      	bpl.n	8003fd4 <_printf_i+0xe4>
 8003fdc:	881e      	ldrh	r6, [r3, #0]
 8003fde:	4853      	ldr	r0, [pc, #332]	; (800412c <_printf_i+0x23c>)
 8003fe0:	2f6f      	cmp	r7, #111	; 0x6f
 8003fe2:	bf0c      	ite	eq
 8003fe4:	2308      	moveq	r3, #8
 8003fe6:	230a      	movne	r3, #10
 8003fe8:	2100      	movs	r1, #0
 8003fea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fee:	6865      	ldr	r5, [r4, #4]
 8003ff0:	60a5      	str	r5, [r4, #8]
 8003ff2:	2d00      	cmp	r5, #0
 8003ff4:	bfa2      	ittt	ge
 8003ff6:	6821      	ldrge	r1, [r4, #0]
 8003ff8:	f021 0104 	bicge.w	r1, r1, #4
 8003ffc:	6021      	strge	r1, [r4, #0]
 8003ffe:	b90e      	cbnz	r6, 8004004 <_printf_i+0x114>
 8004000:	2d00      	cmp	r5, #0
 8004002:	d04b      	beq.n	800409c <_printf_i+0x1ac>
 8004004:	4615      	mov	r5, r2
 8004006:	fbb6 f1f3 	udiv	r1, r6, r3
 800400a:	fb03 6711 	mls	r7, r3, r1, r6
 800400e:	5dc7      	ldrb	r7, [r0, r7]
 8004010:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004014:	4637      	mov	r7, r6
 8004016:	42bb      	cmp	r3, r7
 8004018:	460e      	mov	r6, r1
 800401a:	d9f4      	bls.n	8004006 <_printf_i+0x116>
 800401c:	2b08      	cmp	r3, #8
 800401e:	d10b      	bne.n	8004038 <_printf_i+0x148>
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	07de      	lsls	r6, r3, #31
 8004024:	d508      	bpl.n	8004038 <_printf_i+0x148>
 8004026:	6923      	ldr	r3, [r4, #16]
 8004028:	6861      	ldr	r1, [r4, #4]
 800402a:	4299      	cmp	r1, r3
 800402c:	bfde      	ittt	le
 800402e:	2330      	movle	r3, #48	; 0x30
 8004030:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004034:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004038:	1b52      	subs	r2, r2, r5
 800403a:	6122      	str	r2, [r4, #16]
 800403c:	f8cd a000 	str.w	sl, [sp]
 8004040:	464b      	mov	r3, r9
 8004042:	aa03      	add	r2, sp, #12
 8004044:	4621      	mov	r1, r4
 8004046:	4640      	mov	r0, r8
 8004048:	f7ff fee4 	bl	8003e14 <_printf_common>
 800404c:	3001      	adds	r0, #1
 800404e:	d14a      	bne.n	80040e6 <_printf_i+0x1f6>
 8004050:	f04f 30ff 	mov.w	r0, #4294967295
 8004054:	b004      	add	sp, #16
 8004056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	f043 0320 	orr.w	r3, r3, #32
 8004060:	6023      	str	r3, [r4, #0]
 8004062:	4833      	ldr	r0, [pc, #204]	; (8004130 <_printf_i+0x240>)
 8004064:	2778      	movs	r7, #120	; 0x78
 8004066:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	6829      	ldr	r1, [r5, #0]
 800406e:	061f      	lsls	r7, r3, #24
 8004070:	f851 6b04 	ldr.w	r6, [r1], #4
 8004074:	d402      	bmi.n	800407c <_printf_i+0x18c>
 8004076:	065f      	lsls	r7, r3, #25
 8004078:	bf48      	it	mi
 800407a:	b2b6      	uxthmi	r6, r6
 800407c:	07df      	lsls	r7, r3, #31
 800407e:	bf48      	it	mi
 8004080:	f043 0320 	orrmi.w	r3, r3, #32
 8004084:	6029      	str	r1, [r5, #0]
 8004086:	bf48      	it	mi
 8004088:	6023      	strmi	r3, [r4, #0]
 800408a:	b91e      	cbnz	r6, 8004094 <_printf_i+0x1a4>
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	f023 0320 	bic.w	r3, r3, #32
 8004092:	6023      	str	r3, [r4, #0]
 8004094:	2310      	movs	r3, #16
 8004096:	e7a7      	b.n	8003fe8 <_printf_i+0xf8>
 8004098:	4824      	ldr	r0, [pc, #144]	; (800412c <_printf_i+0x23c>)
 800409a:	e7e4      	b.n	8004066 <_printf_i+0x176>
 800409c:	4615      	mov	r5, r2
 800409e:	e7bd      	b.n	800401c <_printf_i+0x12c>
 80040a0:	682b      	ldr	r3, [r5, #0]
 80040a2:	6826      	ldr	r6, [r4, #0]
 80040a4:	6961      	ldr	r1, [r4, #20]
 80040a6:	1d18      	adds	r0, r3, #4
 80040a8:	6028      	str	r0, [r5, #0]
 80040aa:	0635      	lsls	r5, r6, #24
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	d501      	bpl.n	80040b4 <_printf_i+0x1c4>
 80040b0:	6019      	str	r1, [r3, #0]
 80040b2:	e002      	b.n	80040ba <_printf_i+0x1ca>
 80040b4:	0670      	lsls	r0, r6, #25
 80040b6:	d5fb      	bpl.n	80040b0 <_printf_i+0x1c0>
 80040b8:	8019      	strh	r1, [r3, #0]
 80040ba:	2300      	movs	r3, #0
 80040bc:	6123      	str	r3, [r4, #16]
 80040be:	4615      	mov	r5, r2
 80040c0:	e7bc      	b.n	800403c <_printf_i+0x14c>
 80040c2:	682b      	ldr	r3, [r5, #0]
 80040c4:	1d1a      	adds	r2, r3, #4
 80040c6:	602a      	str	r2, [r5, #0]
 80040c8:	681d      	ldr	r5, [r3, #0]
 80040ca:	6862      	ldr	r2, [r4, #4]
 80040cc:	2100      	movs	r1, #0
 80040ce:	4628      	mov	r0, r5
 80040d0:	f7fc f8a6 	bl	8000220 <memchr>
 80040d4:	b108      	cbz	r0, 80040da <_printf_i+0x1ea>
 80040d6:	1b40      	subs	r0, r0, r5
 80040d8:	6060      	str	r0, [r4, #4]
 80040da:	6863      	ldr	r3, [r4, #4]
 80040dc:	6123      	str	r3, [r4, #16]
 80040de:	2300      	movs	r3, #0
 80040e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040e4:	e7aa      	b.n	800403c <_printf_i+0x14c>
 80040e6:	6923      	ldr	r3, [r4, #16]
 80040e8:	462a      	mov	r2, r5
 80040ea:	4649      	mov	r1, r9
 80040ec:	4640      	mov	r0, r8
 80040ee:	47d0      	blx	sl
 80040f0:	3001      	adds	r0, #1
 80040f2:	d0ad      	beq.n	8004050 <_printf_i+0x160>
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	079b      	lsls	r3, r3, #30
 80040f8:	d413      	bmi.n	8004122 <_printf_i+0x232>
 80040fa:	68e0      	ldr	r0, [r4, #12]
 80040fc:	9b03      	ldr	r3, [sp, #12]
 80040fe:	4298      	cmp	r0, r3
 8004100:	bfb8      	it	lt
 8004102:	4618      	movlt	r0, r3
 8004104:	e7a6      	b.n	8004054 <_printf_i+0x164>
 8004106:	2301      	movs	r3, #1
 8004108:	4632      	mov	r2, r6
 800410a:	4649      	mov	r1, r9
 800410c:	4640      	mov	r0, r8
 800410e:	47d0      	blx	sl
 8004110:	3001      	adds	r0, #1
 8004112:	d09d      	beq.n	8004050 <_printf_i+0x160>
 8004114:	3501      	adds	r5, #1
 8004116:	68e3      	ldr	r3, [r4, #12]
 8004118:	9903      	ldr	r1, [sp, #12]
 800411a:	1a5b      	subs	r3, r3, r1
 800411c:	42ab      	cmp	r3, r5
 800411e:	dcf2      	bgt.n	8004106 <_printf_i+0x216>
 8004120:	e7eb      	b.n	80040fa <_printf_i+0x20a>
 8004122:	2500      	movs	r5, #0
 8004124:	f104 0619 	add.w	r6, r4, #25
 8004128:	e7f5      	b.n	8004116 <_printf_i+0x226>
 800412a:	bf00      	nop
 800412c:	080042a1 	.word	0x080042a1
 8004130:	080042b2 	.word	0x080042b2

08004134 <memmove>:
 8004134:	4288      	cmp	r0, r1
 8004136:	b510      	push	{r4, lr}
 8004138:	eb01 0402 	add.w	r4, r1, r2
 800413c:	d902      	bls.n	8004144 <memmove+0x10>
 800413e:	4284      	cmp	r4, r0
 8004140:	4623      	mov	r3, r4
 8004142:	d807      	bhi.n	8004154 <memmove+0x20>
 8004144:	1e43      	subs	r3, r0, #1
 8004146:	42a1      	cmp	r1, r4
 8004148:	d008      	beq.n	800415c <memmove+0x28>
 800414a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800414e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004152:	e7f8      	b.n	8004146 <memmove+0x12>
 8004154:	4402      	add	r2, r0
 8004156:	4601      	mov	r1, r0
 8004158:	428a      	cmp	r2, r1
 800415a:	d100      	bne.n	800415e <memmove+0x2a>
 800415c:	bd10      	pop	{r4, pc}
 800415e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004166:	e7f7      	b.n	8004158 <memmove+0x24>

08004168 <_sbrk_r>:
 8004168:	b538      	push	{r3, r4, r5, lr}
 800416a:	4d06      	ldr	r5, [pc, #24]	; (8004184 <_sbrk_r+0x1c>)
 800416c:	2300      	movs	r3, #0
 800416e:	4604      	mov	r4, r0
 8004170:	4608      	mov	r0, r1
 8004172:	602b      	str	r3, [r5, #0]
 8004174:	f7fc fd9c 	bl	8000cb0 <_sbrk>
 8004178:	1c43      	adds	r3, r0, #1
 800417a:	d102      	bne.n	8004182 <_sbrk_r+0x1a>
 800417c:	682b      	ldr	r3, [r5, #0]
 800417e:	b103      	cbz	r3, 8004182 <_sbrk_r+0x1a>
 8004180:	6023      	str	r3, [r4, #0]
 8004182:	bd38      	pop	{r3, r4, r5, pc}
 8004184:	20000248 	.word	0x20000248

08004188 <memcpy>:
 8004188:	440a      	add	r2, r1
 800418a:	4291      	cmp	r1, r2
 800418c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004190:	d100      	bne.n	8004194 <memcpy+0xc>
 8004192:	4770      	bx	lr
 8004194:	b510      	push	{r4, lr}
 8004196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800419a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800419e:	4291      	cmp	r1, r2
 80041a0:	d1f9      	bne.n	8004196 <memcpy+0xe>
 80041a2:	bd10      	pop	{r4, pc}

080041a4 <_realloc_r>:
 80041a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a8:	4680      	mov	r8, r0
 80041aa:	4614      	mov	r4, r2
 80041ac:	460e      	mov	r6, r1
 80041ae:	b921      	cbnz	r1, 80041ba <_realloc_r+0x16>
 80041b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041b4:	4611      	mov	r1, r2
 80041b6:	f7ff bc49 	b.w	8003a4c <_malloc_r>
 80041ba:	b92a      	cbnz	r2, 80041c8 <_realloc_r+0x24>
 80041bc:	f7ff fbda 	bl	8003974 <_free_r>
 80041c0:	4625      	mov	r5, r4
 80041c2:	4628      	mov	r0, r5
 80041c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041c8:	f000 f81b 	bl	8004202 <_malloc_usable_size_r>
 80041cc:	4284      	cmp	r4, r0
 80041ce:	4607      	mov	r7, r0
 80041d0:	d802      	bhi.n	80041d8 <_realloc_r+0x34>
 80041d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80041d6:	d812      	bhi.n	80041fe <_realloc_r+0x5a>
 80041d8:	4621      	mov	r1, r4
 80041da:	4640      	mov	r0, r8
 80041dc:	f7ff fc36 	bl	8003a4c <_malloc_r>
 80041e0:	4605      	mov	r5, r0
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d0ed      	beq.n	80041c2 <_realloc_r+0x1e>
 80041e6:	42bc      	cmp	r4, r7
 80041e8:	4622      	mov	r2, r4
 80041ea:	4631      	mov	r1, r6
 80041ec:	bf28      	it	cs
 80041ee:	463a      	movcs	r2, r7
 80041f0:	f7ff ffca 	bl	8004188 <memcpy>
 80041f4:	4631      	mov	r1, r6
 80041f6:	4640      	mov	r0, r8
 80041f8:	f7ff fbbc 	bl	8003974 <_free_r>
 80041fc:	e7e1      	b.n	80041c2 <_realloc_r+0x1e>
 80041fe:	4635      	mov	r5, r6
 8004200:	e7df      	b.n	80041c2 <_realloc_r+0x1e>

08004202 <_malloc_usable_size_r>:
 8004202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004206:	1f18      	subs	r0, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	bfbc      	itt	lt
 800420c:	580b      	ldrlt	r3, [r1, r0]
 800420e:	18c0      	addlt	r0, r0, r3
 8004210:	4770      	bx	lr
	...

08004214 <_init>:
 8004214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004216:	bf00      	nop
 8004218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421a:	bc08      	pop	{r3}
 800421c:	469e      	mov	lr, r3
 800421e:	4770      	bx	lr

08004220 <_fini>:
 8004220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004222:	bf00      	nop
 8004224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004226:	bc08      	pop	{r3}
 8004228:	469e      	mov	lr, r3
 800422a:	4770      	bx	lr
